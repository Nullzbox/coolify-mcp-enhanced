This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-08T15:15:01.232Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repomix, visit: https://github.com/yamadashy/repomix
</additional_info>

</file_summary>

<repository_structure>
.cursor/
  rules/
    000-cursor-rules.mdc
    801-feature-workflow.mdc
    802-coolify-mcp-workflow.mdc
    803-npm-publish-workflow.mdc
.github/
  workflows/
    ci.yml
docs/
  features/
    001-core-server-setup.md
    002-server-info-resource.md
    003-project-management.md
    004-environment-management.md
    005-application-deployment.md
    006-database-management.md
    007-service-management.md
    008-mcp-resources-implementation.md
    009-mcp-prompts-implementation.md
    010-private-key-management.md
    011-team-management.md
    013-npx-config-fix.md
    future-adrs.md
  openapi-chunks/
    applications-api.yaml
    databases-api.yaml
    deployments-api.yaml
    private-keys-api.yaml
    projects-api.yaml
    resources-api.yaml
    schemas.yaml
    servers-api.yaml
    services-api.yaml
    teams-api.yaml
    untagged-api.yaml
  coolify-openapi.yaml
  mcp-example-clients.md
  mcp-js-readme.md
src/
  __tests__/
    resources/
      application-resources.test.ts
      database-resources.test.ts
      deployment-resources.test.ts
      service-resources.test.ts
    coolify-client.test.ts
  lib/
    coolify-client.ts
    mcp-server.ts
    resource.ts
  resources/
    application-resources.ts
    database-resources.ts
    deployment-resources.ts
    index.ts
    service-resources.ts
  types/
    coolify.ts
  index.ts
.eslintrc.json
.gitignore
.lintstagedrc.json
.markdownlint-cli2.jsonc
.prettierrc
debug.js
jest.config.js
package.json
README.md
tsconfig.json
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path=".cursor/rules/000-cursor-rules.mdc">
---
description: ALWAYS when asked to CREATE A RULE or UPDATE A RULE or taught a lesson from the user that should be retained as a new rule for Cursor
globs: .cursor/rules/*.mdc
alwaysApply: false
---
# Cursor Rules Format

## Core Structure

```mdc
---
description: ACTION when TRIGGER to OUTCOME
globs: *.mdc
---

# Rule Title

## Context
- When to apply this rule
- Prerequisites or conditions

## Requirements
- Concise, actionable items
- Each requirement must be testable

## Examples
<example>
Good concise example with explanation
</example>

<example type="invalid">
Invalid concise example with explanation
</example>
```

## File Organization

### Location
- Path: `.cursor/rules/`
- Extension: `.mdc`

### Naming Convention
PREFIX-name.mdc where PREFIX is:
- 0XX: Core standards
- 1XX: Tool configs
- 3XX: Testing standards
- 1XXX: Language rules
- 2XXX: Framework rules
- 8XX: Workflows
- 9XX: Templates
- _name.mdc: Private rules

### Glob Pattern Examples
Common glob patterns for different rule types:
- Core standards: .cursor/rules/*.mdc
- Language rules: src/**/*.{js,ts}
- Testing standards: **/*.test.{js,ts}
- React components: src/components/**/*.tsx
- Documentation: docs/**/*.md
- Configuration files: *.config.{js,json}
- Build artifacts: dist/**/*
- Multiple extensions: src/**/*.{js,jsx,ts,tsx}
- Multiple files: dist/**/*, docs/**/*.md

## Required Fields

### Frontmatter
- description: ACTION TRIGGER OUTCOME format
- globs: `glob pattern for files and folders`

### Body
- <version>X.Y.Z</version>
- context: Usage conditions
- requirements: Actionable items
- examples: Both valid and invalid

## Formatting Guidelines

- Use Concise Markdown primarily
- XML tags limited to:
  - <example>
  - <danger>
  - <required>
  - <rules>
  - <rule>
  - <critical>
  - <version>
- Always indent content within XML or nested XML tags by 2 spaces
- Keep rules as short as possbile
- Use Mermaid syntax if it will be shorter or clearer than describing a complex rule
- Use Emojis where appropriate to convey meaning that will improve rule understanding by the AI Agent
- Keep examples as short as possible to clearly convey the positive or negative example

## AI Optimization Tips

1. Use precise, deterministic ACTION TRIGGER OUTCOME format in descriptions
2. Provide concise positive and negative example of rule application in practice
3. Optimize for AI context window efficiency
4. Remove any non-essential or redundant information
5. Use standard glob patterns without quotes (e.g., *.js, src/**/*.ts)

## AI Context Efficiency

1. Keep frontmatter description under 120 characters (or less) while maintaining clear intent for rule selection by AI AGent
2. Limit examples to essential patterns only
3. Use hierarchical structure for quick parsing
4. Remove redundant information across sections
5. Maintain high information density with minimal tokens
6. Focus on machine-actionable instructions over human explanations

<critical>
  - NEVER include verbose explanations or redundant context that increases AI token overhead
  - Keep file as short and to the point as possible BUT NEVER at the expense of sacrificing rule impact and usefulness for the AI Agent.
  - the front matter can ONLY have the fields description and globs.
</critical>
</file>

<file path=".cursor/rules/801-feature-workflow.mdc">
---
description: FOLLOW feature development workflow WHEN implementing new features TO ensure consistent, tested, and documented changes
globs: src/**/*
---

# Feature Development Workflow

## Context
- When implementing new features from the features documentation
- When making significant changes that require testing and documentation
- When working on a feature branch

## Requirements
- Start from up-to-date main branch
- Create feature branch with descriptive name (feature/feature-name)
- Locate and review feature documentation in docs/features directory
- Follow documentation requirements systematically
- IMPORTANT Commit frequently to trigger pre-commit hooks (linting, formatting, tests)
- CRITICAL Always stage ALL modified files after making changes
- CRITICAL Always push changes to remote after committing
- Add comprehensive tests for new functionality
- Push completed work to remote for PR review

## Examples
<example>
# Good workflow
1. git checkout main && git pull
2. git checkout -b feature/server-info
3. Review docs/features/002-server-info-resource.md
4. Implement ServerInfo interface
5. Add getServerInfo method with tests
6. git add . # Stage ALL changes
7. Commit to run hooks: "feat: add server info interface"
8. git push origin feature/server-info # Push changes immediately
9. Implement ServerStatus interface
10. Add getServerStatus method with tests
11. git add . # Stage ALL changes again
12. Commit to run hooks: "feat: add server status resource"
13. git push origin feature/server-info # Push changes again
14. Fix any linting issues
15. git add . && git commit -m "fix: linting issues"
16. git push origin feature/server-info
</example>

<example type="invalid">
# Poor workflow
1. Start coding without checking docs
2. Make all changes in one big commit
3. Skip tests or add them later
4. Leave changes unstaged
5. Forget to push changes to remote
6. Push directly to main
7. Fix linting issues after PR
</example>

## Critical Points
<critical>
- ALWAYS work from feature documentation
- NEVER skip tests for new functionality
- Commit OFTEN to utilize pre-commit hooks
- ALWAYS stage ALL modified files after making changes
- ALWAYS push changes to remote after committing
- Keep commits focused and well-described
</critical>
</file>

<file path=".cursor/rules/802-coolify-mcp-workflow.mdc">
---
description: FOLLOW Coolify MCP workflow WHEN implementing new Coolify API endpoints TO ensure consistent and tested MCP
globs: src/**/*.{ts,tsx}
alwaysApply: false
---

# Coolify MCP Development Workflow

## Context
- When implementing new Coolify API endpoints as MCP tools
- When adding new features from the feature documentation
- When extending the MCP server capabilities

## Requirements
1. Start by reviewing feature documentation in docs/features
2. Verify endpoint exists in docs/openapi-chunks/* 
3. Follow existing implementation patterns:
   - Add types to src/types/coolify.ts
   - Add client method to src/lib/coolify-client.ts
   - Add MCP tool to src/lib/mcp-server.ts
   - Add simple test in src/__tests__/mcp-server.test.ts
4. Maintain strict TypeScript standards:
   - Always include explicit return types on functions
   - Import and use proper types from coolify.ts
   - No implicit any types
   - Follow existing type patterns
5. Keep tests focused and properly mocked:
   ```typescript
   it('should call client methodName', async () => {
     // Mock the method before calling it
     const mockResponse = { /* expected shape */ };
     const spy = jest.spyOn(server['client'], 'methodName')
       .mockResolvedValue(mockResponse);

     await server.method_name('test-uuid');
     expect(spy).toHaveBeenCalledWith('test-uuid');
   });
   ```
6. Follow gitflow as per 801-feature-workflow

## Examples
<example>
# Good implementation
1. Review docs/features/003-server-domains.md
2. Verify /servers/{uuid}/domains in openapi.yaml
3. Add ServerDomain interface to types
4. Add getServerDomains() to client with proper types:
   ```typescript
   async getServerDomains(uuid: string): Promise<ServerDomain[]> {
     return this.request<ServerDomain[]>(`/servers/${uuid}/domains`);
   }
   ```
5. Add get_server_domains tool to MCP server
6. Add properly mocked test:
   ```typescript
   const mockDomains = [{ ip: '1.2.3.4', domains: ['test.com'] }];
   const spy = jest.spyOn(client, 'getServerDomains')
     .mockResolvedValue(mockDomains);
   ```
7. Follow gitflow for commits and PR
</example>

<example type="invalid">
# Poor implementation
1. Start coding without checking docs
2. Add endpoint not in OpenAPI spec
3. Create new patterns different from existing code
4. Skip type definitions or use implicit any
5. Write tests that make real HTTP calls
6. Skip gitflow process
</example>

<critical>
- ALWAYS verify endpoint exists in OpenAPI spec
- ALWAYS include explicit return types on functions
- ALWAYS mock HTTP calls in tests
- NEVER introduce new patterns - follow existing code
- Keep tests simple and fully mocked
- Follow established file organization
- Fix ALL linting errors before committing
</critical>
</file>

<file path=".cursor/rules/803-npm-publish-workflow.mdc">
---
description: FOLLOW npm publishing workflow WHEN releasing package updates TO ensure proper versioning and release process
globs: package.json
alwaysApply: false
---
# NPM Package Publishing Workflow

## Context
- When releasing new package versions to NPM
- When changes need to be published for users
- When bumping package version numbers

## Requirements
- Run all tests before publishing
- Update CHANGELOG.md with version changes
- Use npm version command for version bumps
- Push git tags after version update
- Verify package installation post-publish

## Examples
<example>
# Release patch version
git checkout main
git pull
npm test
npm version patch
git push origin main --tags
npm publish --access public
npm install -g package-name@latest
</example>

<example type="invalid">
# Incorrect release process
vim package.json  # manually edit version
npm publish  # publish without tests
# forgot to push tags
# no verification
</example>

<critical>
- NEVER manually edit version in package.json
- ALWAYS run tests before publishing
- ALWAYS push tags after version bump
- ALWAYS verify published package
</critical>
</file>

<file path=".github/workflows/ci.yml">
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: npm audit --audit-level=high

      - name: Format check
        run: npx prettier --check .

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Test
        run: npm test
</file>

<file path="docs/features/001-core-server-setup.md">
# ADR 001: Core Server Setup

## Context

Need basic MCP server implementation that can authenticate with Coolify and handle basic operations.

## Implementation Checklist

- [x] Project structure setup

  - [x] TypeScript configuration
  - [x] ESLint + Prettier
  - [x] Jest/Vitest setup
  - [x] Basic GitHub Actions CI

- [x] Core MCP Server

  - [x] Basic server class implementation
  - [x] Environment configuration (COOLIFY_ACCESS_TOKEN, COOLIFY_BASE_URL)
  - [x] Coolify API client wrapper
  - [x] Error handling structure

- [x] Testing Infrastructure
  - [x] Mock Coolify API responses
  - [x] Basic integration test framework

## Dependencies

- None (This is our first implementation)
</file>

<file path="docs/features/002-server-info-resource.md">
# ADR 002: Server Information Resources

## Context

First useful feature - ability to get server information and status through MCP resources.

## API Endpoints Used

- GET `/servers` (Line ~500)

  - Lists all servers
  - Response: Array of Server objects
  - Auth: Bearer token required

- GET `/servers/{uuid}` (Line ~550)

  - Get server details
  - Response: Server object with status
  - Auth: Bearer token required

- GET `/servers/{uuid}/status` (Line ~600)
  - Get server health and resource usage
  - Response: ServerStatus object
  - Auth: Bearer token required

## Implementation Checklist

- [x] Basic Resource Implementation

  - [x] Server info resource (resources://coolify/server/info)
    - [x] Basic server details
    - [x] Version information
  - [x] Server status resource (resources://coolify/server/status)
    - [x] Health check
    - [x] Resource usage

- [x] Resource Testing
  - [x] Unit tests for resource formatters
  - [x] Integration tests with mock data
  - [x] Live test with real Coolify instance

## Dependencies

- ADR 001 (Core Server Setup)
</file>

<file path="docs/features/003-project-management.md">
# ADR 003: Project Management

## Context

Basic project management functionality - first interactive feature allowing users to create and manage projects.

## API Endpoints Used

- GET `/projects` (Line ~800)

  - Lists all projects
  - Response: Array of Project objects
  - Auth: Bearer token required

- POST `/projects` (Line ~850)

  - Create new project
  - Request body: { name: string, description?: string }
  - Response: Project object
  - Auth: Bearer token required

- GET `/projects/{uuid}` (Line ~900)

  - Get project details
  - Response: Project object with relationships
  - Auth: Bearer token required

- DELETE `/projects/{uuid}` (Line ~950)

  - Delete project
  - Response: 204 No Content
  - Auth: Bearer token required

- PUT `/projects/{uuid}` (Line ~1000)
  - Update project
  - Request body: { name?: string, description?: string }
  - Response: Updated Project object
  - Auth: Bearer token required

## Implementation Checklist

- [x] Project List Resource

  - [x] resources://coolify/projects/list implementation
  - [x] Pagination support
  - [x] Basic filtering

- [x] Project Management Tools

  - [x] createProject tool
  - [x] deleteProject tool
  - [x] updateProject tool

- [x] Project Detail Resource

  - [x] resources://coolify/projects/{id} implementation
  - [x] Project status and configuration

- [x] Testing
  - [x] CRUD operation tests
  - [x] Error handling tests
  - [x] Resource format tests

## Dependencies

- ADR 001 (Core Server Setup)
- ADR 002 (Server Information Resources)
</file>

<file path="docs/features/004-environment-management.md">
# ADR 004: Environment Management

## Context

Environment management within projects - allows retrieving environment information and deploying applications within environments.

## API Endpoints Used

- GET `/projects/{uuid}/{environment_name_or_uuid}`

  - Get environment details by project UUID and environment name/UUID
  - Response: Environment object
  - Auth: Bearer token required

- POST `/applications/{uuid}/deploy`
  - Deploy an application using its UUID
  - Response: Deployment object
  - Auth: Bearer token required

Note: Environment creation and management is handled through the Projects API. Environments are created and configured as part of project setup.

## Implementation Status

### Completed

- [x] Environment Detail Resource

  - [x] GET project environment endpoint implemented
  - [x] Client method: `getProjectEnvironment`
  - [x] MCP tool: `get_project_environment`

- [x] Application Deployment
  - [x] Deploy application endpoint implemented
  - [x] Client method: `deployApplication`
  - [x] MCP tool: `deploy_application`

### Environment Schema

```typescript
interface Environment {
  id: number;
  name: string;
  project_id: number;
  created_at: string;
  updated_at: string;
  description: string;
}
```

## Dependencies

- ADR 001 (Core Server Setup)
- ADR 003 (Project Management)

## Notes

- Environment management is tightly coupled with projects in the Coolify API
- Environment variables are managed at the application level during application creation/updates
- Direct environment CRUD operations are not available through dedicated endpoints
- Environment information can be retrieved through the project endpoints
</file>

<file path="docs/features/005-application-deployment.md">
# ADR 005: Application Deployment

## Context

Core application deployment functionality - allows deploying and managing applications within environments.

## API Endpoints Used

- GET `/applications` (Line 10)

  - Lists all applications
  - Query params: environment_uuid (optional)
  - Response: Array of Application objects
  - Auth: Bearer token required
  - ✅ Implemented

- POST `/applications/public` (Line 31)

  - Create new application from public repository
  - Request body: {
    project_uuid: string,
    environment_uuid: string,
    git_repository: string,
    git_branch: string,
    build_pack: "nixpacks" | "static" | "dockerfile" | "dockercompose",
    ports_exposes: string,
    name?: string,
    ...additional configuration
    }
  - Response: Application object
  - Auth: Bearer token required
  - ✅ Implemented

- GET `/applications/{uuid}` (Line ~1600)

  - Get application details
  - Response: Application object with status
  - Auth: Bearer token required
  - ✅ Implemented

- DELETE `/applications/{uuid}` (Line ~1650)

  - Delete application
  - Response: 204 No Content
  - Auth: Bearer token required
  - ✅ Implemented

- POST `/applications/{uuid}/deploy` (Line ~1700)

  - Trigger application deployment
  - Response: Deployment object
  - Auth: Bearer token required
  - ✅ Implemented

## Implementation Checklist

- [x] Application List Resource

  - [x] resources://coolify/applications/list
  - [x] Filter by environment/project
  - [x] Status information

- [x] Application Management Tools

  - [x] createApplication tool
  - [x] deployApplication tool
  - [x] configureApplication tool
  - [x] deleteApplication tool

- [x] Application Monitoring

  - [x] resources://coolify/applications/{id}/status
  - [x] Basic metrics

- [x] Testing
  - [x] Deployment workflow tests
  - [x] Configuration management tests

## Dependencies

- ADR 001 (Core Server Setup)
- ADR 004 (Environment Management)
</file>

<file path="docs/features/006-database-management.md">
# ADR 006: Database Management

## Context

Implementation of database management features through MCP resources, allowing users to manage various types of databases (PostgreSQL, MySQL, MariaDB, MongoDB, Redis, etc.).

## API Endpoints Used

- GET `/databases` (List)

  - Lists all databases
  - Response: Array of Database objects
  - Auth: Bearer token required

- GET `/databases/{uuid}` (Get)

  - Get database details
  - Response: Database object
  - Auth: Bearer token required

- DELETE `/databases/{uuid}` (Delete)

  - Delete database
  - Optional query params:
    - delete_configurations (boolean, default: true)
    - delete_volumes (boolean, default: true)
    - docker_cleanup (boolean, default: true)
    - delete_connected_networks (boolean, default: true)
  - Auth: Bearer token required

- PATCH `/databases/{uuid}` (Update)
  - Update database configuration
  - Supports various database types:
    - PostgreSQL
    - MariaDB
    - MySQL
    - MongoDB
    - Redis
    - KeyDB
    - Clickhouse
    - Dragonfly

## Implementation Checklist

- [x] Basic Database Management

  - [x] List databases resource
  - [x] Get database details
  - [x] Delete database
  - [x] Update database configuration

- [x] Database Type Support

  - [x] PostgreSQL configuration
  - [x] MariaDB configuration
  - [x] MySQL configuration
  - [x] MongoDB configuration
  - [x] Redis configuration
  - [x] KeyDB configuration
  - [x] Clickhouse configuration
  - [x] Dragonfly configuration

- [x] Resource Testing
  - [x] Unit tests for database operations
  - [x] Integration tests with mock data
  - [x] Live test with real Coolify instance

## Dependencies

- ADR 001 (Core Server Setup)
- ADR 002 (Server Information Resources)
</file>

<file path="docs/features/007-service-management.md">
# ADR 007: Service Management

## Context

Implementation of one-click service management features through MCP resources, allowing users to deploy and manage various pre-configured services.

## API Endpoints Used

- GET `/services` (List)

  - Lists all services
  - Response: Array of Service objects
  - Auth: Bearer token required

- POST `/services` (Create)

  - Create a one-click service
  - Required fields:
    - server_uuid
    - project_uuid
    - environment_name/uuid
    - type (one of many supported service types)
  - Optional fields:
    - name
    - description
    - destination_uuid
    - instant_deploy
  - Auth: Bearer token required

- GET `/services/{uuid}` (Get)

  - Get service details
  - Response: Service object
  - Auth: Bearer token required

- DELETE `/services/{uuid}` (Delete)
  - Delete service
  - Optional query params:
    - delete_configurations (boolean, default: true)
    - delete_volumes (boolean, default: true)
    - docker_cleanup (boolean, default: true)
    - delete_connected_networks (boolean, default: true)
  - Auth: Bearer token required

## Supported Service Types

- Development Tools:

  - code-server
  - gitea (with various DB options)
  - docker-registry

- CMS & Documentation:

  - wordpress (with various DB options)
  - ghost
  - mediawiki
  - dokuwiki

- Monitoring & Analytics:

  - grafana
  - umami
  - glances
  - uptime-kuma

- Collaboration & Communication:

  - rocketchat
  - chatwoot
  - nextcloud

- Database Management:

  - phpmyadmin
  - nocodb
  - directus

- And many more specialized services

## Implementation Checklist

- [x] Basic Service Management

  - [x] List services resource
  - [x] Get service details
  - [x] Create service
  - [x] Delete service

- [x] Service Type Support

  - [x] Development tools deployment
  - [x] CMS system deployment
  - [x] Monitoring tools deployment
  - [x] Collaboration tools deployment
  - [x] Database tools deployment

- [x] Resource Testing
  - [x] Unit tests for service operations
  - [x] Integration tests with mock data
  - [x] Live test with real Coolify instance

## Dependencies

- ADR 001 (Core Server Setup)
- ADR 002 (Server Information Resources)
- ADR 003 (Project Management)
</file>

<file path="docs/features/008-mcp-resources-implementation.md">
# ADR 008: MCP Resources Implementation

## Context

Implement MCP resources for managing Coolify entities through the available API endpoints.

## API Endpoints Used

- Database Management:

  - GET `/databases` - List databases
  - GET `/databases/{uuid}` - Get database details
  - POST `/databases/{type}` - Create database
  - PATCH `/databases/{uuid}` - Update database
  - DELETE `/databases/{uuid}` - Delete database

- Deployment Management:

  - GET `/deployments` - List deployments
  - GET `/deployments/{uuid}` - Get deployment details
  - GET `/deploy` - Deploy by tag or uuid

- Application Management:

  - GET `/applications` - List applications
  - GET `/applications/{uuid}` - Get application details
  - POST `/applications/public` - Create public application
  - DELETE `/applications/{uuid}` - Delete application

- Service Management:
  - GET `/services` - List services
  - GET `/services/{uuid}` - Get service details
  - POST `/services` - Create service
  - DELETE `/services/{uuid}` - Delete service

## Implementation Checklist

- [ ] Database Resources

  - [ ] resources://coolify/databases/list
  - [ ] resources://coolify/databases/{id}
  - [ ] resources://coolify/databases/create/{type}
  - [ ] resources://coolify/databases/{id}/update
  - [ ] resources://coolify/databases/{id}/delete

- [ ] Deployment Resources

  - [ ] resources://coolify/deployments/list
  - [ ] resources://coolify/deployments/{id}
  - [ ] resources://coolify/deploy
    - Support for tag-based deployment
    - Support for UUID-based deployment
    - Force rebuild option

- [ ] Application Resources

  - [ ] resources://coolify/applications/list
  - [ ] resources://coolify/applications/{id}
  - [ ] resources://coolify/applications/create
  - [ ] resources://coolify/applications/{id}/delete

- [ ] Service Resources

  - [ ] resources://coolify/services/list
  - [ ] resources://coolify/services/{id}
  - [ ] resources://coolify/services/create
  - [ ] resources://coolify/services/{id}/delete

- [ ] Testing
  - [ ] Database operation tests
  - [ ] Deployment operation tests
  - [ ] Application operation tests
  - [ ] Service operation tests
  - [ ] Error handling tests
  - [ ] Permission validation tests

## Dependencies

- ADR 001 (Core Server Setup)
- ADR 005 (Application Deployment)
- ADR 006 (Database Management)
- ADR 007 (Service Management)
</file>

<file path="docs/features/009-mcp-prompts-implementation.md">
# ADR 009: MCP Prompts Implementation

## Context

Create reusable prompt templates for common Coolify workflows to make interactions more efficient.

## Implementation Checklist

- [ ] Deployment Prompts

  - [ ] "deploy-application" prompt
    ```typescript
    {
      applicationId: string,
      version?: string,
      environment?: string
    }
    ```
  - [ ] "rollback-deployment" prompt
    ```typescript
    {
      applicationId: string,
      deploymentId: string
    }
    ```

- [ ] Configuration Prompts

  - [ ] "configure-database" prompt
    ```typescript
    {
      databaseId: string,
      settings: DatabaseSettings
    }
    ```
  - [ ] "configure-environment" prompt
    ```typescript
    {
      environmentId: string,
      variables: Record<string, string>
    }
    ```

- [ ] Service Management Prompts

  - [ ] "setup-service" prompt
    ```typescript
    {
      environmentId: string,
      serviceType: string,
      configuration: ServiceConfig
    }
    ```
  - [ ] "troubleshoot-service" prompt
    ```typescript
    {
      serviceId: string,
      issueType?: "connectivity" | "performance" | "logs"
    }
    ```

- [ ] Resource Management Prompts

  - [ ] "optimize-resources" prompt
    ```typescript
    {
      resourceId: string,
      resourceType: "application" | "service" | "database"
    }
    ```
  - [ ] "backup-management" prompt
    ```typescript
    {
      resourceId: string,
      operation: "create" | "restore" | "list"
    }
    ```

- [ ] Testing
  - [ ] Prompt validation tests
  - [ ] Response formatting tests
  - [ ] Error handling tests
  - [ ] Integration tests with actual commands

## Dependencies

- ADR 001 (Core Server Setup)
- ADR 005 (Application Deployment)
- ADR 006 (Database Management)
- ADR 007 (Service Management)
- ADR 008 (MCP Resources Implementation)
</file>

<file path="docs/features/010-private-key-management.md">
# ADR 010: Private Key Management

## Context

Implementation of private key management features through MCP resources, allowing users to manage SSH keys for server access and deployment.

## API Endpoints Used

- GET `/security/keys` (List)

  - Lists all private keys
  - Response: Array of PrivateKey objects
  - Auth: Bearer token required

- POST `/security/keys` (Create)

  - Create a new private key
  - Required fields:
    - private_key
  - Optional fields:
    - name
    - description
  - Response: { uuid: string }
  - Auth: Bearer token required

- GET `/security/keys/{uuid}` (Get)

  - Get private key details
  - Response: PrivateKey object
  - Auth: Bearer token required

- PATCH `/security/keys` (Update)

  - Update a private key
  - Required fields:
    - private_key
  - Optional fields:
    - name
    - description
  - Response: { uuid: string }
  - Auth: Bearer token required

- DELETE `/security/keys/{uuid}` (Delete)
  - Delete a private key
  - Response: { message: string }
  - Auth: Bearer token required

## Implementation Checklist

- [ ] Basic Key Management

  - [ ] List private keys resource
  - [ ] Get private key details
  - [ ] Create private key
  - [ ] Update private key
  - [ ] Delete private key

- [ ] Security Features

  - [ ] Secure key storage
  - [ ] Key validation
  - [ ] Usage tracking
  - [ ] Access control

- [ ] Resource Testing
  - [ ] Unit tests for key operations
  - [ ] Integration tests with mock data
  - [ ] Live test with real Coolify instance
  - [ ] Security testing

## Dependencies

- ADR 001 (Core Server Setup)
- ADR 002 (Server Information Resources)
</file>

<file path="docs/features/011-team-management.md">
# ADR 011: Team Management

## Context

Implementation of team management features through MCP resources, allowing users to manage teams and team members in Coolify.

## API Endpoints Used

- GET `/teams` (List)

  - Lists all teams
  - Response: Array of Team objects
  - Auth: Bearer token required

- GET `/teams/{id}` (Get)

  - Get team details by ID
  - Response: Team object
  - Auth: Bearer token required

- GET `/teams/{id}/members` (List Members)

  - Get team members by team ID
  - Response: Array of User objects
  - Auth: Bearer token required

- GET `/teams/current` (Get Current)

  - Get currently authenticated team
  - Response: Team object
  - Auth: Bearer token required

- GET `/teams/current/members` (Get Current Members)
  - Get currently authenticated team members
  - Response: Array of User objects
  - Auth: Bearer token required

## Implementation Checklist

- [ ] Basic Team Management

  - [ ] List teams resource
  - [ ] Get team details
  - [ ] List team members
  - [ ] Get current team
  - [ ] Get current team members

- [ ] Team Features

  - [ ] Team information display
  - [ ] Member list management
  - [ ] Team permissions handling
  - [ ] Current team context

- [ ] Resource Testing
  - [ ] Unit tests for team operations
  - [ ] Integration tests with mock data
  - [ ] Live test with real Coolify instance
  - [ ] Permission testing

## Dependencies

- ADR 001 (Core Server Setup)
- ADR 002 (Server Information Resources)
</file>

<file path="docs/features/013-npx-config-fix.md">
# npx config fix

I want to be able to have the following config:

```json
{
  "mcpServers": {
    "coolify": {
      "command": "npx",
      "args": ["-y", "@masonator/coolify-mcp"],
      "env": {
        "COOLIFY_ACCESS_TOKEN": "token",
        "COOLIFY_BASE_URL": "https://url"
      }
    },
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "pat"
      }
    }
  }
}
```

The github config is correct, but the coolify config currently does not work.

I get the following error:

```
2025-03-07T09:43:34.691Z [coolify] [info] Initializing server...
2025-03-07T09:43:34.783Z [coolify] [info] Server started and connected successfully
2025-03-07T09:43:35.882Z [coolify] [info] Message from client: {"method":"initialize","params":{"protocolVersion":"2024-11-05","capabilities":{},"clientInfo":{"name":"claude-ai","version":"0.1.0"}},"jsonrpc":"2.0","id":0}
node:internal/modules/cjs/loader:603
      throw e;
      ^

Error: Cannot find module '/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/mcp'
    at createEsmNotFoundErr (node:internal/modules/cjs/loader:1186:15)
    at finalizeEsmResolution (node:internal/modules/cjs/loader:1174:15)
    at resolveExports (node:internal/modules/cjs/loader:596:14)
    at Module._findPath (node:internal/modules/cjs/loader:673:31)
    at Module._resolveFilename (node:internal/modules/cjs/loader:1135:27)
    at Module._load (node:internal/modules/cjs/loader:990:27)
    at Module.require (node:internal/modules/cjs/loader:1237:19)
    at require (node:internal/modules/helpers:176:18)
    at Object.<anonymous> (/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@masonator/coolify-mcp/dist/lib/mcp-server.js:4:15)
    at Module._compile (node:internal/modules/cjs/loader:1378:14) {
  code: 'MODULE_NOT_FOUND',
  path: '/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@modelcontextprotocol/sdk/package.json'
}
node:internal/modules/cjs/loader:603
      throw e;
      ^

Error: Cannot find module '/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/mcp'
    at createEsmNotFoundErr (node:internal/modules/cjs/loader:1186:15)
    at finalizeEsmResolution (node:internal/modules/cjs/loader:1174:15)
    at resolveExports (node:internal/modules/cjs/loader:596:14)
    at Module._findPath (node:internal/modules/cjs/loader:673:31)
    at Module._resolveFilename (node:internal/modules/cjs/loader:1135:27)
    at Module._load (node:internal/modules/cjs/loader:990:27)
    at Module.require (node:internal/modules/cjs/loader:1237:19)
    at require (node:internal/modules/helpers:176:18)
    at Object.<anonymous> (/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@masonator/coolify-mcp/dist/lib/mcp-server.js:4:15)
    at Module._compile (node:internal/modules/cjs/loader:1378:14) {
  code: 'MODULE_NOT_FOUND',
  path: '/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@modelcontextprotocol/sdk/package.json'
}

Node.js v21.6.0

Node.js v21.6.0
2025-03-07T09:43:36.909Z [coolify] [info] Server transport closed
2025-03-07T09:43:36.910Z [coolify] [info] Client transport closed
2025-03-07T09:43:36.910Z [coolify] [info] Server transport closed unexpectedly, this is likely due to the process exiting early. If you are developing this MCP server you can add output to stderr (i.e. `console.error('...')` in JavaScript, `print('...', file=sys.stderr)` in python) and it will appear in this log.
2025-03-07T09:43:36.910Z [coolify] [error] Server disconnected. For troubleshooting guidance, please visit our [debugging documentation](https://modelcontextprotocol.io/docs/tools/debugging) {"context":"connection"}
2025-03-07T09:43:36.911Z [coolify] [info] Client transport closed
2025-03-07T09:43:36.912Z [coolify] [info] Server transport closed
2025-03-07T09:43:36.912Z [coolify] [info] Client transport closed
2025-03-07T09:43:36.912Z [coolify] [info] Server transport closed unexpectedly, this is likely due to the process exiting early. If you are developing this MCP server you can add output to stderr (i.e. `console.error('...')` in JavaScript, `print('...', file=sys.stderr)` in python) and it will appear in this log.
2025-03-07T09:43:36.912Z [coolify] [error] Server disconnected. For troubleshooting guidance, please visit our [debugging documentation](https://modelcontextprotocol.io/docs/tools/debugging) {"context":"connection"}
2025-03-07T09:43:36.913Z [coolify] [info] Client transport closed
2025-03-07T09:51:22.595Z [coolify] [info] Initializing server...
2025-03-07T09:51:22.618Z [coolify] [info] Server started and connected successfully
2025-03-07T09:51:22.621Z [coolify] [info] Message from client: {"method":"initialize","params":{"protocolVersion":"2024-11-05","capabilities":{},"clientInfo":{"name":"claude-ai","version":"0.1.0"}},"jsonrpc":"2.0","id":0}
2025-03-07T09:51:23.837Z [coolify] [info] Initializing server...
2025-03-07T09:51:23.853Z [coolify] [info] Server started and connected successfully
2025-03-07T09:51:23.948Z [coolify] [info] Message from client: {"method":"initialize","params":{"protocolVersion":"2024-11-05","capabilities":{},"clientInfo":{"name":"claude-ai","version":"0.1.0"}},"jsonrpc":"2.0","id":0}
node:internal/modules/cjs/loader:603
      throw e;
      ^

Error: Cannot find module '/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/mcp'
    at createEsmNotFoundErr (node:internal/modules/cjs/loader:1186:15)
    at finalizeEsmResolution (node:internal/modules/cjs/loader:1174:15)
    at resolveExports (node:internal/modules/cjs/loader:596:14)
    at Module._findPath (node:internal/modules/cjs/loader:673:31)
    at Module._resolveFilename (node:internal/modules/cjs/loader:1135:27)
    at Module._load (node:internal/modules/cjs/loader:990:27)
    at Module.require (node:internal/modules/cjs/loader:1237:19)
    at require (node:internal/modules/helpers:176:18)
    at Object.<anonymous> (/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@masonator/coolify-mcp/dist/lib/mcp-server.js:4:15)
    at Module._compile (node:internal/modules/cjs/loader:1378:14) {
  code: 'MODULE_NOT_FOUND',
  path: '/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@modelcontextprotocol/sdk/package.json'
}

Node.js v21.6.0
2025-03-07T09:51:25.767Z [coolify] [info] Server transport closed
2025-03-07T09:51:25.768Z [coolify] [info] Client transport closed
2025-03-07T09:51:25.768Z [coolify] [info] Server transport closed unexpectedly, this is likely due to the process exiting early. If you are developing this MCP server you can add output to stderr (i.e. `console.error('...')` in JavaScript, `print('...', file=sys.stderr)` in python) and it will appear in this log.
2025-03-07T09:51:25.768Z [coolify] [error] Server disconnected. For troubleshooting guidance, please visit our [debugging documentation](https://modelcontextprotocol.io/docs/tools/debugging) {"context":"connection"}
2025-03-07T09:51:25.769Z [coolify] [info] Client transport closed
node:internal/modules/cjs/loader:603
      throw e;
      ^

Error: Cannot find module '/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/mcp'
    at createEsmNotFoundErr (node:internal/modules/cjs/loader:1186:15)
    at finalizeEsmResolution (node:internal/modules/cjs/loader:1174:15)
    at resolveExports (node:internal/modules/cjs/loader:596:14)
    at Module._findPath (node:internal/modules/cjs/loader:673:31)
    at Module._resolveFilename (node:internal/modules/cjs/loader:1135:27)
    at Module._load (node:internal/modules/cjs/loader:990:27)
    at Module.require (node:internal/modules/cjs/loader:1237:19)
    at require (node:internal/modules/helpers:176:18)
    at Object.<anonymous> (/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@masonator/coolify-mcp/dist/lib/mcp-server.js:4:15)
    at Module._compile (node:internal/modules/cjs/loader:1378:14) {
  code: 'MODULE_NOT_FOUND',
  path: '/Users/stumason/.npm/_npx/4e3adc8df0812880/node_modules/@modelcontextprotocol/sdk/package.json'
}

Node.js v21.6.0
2025-03-07T09:51:25.851Z [coolify] [info] Server transport closed
2025-03-07T09:51:25.851Z [coolify] [info] Client transport closed
2025-03-07T09:51:25.852Z [coolify] [info] Server transport closed unexpectedly, this is likely due to the process exiting early. If you are developing this MCP server you can add output to stderr (i.e. `console.error('...')` in JavaScript, `print('...', file=sys.stderr)` in python) and it will appear in this log.
2025-03-07T09:51:25.852Z [coolify] [error] Server disconnected. For troubleshooting guidance, please visit our [debugging documentation](https://modelcontextprotocol.io/docs/tools/debugging) {"context":"connection"}
2025-03-07T09:51:25.852Z [coolify] [info] Client transport closed
```

For reference, the github package.json looks like this:

```json
{
  "name": "@modelcontextprotocol/server-github",
  "version": "0.6.2",
  "description": "MCP server for using the GitHub API",
  "license": "MIT",
  "author": "Anthropic, PBC (https://anthropic.com)",
  "homepage": "https://modelcontextprotocol.io",
  "bugs": "https://github.com/modelcontextprotocol/servers/issues",
  "type": "module",
  "bin": {
    "mcp-server-github": "dist/index.js"
  },
  "files": ["dist"],
  "scripts": {
    "build": "tsc && shx chmod +x dist/*.js",
    "prepare": "npm run build",
    "watch": "tsc --watch"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "1.0.1",
    "@types/node": "^22",
    "@types/node-fetch": "^2.6.12",
    "node-fetch": "^3.3.2",
    "universal-user-agent": "^7.0.2",
    "zod": "^3.22.4",
    "zod-to-json-schema": "^3.23.5"
  },
  "devDependencies": {
    "shx": "^0.3.4",
    "typescript": "^5.6.2"
  }
}
```
</file>

<file path="docs/features/future-adrs.md">
# Future ADR Considerations

Based on available Coolify API endpoints, here are potential future features to implement:

## Deployment Management

- Webhook integration for GitHub, GitLab, Bitbucket, Gitea

  - POST `/webhooks/github/{uuid}` (Line ~4000)
  - POST `/webhooks/gitlab/{uuid}` (Line ~4050)
  - POST `/webhooks/bitbucket/{uuid}` (Line ~4100)
  - POST `/webhooks/gitea/{uuid}` (Line ~4150)

- Build pack support

  - POST `/applications/{uuid}/buildpack` (Line ~4200)
  - GET `/buildpacks/templates` (Line ~4250)

- Custom deployment commands
  - POST `/applications/{uuid}/commands/pre-deploy` (Line ~4300)
  - POST `/applications/{uuid}/commands/post-deploy` (Line ~4350)

## Resource Management

- Resource limits management

  - PUT `/applications/{uuid}/limits` (Line ~4400)
  - PUT `/services/{uuid}/limits` (Line ~4450)
  - GET `/resources/usage` (Line ~4500)

- Health check configuration
  - PUT `/applications/{uuid}/health` (Line ~4550)
  - GET `/applications/{uuid}/health/status` (Line ~4600)

## Network Management

- Domain management

  - POST `/domains` (Line ~4650)
  - GET `/domains/{uuid}/verify` (Line ~4700)
  - PUT `/domains/{uuid}/ssl` (Line ~4750)

- SSL/TLS configuration
  - POST `/certificates` (Line ~4800)
  - GET `/certificates/{uuid}/status` (Line ~4850)

## Build Management

- Build server configuration
  - POST `/build-servers` (Line ~4900)
  - GET `/build-servers/{uuid}/status` (Line ~4950)
  - PUT `/build-servers/{uuid}/cache` (Line ~5000)

## Team Management

- Team member management

  - POST `/teams` (Line ~5050)
  - POST `/teams/{uuid}/members` (Line ~5100)
  - PUT `/teams/{uuid}/permissions` (Line ~5150)

- API key management
  - POST `/api-keys` (Line ~5200)
  - GET `/api-keys/{uuid}/usage` (Line ~5250)

## Monitoring and Logging

- Resource usage monitoring

  - GET `/monitoring/resources` (Line ~5300)
  - GET `/monitoring/alerts` (Line ~5350)

- Centralized logging
  - GET `/logs/aggregate` (Line ~5400)
  - POST `/logs/search` (Line ~5450)

Each of these could be developed into full ADRs once the core functionality is stable. The line numbers reference the OpenAPI specification for implementation details.
</file>

<file path="docs/openapi-chunks/applications-api.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
paths:
  /applications:
    get:
      tags:
        - Applications
      summary: List
      description: List all applications.
      operationId: list-applications
      responses:
        '200':
          description: Get all applications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /applications/public:
    post:
      tags:
        - Applications
      summary: Create (Public)
      description: Create new application based on a public git repository.
      operationId: create-public-application
      requestBody:
        description: Application object that needs to be created.
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - git_repository
                - git_branch
                - build_pack
                - ports_exposes
              properties:
                project_uuid:
                  type: string
                  description: The project UUID.
                server_uuid:
                  type: string
                  description: The server UUID.
                environment_name:
                  type: string
                  description: The environment name. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: The environment UUID. You need to provide at least one of environment_name or environment_uuid.
                git_repository:
                  type: string
                  description: The git repository URL.
                git_branch:
                  type: string
                  description: The git branch.
                build_pack:
                  type: string
                  enum:
                    - nixpacks
                    - static
                    - dockerfile
                    - dockercompose
                  description: The build pack type.
                ports_exposes:
                  type: string
                  description: The ports to expose.
                destination_uuid:
                  type: string
                  description: The destination UUID.
                name:
                  type: string
                  description: The application name.
                description:
                  type: string
                  description: The application description.
                domains:
                  type: string
                  description: The application domains.
                git_commit_sha:
                  type: string
                  description: The git commit SHA.
                docker_registry_image_name:
                  type: string
                  description: The docker registry image name.
                docker_registry_image_tag:
                  type: string
                  description: The docker registry image tag.
                is_static:
                  type: boolean
                  description: The flag to indicate if the application is static.
                static_image:
                  type: string
                  enum:
                    - nginx:alpine
                  description: The static image.
                install_command:
                  type: string
                  description: The install command.
                build_command:
                  type: string
                  description: The build command.
                start_command:
                  type: string
                  description: The start command.
                ports_mappings:
                  type: string
                  description: The ports mappings.
                base_directory:
                  type: string
                  description: The base directory for all commands.
                publish_directory:
                  type: string
                  description: The publish directory.
                health_check_enabled:
                  type: boolean
                  description: Health check enabled.
                health_check_path:
                  type: string
                  description: Health check path.
                health_check_port:
                  type: string
                  nullable: true
                  description: Health check port.
                health_check_host:
                  type: string
                  nullable: true
                  description: Health check host.
                health_check_method:
                  type: string
                  description: Health check method.
                health_check_return_code:
                  type: integer
                  description: Health check return code.
                health_check_scheme:
                  type: string
                  description: Health check scheme.
                health_check_response_text:
                  type: string
                  nullable: true
                  description: Health check response text.
                health_check_interval:
                  type: integer
                  description: Health check interval in seconds.
                health_check_timeout:
                  type: integer
                  description: Health check timeout in seconds.
                health_check_retries:
                  type: integer
                  description: Health check retries count.
                health_check_start_period:
                  type: integer
                  description: Health check start period in seconds.
                limits_memory:
                  type: string
                  description: Memory limit.
                limits_memory_swap:
                  type: string
                  description: Memory swap limit.
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness.
                limits_memory_reservation:
                  type: string
                  description: Memory reservation.
                limits_cpus:
                  type: string
                  description: CPU limit.
                limits_cpuset:
                  type: string
                  nullable: true
                  description: CPU set.
                limits_cpu_shares:
                  type: integer
                  description: CPU shares.
                custom_labels:
                  type: string
                  description: Custom labels.
                custom_docker_run_options:
                  type: string
                  description: Custom docker run options.
                post_deployment_command:
                  type: string
                  description: Post deployment command.
                post_deployment_command_container:
                  type: string
                  description: Post deployment command container.
                pre_deployment_command:
                  type: string
                  description: Pre deployment command.
                pre_deployment_command_container:
                  type: string
                  description: Pre deployment command container.
                manual_webhook_secret_github:
                  type: string
                  description: Manual webhook secret for Github.
                manual_webhook_secret_gitlab:
                  type: string
                  description: Manual webhook secret for Gitlab.
                manual_webhook_secret_bitbucket:
                  type: string
                  description: Manual webhook secret for Bitbucket.
                manual_webhook_secret_gitea:
                  type: string
                  description: Manual webhook secret for Gitea.
                redirect:
                  type: string
                  nullable: true
                  description: How to set redirect with Traefik / Caddy. www<->non-www.
                  enum:
                    - www
                    - non-www
                    - both
                instant_deploy:
                  type: boolean
                  description: The flag to indicate if the application should be deployed instantly.
                dockerfile:
                  type: string
                  description: The Dockerfile content.
                docker_compose_location:
                  type: string
                  description: The Docker Compose location.
                docker_compose_raw:
                  type: string
                  description: The Docker Compose raw content.
                docker_compose_custom_start_command:
                  type: string
                  description: The Docker Compose custom start command.
                docker_compose_custom_build_command:
                  type: string
                  description: The Docker Compose custom build command.
                docker_compose_domains:
                  type: array
                  description: The Docker Compose domains.
                watch_paths:
                  type: string
                  description: The watch paths.
                use_build_server:
                  type: boolean
                  nullable: true
                  description: Use build server.
              type: object
      responses:
        '201':
          description: Application created successfully.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /applications/private-github-app:
    post:
      tags:
        - Applications
      summary: Create (Private - GH App)
      description: Create new application based on a private repository through a Github App.
      operationId: create-private-github-app-application
      requestBody:
        description: Application object that needs to be created.
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - github_app_uuid
                - git_repository
                - git_branch
                - build_pack
                - ports_exposes
              properties:
                project_uuid:
                  type: string
                  description: The project UUID.
                server_uuid:
                  type: string
                  description: The server UUID.
                environment_name:
                  type: string
                  description: The environment name. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: The environment UUID. You need to provide at least one of environment_name or environment_uuid.
                github_app_uuid:
                  type: string
                  description: The Github App UUID.
                git_repository:
                  type: string
                  description: The git repository URL.
                git_branch:
                  type: string
                  description: The git branch.
                ports_exposes:
                  type: string
                  description: The ports to expose.
                destination_uuid:
                  type: string
                  description: The destination UUID.
                build_pack:
                  type: string
                  enum:
                    - nixpacks
                    - static
                    - dockerfile
                    - dockercompose
                  description: The build pack type.
                name:
                  type: string
                  description: The application name.
                description:
                  type: string
                  description: The application description.
                domains:
                  type: string
                  description: The application domains.
                git_commit_sha:
                  type: string
                  description: The git commit SHA.
                docker_registry_image_name:
                  type: string
                  description: The docker registry image name.
                docker_registry_image_tag:
                  type: string
                  description: The docker registry image tag.
                is_static:
                  type: boolean
                  description: The flag to indicate if the application is static.
                static_image:
                  type: string
                  enum:
                    - nginx:alpine
                  description: The static image.
                install_command:
                  type: string
                  description: The install command.
                build_command:
                  type: string
                  description: The build command.
                start_command:
                  type: string
                  description: The start command.
                ports_mappings:
                  type: string
                  description: The ports mappings.
                base_directory:
                  type: string
                  description: The base directory for all commands.
                publish_directory:
                  type: string
                  description: The publish directory.
                health_check_enabled:
                  type: boolean
                  description: Health check enabled.
                health_check_path:
                  type: string
                  description: Health check path.
                health_check_port:
                  type: string
                  nullable: true
                  description: Health check port.
                health_check_host:
                  type: string
                  nullable: true
                  description: Health check host.
                health_check_method:
                  type: string
                  description: Health check method.
                health_check_return_code:
                  type: integer
                  description: Health check return code.
                health_check_scheme:
                  type: string
                  description: Health check scheme.
                health_check_response_text:
                  type: string
                  nullable: true
                  description: Health check response text.
                health_check_interval:
                  type: integer
                  description: Health check interval in seconds.
                health_check_timeout:
                  type: integer
                  description: Health check timeout in seconds.
                health_check_retries:
                  type: integer
                  description: Health check retries count.
                health_check_start_period:
                  type: integer
                  description: Health check start period in seconds.
                limits_memory:
                  type: string
                  description: Memory limit.
                limits_memory_swap:
                  type: string
                  description: Memory swap limit.
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness.
                limits_memory_reservation:
                  type: string
                  description: Memory reservation.
                limits_cpus:
                  type: string
                  description: CPU limit.
                limits_cpuset:
                  type: string
                  nullable: true
                  description: CPU set.
                limits_cpu_shares:
                  type: integer
                  description: CPU shares.
                custom_labels:
                  type: string
                  description: Custom labels.
                custom_docker_run_options:
                  type: string
                  description: Custom docker run options.
                post_deployment_command:
                  type: string
                  description: Post deployment command.
                post_deployment_command_container:
                  type: string
                  description: Post deployment command container.
                pre_deployment_command:
                  type: string
                  description: Pre deployment command.
                pre_deployment_command_container:
                  type: string
                  description: Pre deployment command container.
                manual_webhook_secret_github:
                  type: string
                  description: Manual webhook secret for Github.
                manual_webhook_secret_gitlab:
                  type: string
                  description: Manual webhook secret for Gitlab.
                manual_webhook_secret_bitbucket:
                  type: string
                  description: Manual webhook secret for Bitbucket.
                manual_webhook_secret_gitea:
                  type: string
                  description: Manual webhook secret for Gitea.
                redirect:
                  type: string
                  nullable: true
                  description: How to set redirect with Traefik / Caddy. www<->non-www.
                  enum:
                    - www
                    - non-www
                    - both
                instant_deploy:
                  type: boolean
                  description: The flag to indicate if the application should be deployed instantly.
                dockerfile:
                  type: string
                  description: The Dockerfile content.
                docker_compose_location:
                  type: string
                  description: The Docker Compose location.
                docker_compose_raw:
                  type: string
                  description: The Docker Compose raw content.
                docker_compose_custom_start_command:
                  type: string
                  description: The Docker Compose custom start command.
                docker_compose_custom_build_command:
                  type: string
                  description: The Docker Compose custom build command.
                docker_compose_domains:
                  type: array
                  description: The Docker Compose domains.
                watch_paths:
                  type: string
                  description: The watch paths.
                use_build_server:
                  type: boolean
                  nullable: true
                  description: Use build server.
              type: object
      responses:
        '201':
          description: Application created successfully.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /applications/private-deploy-key:
    post:
      tags:
        - Applications
      summary: Create (Private - Deploy Key)
      description: Create new application based on a private repository through a Deploy Key.
      operationId: create-private-deploy-key-application
      requestBody:
        description: Application object that needs to be created.
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - private_key_uuid
                - git_repository
                - git_branch
                - build_pack
                - ports_exposes
              properties:
                project_uuid:
                  type: string
                  description: The project UUID.
                server_uuid:
                  type: string
                  description: The server UUID.
                environment_name:
                  type: string
                  description: The environment name. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: The environment UUID. You need to provide at least one of environment_name or environment_uuid.
                private_key_uuid:
                  type: string
                  description: The private key UUID.
                git_repository:
                  type: string
                  description: The git repository URL.
                git_branch:
                  type: string
                  description: The git branch.
                ports_exposes:
                  type: string
                  description: The ports to expose.
                destination_uuid:
                  type: string
                  description: The destination UUID.
                build_pack:
                  type: string
                  enum:
                    - nixpacks
                    - static
                    - dockerfile
                    - dockercompose
                  description: The build pack type.
                name:
                  type: string
                  description: The application name.
                description:
                  type: string
                  description: The application description.
                domains:
                  type: string
                  description: The application domains.
                git_commit_sha:
                  type: string
                  description: The git commit SHA.
                docker_registry_image_name:
                  type: string
                  description: The docker registry image name.
                docker_registry_image_tag:
                  type: string
                  description: The docker registry image tag.
                is_static:
                  type: boolean
                  description: The flag to indicate if the application is static.
                static_image:
                  type: string
                  enum:
                    - nginx:alpine
                  description: The static image.
                install_command:
                  type: string
                  description: The install command.
                build_command:
                  type: string
                  description: The build command.
                start_command:
                  type: string
                  description: The start command.
                ports_mappings:
                  type: string
                  description: The ports mappings.
                base_directory:
                  type: string
                  description: The base directory for all commands.
                publish_directory:
                  type: string
                  description: The publish directory.
                health_check_enabled:
                  type: boolean
                  description: Health check enabled.
                health_check_path:
                  type: string
                  description: Health check path.
                health_check_port:
                  type: string
                  nullable: true
                  description: Health check port.
                health_check_host:
                  type: string
                  nullable: true
                  description: Health check host.
                health_check_method:
                  type: string
                  description: Health check method.
                health_check_return_code:
                  type: integer
                  description: Health check return code.
                health_check_scheme:
                  type: string
                  description: Health check scheme.
                health_check_response_text:
                  type: string
                  nullable: true
                  description: Health check response text.
                health_check_interval:
                  type: integer
                  description: Health check interval in seconds.
                health_check_timeout:
                  type: integer
                  description: Health check timeout in seconds.
                health_check_retries:
                  type: integer
                  description: Health check retries count.
                health_check_start_period:
                  type: integer
                  description: Health check start period in seconds.
                limits_memory:
                  type: string
                  description: Memory limit.
                limits_memory_swap:
                  type: string
                  description: Memory swap limit.
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness.
                limits_memory_reservation:
                  type: string
                  description: Memory reservation.
                limits_cpus:
                  type: string
                  description: CPU limit.
                limits_cpuset:
                  type: string
                  nullable: true
                  description: CPU set.
                limits_cpu_shares:
                  type: integer
                  description: CPU shares.
                custom_labels:
                  type: string
                  description: Custom labels.
                custom_docker_run_options:
                  type: string
                  description: Custom docker run options.
                post_deployment_command:
                  type: string
                  description: Post deployment command.
                post_deployment_command_container:
                  type: string
                  description: Post deployment command container.
                pre_deployment_command:
                  type: string
                  description: Pre deployment command.
                pre_deployment_command_container:
                  type: string
                  description: Pre deployment command container.
                manual_webhook_secret_github:
                  type: string
                  description: Manual webhook secret for Github.
                manual_webhook_secret_gitlab:
                  type: string
                  description: Manual webhook secret for Gitlab.
                manual_webhook_secret_bitbucket:
                  type: string
                  description: Manual webhook secret for Bitbucket.
                manual_webhook_secret_gitea:
                  type: string
                  description: Manual webhook secret for Gitea.
                redirect:
                  type: string
                  nullable: true
                  description: How to set redirect with Traefik / Caddy. www<->non-www.
                  enum:
                    - www
                    - non-www
                    - both
                instant_deploy:
                  type: boolean
                  description: The flag to indicate if the application should be deployed instantly.
                dockerfile:
                  type: string
                  description: The Dockerfile content.
                docker_compose_location:
                  type: string
                  description: The Docker Compose location.
                docker_compose_raw:
                  type: string
                  description: The Docker Compose raw content.
                docker_compose_custom_start_command:
                  type: string
                  description: The Docker Compose custom start command.
                docker_compose_custom_build_command:
                  type: string
                  description: The Docker Compose custom build command.
                docker_compose_domains:
                  type: array
                  description: The Docker Compose domains.
                watch_paths:
                  type: string
                  description: The watch paths.
                use_build_server:
                  type: boolean
                  nullable: true
                  description: Use build server.
              type: object
      responses:
        '201':
          description: Application created successfully.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /applications/dockerfile:
    post:
      tags:
        - Applications
      summary: Create (Dockerfile)
      description: Create new application based on a simple Dockerfile.
      operationId: create-dockerfile-application
      requestBody:
        description: Application object that needs to be created.
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - dockerfile
              properties:
                project_uuid:
                  type: string
                  description: The project UUID.
                server_uuid:
                  type: string
                  description: The server UUID.
                environment_name:
                  type: string
                  description: The environment name. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: The environment UUID. You need to provide at least one of environment_name or environment_uuid.
                dockerfile:
                  type: string
                  description: The Dockerfile content.
                build_pack:
                  type: string
                  enum:
                    - nixpacks
                    - static
                    - dockerfile
                    - dockercompose
                  description: The build pack type.
                ports_exposes:
                  type: string
                  description: The ports to expose.
                destination_uuid:
                  type: string
                  description: The destination UUID.
                name:
                  type: string
                  description: The application name.
                description:
                  type: string
                  description: The application description.
                domains:
                  type: string
                  description: The application domains.
                docker_registry_image_name:
                  type: string
                  description: The docker registry image name.
                docker_registry_image_tag:
                  type: string
                  description: The docker registry image tag.
                ports_mappings:
                  type: string
                  description: The ports mappings.
                base_directory:
                  type: string
                  description: The base directory for all commands.
                health_check_enabled:
                  type: boolean
                  description: Health check enabled.
                health_check_path:
                  type: string
                  description: Health check path.
                health_check_port:
                  type: string
                  nullable: true
                  description: Health check port.
                health_check_host:
                  type: string
                  nullable: true
                  description: Health check host.
                health_check_method:
                  type: string
                  description: Health check method.
                health_check_return_code:
                  type: integer
                  description: Health check return code.
                health_check_scheme:
                  type: string
                  description: Health check scheme.
                health_check_response_text:
                  type: string
                  nullable: true
                  description: Health check response text.
                health_check_interval:
                  type: integer
                  description: Health check interval in seconds.
                health_check_timeout:
                  type: integer
                  description: Health check timeout in seconds.
                health_check_retries:
                  type: integer
                  description: Health check retries count.
                health_check_start_period:
                  type: integer
                  description: Health check start period in seconds.
                limits_memory:
                  type: string
                  description: Memory limit.
                limits_memory_swap:
                  type: string
                  description: Memory swap limit.
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness.
                limits_memory_reservation:
                  type: string
                  description: Memory reservation.
                limits_cpus:
                  type: string
                  description: CPU limit.
                limits_cpuset:
                  type: string
                  nullable: true
                  description: CPU set.
                limits_cpu_shares:
                  type: integer
                  description: CPU shares.
                custom_labels:
                  type: string
                  description: Custom labels.
                custom_docker_run_options:
                  type: string
                  description: Custom docker run options.
                post_deployment_command:
                  type: string
                  description: Post deployment command.
                post_deployment_command_container:
                  type: string
                  description: Post deployment command container.
                pre_deployment_command:
                  type: string
                  description: Pre deployment command.
                pre_deployment_command_container:
                  type: string
                  description: Pre deployment command container.
                manual_webhook_secret_github:
                  type: string
                  description: Manual webhook secret for Github.
                manual_webhook_secret_gitlab:
                  type: string
                  description: Manual webhook secret for Gitlab.
                manual_webhook_secret_bitbucket:
                  type: string
                  description: Manual webhook secret for Bitbucket.
                manual_webhook_secret_gitea:
                  type: string
                  description: Manual webhook secret for Gitea.
                redirect:
                  type: string
                  nullable: true
                  description: How to set redirect with Traefik / Caddy. www<->non-www.
                  enum:
                    - www
                    - non-www
                    - both
                instant_deploy:
                  type: boolean
                  description: The flag to indicate if the application should be deployed instantly.
                use_build_server:
                  type: boolean
                  nullable: true
                  description: Use build server.
              type: object
      responses:
        '201':
          description: Application created successfully.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /applications/dockerimage:
    post:
      tags:
        - Applications
      summary: Create (Docker Image)
      description: Create new application based on a prebuilt docker image
      operationId: create-dockerimage-application
      requestBody:
        description: Application object that needs to be created.
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - docker_registry_image_name
                - ports_exposes
              properties:
                project_uuid:
                  type: string
                  description: The project UUID.
                server_uuid:
                  type: string
                  description: The server UUID.
                environment_name:
                  type: string
                  description: The environment name. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: The environment UUID. You need to provide at least one of environment_name or environment_uuid.
                docker_registry_image_name:
                  type: string
                  description: The docker registry image name.
                docker_registry_image_tag:
                  type: string
                  description: The docker registry image tag.
                ports_exposes:
                  type: string
                  description: The ports to expose.
                destination_uuid:
                  type: string
                  description: The destination UUID.
                name:
                  type: string
                  description: The application name.
                description:
                  type: string
                  description: The application description.
                domains:
                  type: string
                  description: The application domains.
                ports_mappings:
                  type: string
                  description: The ports mappings.
                health_check_enabled:
                  type: boolean
                  description: Health check enabled.
                health_check_path:
                  type: string
                  description: Health check path.
                health_check_port:
                  type: string
                  nullable: true
                  description: Health check port.
                health_check_host:
                  type: string
                  nullable: true
                  description: Health check host.
                health_check_method:
                  type: string
                  description: Health check method.
                health_check_return_code:
                  type: integer
                  description: Health check return code.
                health_check_scheme:
                  type: string
                  description: Health check scheme.
                health_check_response_text:
                  type: string
                  nullable: true
                  description: Health check response text.
                health_check_interval:
                  type: integer
                  description: Health check interval in seconds.
                health_check_timeout:
                  type: integer
                  description: Health check timeout in seconds.
                health_check_retries:
                  type: integer
                  description: Health check retries count.
                health_check_start_period:
                  type: integer
                  description: Health check start period in seconds.
                limits_memory:
                  type: string
                  description: Memory limit.
                limits_memory_swap:
                  type: string
                  description: Memory swap limit.
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness.
                limits_memory_reservation:
                  type: string
                  description: Memory reservation.
                limits_cpus:
                  type: string
                  description: CPU limit.
                limits_cpuset:
                  type: string
                  nullable: true
                  description: CPU set.
                limits_cpu_shares:
                  type: integer
                  description: CPU shares.
                custom_labels:
                  type: string
                  description: Custom labels.
                custom_docker_run_options:
                  type: string
                  description: Custom docker run options.
                post_deployment_command:
                  type: string
                  description: Post deployment command.
                post_deployment_command_container:
                  type: string
                  description: Post deployment command container.
                pre_deployment_command:
                  type: string
                  description: Pre deployment command.
                pre_deployment_command_container:
                  type: string
                  description: Pre deployment command container.
                manual_webhook_secret_github:
                  type: string
                  description: Manual webhook secret for Github.
                manual_webhook_secret_gitlab:
                  type: string
                  description: Manual webhook secret for Gitlab.
                manual_webhook_secret_bitbucket:
                  type: string
                  description: Manual webhook secret for Bitbucket.
                manual_webhook_secret_gitea:
                  type: string
                  description: Manual webhook secret for Gitea.
                redirect:
                  type: string
                  nullable: true
                  description: How to set redirect with Traefik / Caddy. www<->non-www.
                  enum:
                    - www
                    - non-www
                    - both
                instant_deploy:
                  type: boolean
                  description: The flag to indicate if the application should be deployed instantly.
                use_build_server:
                  type: boolean
                  nullable: true
                  description: Use build server.
              type: object
      responses:
        '201':
          description: Application created successfully.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /applications/dockercompose:
    post:
      tags:
        - Applications
      summary: Create (Docker Compose)
      description: Create new application based on a docker-compose file.
      operationId: create-dockercompose-application
      requestBody:
        description: Application object that needs to be created.
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - docker_compose_raw
              properties:
                project_uuid:
                  type: string
                  description: The project UUID.
                server_uuid:
                  type: string
                  description: The server UUID.
                environment_name:
                  type: string
                  description: The environment name. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: The environment UUID. You need to provide at least one of environment_name or environment_uuid.
                docker_compose_raw:
                  type: string
                  description: The Docker Compose raw content.
                destination_uuid:
                  type: string
                  description: The destination UUID if the server has more than one destinations.
                name:
                  type: string
                  description: The application name.
                description:
                  type: string
                  description: The application description.
                instant_deploy:
                  type: boolean
                  description: The flag to indicate if the application should be deployed instantly.
                use_build_server:
                  type: boolean
                  nullable: true
                  description: Use build server.
              type: object
      responses:
        '201':
          description: Application created successfully.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /applications/{uuid}:
    get:
      tags:
        - Applications
      summary: Get
      description: Get application by UUID.
      operationId: get-application-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Get application by UUID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Applications
      summary: Delete
      description: Delete application by UUID.
      operationId: delete-application-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
        - name: delete_configurations
          in: query
          description: Delete configurations.
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_volumes
          in: query
          description: Delete volumes.
          required: false
          schema:
            type: boolean
            default: true
        - name: docker_cleanup
          in: query
          description: Run docker cleanup.
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_connected_networks
          in: query
          description: Delete connected networks.
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Application deleted.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Application deleted.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Applications
      summary: Update
      description: Update application by UUID.
      operationId: update-application-by-uuid
      requestBody:
        description: Application updated.
        required: true
        content:
          application/json:
            schema:
              properties:
                project_uuid:
                  type: string
                  description: The project UUID.
                server_uuid:
                  type: string
                  description: The server UUID.
                environment_name:
                  type: string
                  description: The environment name.
                github_app_uuid:
                  type: string
                  description: The Github App UUID.
                git_repository:
                  type: string
                  description: The git repository URL.
                git_branch:
                  type: string
                  description: The git branch.
                ports_exposes:
                  type: string
                  description: The ports to expose.
                destination_uuid:
                  type: string
                  description: The destination UUID.
                build_pack:
                  type: string
                  enum:
                    - nixpacks
                    - static
                    - dockerfile
                    - dockercompose
                  description: The build pack type.
                name:
                  type: string
                  description: The application name.
                description:
                  type: string
                  description: The application description.
                domains:
                  type: string
                  description: The application domains.
                git_commit_sha:
                  type: string
                  description: The git commit SHA.
                docker_registry_image_name:
                  type: string
                  description: The docker registry image name.
                docker_registry_image_tag:
                  type: string
                  description: The docker registry image tag.
                is_static:
                  type: boolean
                  description: The flag to indicate if the application is static.
                install_command:
                  type: string
                  description: The install command.
                build_command:
                  type: string
                  description: The build command.
                start_command:
                  type: string
                  description: The start command.
                ports_mappings:
                  type: string
                  description: The ports mappings.
                base_directory:
                  type: string
                  description: The base directory for all commands.
                publish_directory:
                  type: string
                  description: The publish directory.
                health_check_enabled:
                  type: boolean
                  description: Health check enabled.
                health_check_path:
                  type: string
                  description: Health check path.
                health_check_port:
                  type: string
                  nullable: true
                  description: Health check port.
                health_check_host:
                  type: string
                  nullable: true
                  description: Health check host.
                health_check_method:
                  type: string
                  description: Health check method.
                health_check_return_code:
                  type: integer
                  description: Health check return code.
                health_check_scheme:
                  type: string
                  description: Health check scheme.
                health_check_response_text:
                  type: string
                  nullable: true
                  description: Health check response text.
                health_check_interval:
                  type: integer
                  description: Health check interval in seconds.
                health_check_timeout:
                  type: integer
                  description: Health check timeout in seconds.
                health_check_retries:
                  type: integer
                  description: Health check retries count.
                health_check_start_period:
                  type: integer
                  description: Health check start period in seconds.
                limits_memory:
                  type: string
                  description: Memory limit.
                limits_memory_swap:
                  type: string
                  description: Memory swap limit.
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness.
                limits_memory_reservation:
                  type: string
                  description: Memory reservation.
                limits_cpus:
                  type: string
                  description: CPU limit.
                limits_cpuset:
                  type: string
                  nullable: true
                  description: CPU set.
                limits_cpu_shares:
                  type: integer
                  description: CPU shares.
                custom_labels:
                  type: string
                  description: Custom labels.
                custom_docker_run_options:
                  type: string
                  description: Custom docker run options.
                post_deployment_command:
                  type: string
                  description: Post deployment command.
                post_deployment_command_container:
                  type: string
                  description: Post deployment command container.
                pre_deployment_command:
                  type: string
                  description: Pre deployment command.
                pre_deployment_command_container:
                  type: string
                  description: Pre deployment command container.
                manual_webhook_secret_github:
                  type: string
                  description: Manual webhook secret for Github.
                manual_webhook_secret_gitlab:
                  type: string
                  description: Manual webhook secret for Gitlab.
                manual_webhook_secret_bitbucket:
                  type: string
                  description: Manual webhook secret for Bitbucket.
                manual_webhook_secret_gitea:
                  type: string
                  description: Manual webhook secret for Gitea.
                redirect:
                  type: string
                  nullable: true
                  description: How to set redirect with Traefik / Caddy. www<->non-www.
                  enum:
                    - www
                    - non-www
                    - both
                instant_deploy:
                  type: boolean
                  description: The flag to indicate if the application should be deployed instantly.
                dockerfile:
                  type: string
                  description: The Dockerfile content.
                docker_compose_location:
                  type: string
                  description: The Docker Compose location.
                docker_compose_raw:
                  type: string
                  description: The Docker Compose raw content.
                docker_compose_custom_start_command:
                  type: string
                  description: The Docker Compose custom start command.
                docker_compose_custom_build_command:
                  type: string
                  description: The Docker Compose custom build command.
                docker_compose_domains:
                  type: array
                  description: The Docker Compose domains.
                watch_paths:
                  type: string
                  description: The watch paths.
                use_build_server:
                  type: boolean
                  nullable: true
                  description: Use build server.
              type: object
      responses:
        '200':
          description: Application updated.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /applications/{uuid}/envs:
    get:
      tags:
        - Applications
      summary: List Envs
      description: List all envs by application UUID.
      operationId: list-envs-by-application-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All environment variables by application UUID.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentVariable'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    post:
      tags:
        - Applications
      summary: Create Env
      description: Create env by application UUID.
      operationId: create-env-by-application-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Env created.
        required: true
        content:
          application/json:
            schema:
              properties:
                key:
                  type: string
                  description: The key of the environment variable.
                value:
                  type: string
                  description: The value of the environment variable.
                is_preview:
                  type: boolean
                  description: The flag to indicate if the environment variable is used in preview deployments.
                is_build_time:
                  type: boolean
                  description: The flag to indicate if the environment variable is used in build time.
                is_literal:
                  type: boolean
                  description: The flag to indicate if the environment variable is a literal, nothing espaced.
                is_multiline:
                  type: boolean
                  description: The flag to indicate if the environment variable is multiline.
                is_shown_once:
                  type: boolean
                  description: The flag to indicate if the environment variable's value is shown on the UI.
              type: object
      responses:
        '201':
          description: Environment variable created.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                    example: nc0k04gk8g0cgsk440g0koko
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Applications
      summary: Update Env
      description: Update env by application UUID.
      operationId: update-env-by-application-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Env updated.
        required: true
        content:
          application/json:
            schema:
              required:
                - key
                - value
              properties:
                key:
                  type: string
                  description: The key of the environment variable.
                value:
                  type: string
                  description: The value of the environment variable.
                is_preview:
                  type: boolean
                  description: The flag to indicate if the environment variable is used in preview deployments.
                is_build_time:
                  type: boolean
                  description: The flag to indicate if the environment variable is used in build time.
                is_literal:
                  type: boolean
                  description: The flag to indicate if the environment variable is a literal, nothing espaced.
                is_multiline:
                  type: boolean
                  description: The flag to indicate if the environment variable is multiline.
                is_shown_once:
                  type: boolean
                  description: The flag to indicate if the environment variable's value is shown on the UI.
              type: object
      responses:
        '201':
          description: Environment variable updated.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Environment variable updated.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /applications/{uuid}/envs/bulk:
    patch:
      tags:
        - Applications
      summary: Update Envs (Bulk)
      description: Update multiple envs by application UUID.
      operationId: update-envs-by-application-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Bulk envs updated.
        required: true
        content:
          application/json:
            schema:
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    properties:
                      key:
                        type: string
                        description: The key of the environment variable.
                      value:
                        type: string
                        description: The value of the environment variable.
                      is_preview:
                        type: boolean
                        description: The flag to indicate if the environment variable is used in preview deployments.
                      is_build_time:
                        type: boolean
                        description: The flag to indicate if the environment variable is used in build time.
                      is_literal:
                        type: boolean
                        description: The flag to indicate if the environment variable is a literal, nothing espaced.
                      is_multiline:
                        type: boolean
                        description: The flag to indicate if the environment variable is multiline.
                      is_shown_once:
                        type: boolean
                        description: The flag to indicate if the environment variable's value is shown on the UI.
                    type: object
              type: object
      responses:
        '201':
          description: Environment variables updated.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Environment variables updated.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /applications/{uuid}/envs/{env_uuid}:
    delete:
      tags:
        - Applications
      summary: Delete Env
      description: Delete env by UUID.
      operationId: delete-env-by-application-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
        - name: env_uuid
          in: path
          description: UUID of the environment variable.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Environment variable deleted.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Environment variable deleted.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /applications/{uuid}/start:
    get:
      tags:
        - Applications
      summary: Start
      description: Start application. `Post` request is also accepted.
      operationId: start-application-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
        - name: force
          in: query
          description: Force rebuild.
          schema:
            type: boolean
            default: false
        - name: instant_deploy
          in: query
          description: Instant deploy (skip queuing).
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Start application.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Deployment request queued.
                    description: Message.
                  deployment_uuid:
                    type: string
                    example: doogksw
                    description: UUID of the deployment.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /applications/{uuid}/stop:
    get:
      tags:
        - Applications
      summary: Stop
      description: Stop application. `Post` request is also accepted.
      operationId: stop-application-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Stop application.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Application stopping request queued.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /applications/{uuid}/restart:
    get:
      tags:
        - Applications
      summary: Restart
      description: Restart application. `Post` request is also accepted.
      operationId: restart-application-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Restart application.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Restart request queued.
                  deployment_uuid:
                    type: string
                    example: doogksw
                    description: UUID of the deployment.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /applications/{uuid}/execute:
    post:
      tags:
        - Applications
      summary: Execute Command
      description: Execute a command on the application's current container.
      operationId: execute-command-application
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Command to execute.
        required: true
        content:
          application/json:
            schema:
              properties:
                command:
                  type: string
                  description: Command to execute.
              type: object
      responses:
        '200':
          description: Execute a command on the application's current container.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Command executed.
                  response:
                    type: string
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
</file>

<file path="docs/openapi-chunks/databases-api.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
paths:
  /databases:
    get:
      tags:
        - Databases
      summary: List
      description: List all databases.
      operationId: list-databases
      responses:
        '200':
          description: Get all databases
          content:
            application/json:
              schema:
                type: string
              example: Content is very complex. Will be implemented later.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /databases/{uuid}:
    get:
      tags:
        - Databases
      summary: Get
      description: Get database by UUID.
      operationId: get-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Get all databases
          content:
            application/json:
              schema:
                type: string
              example: Content is very complex. Will be implemented later.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Databases
      summary: Delete
      description: Delete database by UUID.
      operationId: delete-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the database.
          required: true
          schema:
            type: string
            format: uuid
        - name: delete_configurations
          in: query
          description: Delete configurations.
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_volumes
          in: query
          description: Delete volumes.
          required: false
          schema:
            type: boolean
            default: true
        - name: docker_cleanup
          in: query
          description: Run docker cleanup.
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_connected_networks
          in: query
          description: Delete connected networks.
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Database deleted.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Database deleted.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Databases
      summary: Update
      description: Update database by UUID.
      operationId: update-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the database.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Database data
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Name of the database
                description:
                  type: string
                  description: Description of the database
                image:
                  type: string
                  description: Docker Image of the database
                is_public:
                  type: boolean
                  description: Is the database public?
                public_port:
                  type: integer
                  description: Public port of the database
                limits_memory:
                  type: string
                  description: Memory limit of the database
                limits_memory_swap:
                  type: string
                  description: Memory swap limit of the database
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness of the database
                limits_memory_reservation:
                  type: string
                  description: Memory reservation of the database
                limits_cpus:
                  type: string
                  description: CPU limit of the database
                limits_cpuset:
                  type: string
                  description: CPU set of the database
                limits_cpu_shares:
                  type: integer
                  description: CPU shares of the database
                postgres_user:
                  type: string
                  description: PostgreSQL user
                postgres_password:
                  type: string
                  description: PostgreSQL password
                postgres_db:
                  type: string
                  description: PostgreSQL database
                postgres_initdb_args:
                  type: string
                  description: PostgreSQL initdb args
                postgres_host_auth_method:
                  type: string
                  description: PostgreSQL host auth method
                postgres_conf:
                  type: string
                  description: PostgreSQL conf
                clickhouse_admin_user:
                  type: string
                  description: Clickhouse admin user
                clickhouse_admin_password:
                  type: string
                  description: Clickhouse admin password
                dragonfly_password:
                  type: string
                  description: DragonFly password
                redis_password:
                  type: string
                  description: Redis password
                redis_conf:
                  type: string
                  description: Redis conf
                keydb_password:
                  type: string
                  description: KeyDB password
                keydb_conf:
                  type: string
                  description: KeyDB conf
                mariadb_conf:
                  type: string
                  description: MariaDB conf
                mariadb_root_password:
                  type: string
                  description: MariaDB root password
                mariadb_user:
                  type: string
                  description: MariaDB user
                mariadb_password:
                  type: string
                  description: MariaDB password
                mariadb_database:
                  type: string
                  description: MariaDB database
                mongo_conf:
                  type: string
                  description: Mongo conf
                mongo_initdb_root_username:
                  type: string
                  description: Mongo initdb root username
                mongo_initdb_root_password:
                  type: string
                  description: Mongo initdb root password
                mongo_initdb_database:
                  type: string
                  description: Mongo initdb init database
                mysql_root_password:
                  type: string
                  description: MySQL root password
                mysql_password:
                  type: string
                  description: MySQL password
                mysql_user:
                  type: string
                  description: MySQL user
                mysql_database:
                  type: string
                  description: MySQL database
                mysql_conf:
                  type: string
                  description: MySQL conf
              type: object
      responses:
        '200':
          description: Database updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /databases/postgresql:
    post:
      tags:
        - Databases
      summary: Create (PostgreSQL)
      description: Create a new PostgreSQL database.
      operationId: create-database-postgresql
      requestBody:
        description: Database data
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: UUID of the server
                project_uuid:
                  type: string
                  description: UUID of the project
                environment_name:
                  type: string
                  description: Name of the environment. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: UUID of the environment. You need to provide at least one of environment_name or environment_uuid.
                postgres_user:
                  type: string
                  description: PostgreSQL user
                postgres_password:
                  type: string
                  description: PostgreSQL password
                postgres_db:
                  type: string
                  description: PostgreSQL database
                postgres_initdb_args:
                  type: string
                  description: PostgreSQL initdb args
                postgres_host_auth_method:
                  type: string
                  description: PostgreSQL host auth method
                postgres_conf:
                  type: string
                  description: PostgreSQL conf
                destination_uuid:
                  type: string
                  description: UUID of the destination if the server has multiple destinations
                name:
                  type: string
                  description: Name of the database
                description:
                  type: string
                  description: Description of the database
                image:
                  type: string
                  description: Docker Image of the database
                is_public:
                  type: boolean
                  description: Is the database public?
                public_port:
                  type: integer
                  description: Public port of the database
                limits_memory:
                  type: string
                  description: Memory limit of the database
                limits_memory_swap:
                  type: string
                  description: Memory swap limit of the database
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness of the database
                limits_memory_reservation:
                  type: string
                  description: Memory reservation of the database
                limits_cpus:
                  type: string
                  description: CPU limit of the database
                limits_cpuset:
                  type: string
                  description: CPU set of the database
                limits_cpu_shares:
                  type: integer
                  description: CPU shares of the database
                instant_deploy:
                  type: boolean
                  description: Instant deploy the database
              type: object
      responses:
        '200':
          description: Database updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /databases/clickhouse:
    post:
      tags:
        - Databases
      summary: Create (Clickhouse)
      description: Create a new Clickhouse database.
      operationId: create-database-clickhouse
      requestBody:
        description: Database data
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: UUID of the server
                project_uuid:
                  type: string
                  description: UUID of the project
                environment_name:
                  type: string
                  description: Name of the environment. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: UUID of the environment. You need to provide at least one of environment_name or environment_uuid.
                destination_uuid:
                  type: string
                  description: UUID of the destination if the server has multiple destinations
                clickhouse_admin_user:
                  type: string
                  description: Clickhouse admin user
                clickhouse_admin_password:
                  type: string
                  description: Clickhouse admin password
                name:
                  type: string
                  description: Name of the database
                description:
                  type: string
                  description: Description of the database
                image:
                  type: string
                  description: Docker Image of the database
                is_public:
                  type: boolean
                  description: Is the database public?
                public_port:
                  type: integer
                  description: Public port of the database
                limits_memory:
                  type: string
                  description: Memory limit of the database
                limits_memory_swap:
                  type: string
                  description: Memory swap limit of the database
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness of the database
                limits_memory_reservation:
                  type: string
                  description: Memory reservation of the database
                limits_cpus:
                  type: string
                  description: CPU limit of the database
                limits_cpuset:
                  type: string
                  description: CPU set of the database
                limits_cpu_shares:
                  type: integer
                  description: CPU shares of the database
                instant_deploy:
                  type: boolean
                  description: Instant deploy the database
              type: object
      responses:
        '200':
          description: Database updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /databases/dragonfly:
    post:
      tags:
        - Databases
      summary: Create (DragonFly)
      description: Create a new DragonFly database.
      operationId: create-database-dragonfly
      requestBody:
        description: Database data
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: UUID of the server
                project_uuid:
                  type: string
                  description: UUID of the project
                environment_name:
                  type: string
                  description: Name of the environment. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: UUID of the environment. You need to provide at least one of environment_name or environment_uuid.
                destination_uuid:
                  type: string
                  description: UUID of the destination if the server has multiple destinations
                dragonfly_password:
                  type: string
                  description: DragonFly password
                name:
                  type: string
                  description: Name of the database
                description:
                  type: string
                  description: Description of the database
                image:
                  type: string
                  description: Docker Image of the database
                is_public:
                  type: boolean
                  description: Is the database public?
                public_port:
                  type: integer
                  description: Public port of the database
                limits_memory:
                  type: string
                  description: Memory limit of the database
                limits_memory_swap:
                  type: string
                  description: Memory swap limit of the database
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness of the database
                limits_memory_reservation:
                  type: string
                  description: Memory reservation of the database
                limits_cpus:
                  type: string
                  description: CPU limit of the database
                limits_cpuset:
                  type: string
                  description: CPU set of the database
                limits_cpu_shares:
                  type: integer
                  description: CPU shares of the database
                instant_deploy:
                  type: boolean
                  description: Instant deploy the database
              type: object
      responses:
        '200':
          description: Database updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /databases/redis:
    post:
      tags:
        - Databases
      summary: Create (Redis)
      description: Create a new Redis database.
      operationId: create-database-redis
      requestBody:
        description: Database data
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: UUID of the server
                project_uuid:
                  type: string
                  description: UUID of the project
                environment_name:
                  type: string
                  description: Name of the environment. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: UUID of the environment. You need to provide at least one of environment_name or environment_uuid.
                destination_uuid:
                  type: string
                  description: UUID of the destination if the server has multiple destinations
                redis_password:
                  type: string
                  description: Redis password
                redis_conf:
                  type: string
                  description: Redis conf
                name:
                  type: string
                  description: Name of the database
                description:
                  type: string
                  description: Description of the database
                image:
                  type: string
                  description: Docker Image of the database
                is_public:
                  type: boolean
                  description: Is the database public?
                public_port:
                  type: integer
                  description: Public port of the database
                limits_memory:
                  type: string
                  description: Memory limit of the database
                limits_memory_swap:
                  type: string
                  description: Memory swap limit of the database
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness of the database
                limits_memory_reservation:
                  type: string
                  description: Memory reservation of the database
                limits_cpus:
                  type: string
                  description: CPU limit of the database
                limits_cpuset:
                  type: string
                  description: CPU set of the database
                limits_cpu_shares:
                  type: integer
                  description: CPU shares of the database
                instant_deploy:
                  type: boolean
                  description: Instant deploy the database
              type: object
      responses:
        '200':
          description: Database updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /databases/keydb:
    post:
      tags:
        - Databases
      summary: Create (KeyDB)
      description: Create a new KeyDB database.
      operationId: create-database-keydb
      requestBody:
        description: Database data
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: UUID of the server
                project_uuid:
                  type: string
                  description: UUID of the project
                environment_name:
                  type: string
                  description: Name of the environment. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: UUID of the environment. You need to provide at least one of environment_name or environment_uuid.
                destination_uuid:
                  type: string
                  description: UUID of the destination if the server has multiple destinations
                keydb_password:
                  type: string
                  description: KeyDB password
                keydb_conf:
                  type: string
                  description: KeyDB conf
                name:
                  type: string
                  description: Name of the database
                description:
                  type: string
                  description: Description of the database
                image:
                  type: string
                  description: Docker Image of the database
                is_public:
                  type: boolean
                  description: Is the database public?
                public_port:
                  type: integer
                  description: Public port of the database
                limits_memory:
                  type: string
                  description: Memory limit of the database
                limits_memory_swap:
                  type: string
                  description: Memory swap limit of the database
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness of the database
                limits_memory_reservation:
                  type: string
                  description: Memory reservation of the database
                limits_cpus:
                  type: string
                  description: CPU limit of the database
                limits_cpuset:
                  type: string
                  description: CPU set of the database
                limits_cpu_shares:
                  type: integer
                  description: CPU shares of the database
                instant_deploy:
                  type: boolean
                  description: Instant deploy the database
              type: object
      responses:
        '200':
          description: Database updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /databases/mariadb:
    post:
      tags:
        - Databases
      summary: Create (MariaDB)
      description: Create a new MariaDB database.
      operationId: create-database-mariadb
      requestBody:
        description: Database data
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: UUID of the server
                project_uuid:
                  type: string
                  description: UUID of the project
                environment_name:
                  type: string
                  description: Name of the environment. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: UUID of the environment. You need to provide at least one of environment_name or environment_uuid.
                destination_uuid:
                  type: string
                  description: UUID of the destination if the server has multiple destinations
                mariadb_conf:
                  type: string
                  description: MariaDB conf
                mariadb_root_password:
                  type: string
                  description: MariaDB root password
                mariadb_user:
                  type: string
                  description: MariaDB user
                mariadb_password:
                  type: string
                  description: MariaDB password
                mariadb_database:
                  type: string
                  description: MariaDB database
                name:
                  type: string
                  description: Name of the database
                description:
                  type: string
                  description: Description of the database
                image:
                  type: string
                  description: Docker Image of the database
                is_public:
                  type: boolean
                  description: Is the database public?
                public_port:
                  type: integer
                  description: Public port of the database
                limits_memory:
                  type: string
                  description: Memory limit of the database
                limits_memory_swap:
                  type: string
                  description: Memory swap limit of the database
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness of the database
                limits_memory_reservation:
                  type: string
                  description: Memory reservation of the database
                limits_cpus:
                  type: string
                  description: CPU limit of the database
                limits_cpuset:
                  type: string
                  description: CPU set of the database
                limits_cpu_shares:
                  type: integer
                  description: CPU shares of the database
                instant_deploy:
                  type: boolean
                  description: Instant deploy the database
              type: object
      responses:
        '200':
          description: Database updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /databases/mysql:
    post:
      tags:
        - Databases
      summary: Create (MySQL)
      description: Create a new MySQL database.
      operationId: create-database-mysql
      requestBody:
        description: Database data
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: UUID of the server
                project_uuid:
                  type: string
                  description: UUID of the project
                environment_name:
                  type: string
                  description: Name of the environment. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: UUID of the environment. You need to provide at least one of environment_name or environment_uuid.
                destination_uuid:
                  type: string
                  description: UUID of the destination if the server has multiple destinations
                mysql_root_password:
                  type: string
                  description: MySQL root password
                mysql_password:
                  type: string
                  description: MySQL password
                mysql_user:
                  type: string
                  description: MySQL user
                mysql_database:
                  type: string
                  description: MySQL database
                mysql_conf:
                  type: string
                  description: MySQL conf
                name:
                  type: string
                  description: Name of the database
                description:
                  type: string
                  description: Description of the database
                image:
                  type: string
                  description: Docker Image of the database
                is_public:
                  type: boolean
                  description: Is the database public?
                public_port:
                  type: integer
                  description: Public port of the database
                limits_memory:
                  type: string
                  description: Memory limit of the database
                limits_memory_swap:
                  type: string
                  description: Memory swap limit of the database
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness of the database
                limits_memory_reservation:
                  type: string
                  description: Memory reservation of the database
                limits_cpus:
                  type: string
                  description: CPU limit of the database
                limits_cpuset:
                  type: string
                  description: CPU set of the database
                limits_cpu_shares:
                  type: integer
                  description: CPU shares of the database
                instant_deploy:
                  type: boolean
                  description: Instant deploy the database
              type: object
      responses:
        '200':
          description: Database updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /databases/mongodb:
    post:
      tags:
        - Databases
      summary: Create (MongoDB)
      description: Create a new MongoDB database.
      operationId: create-database-mongodb
      requestBody:
        description: Database data
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: UUID of the server
                project_uuid:
                  type: string
                  description: UUID of the project
                environment_name:
                  type: string
                  description: Name of the environment. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: UUID of the environment. You need to provide at least one of environment_name or environment_uuid.
                destination_uuid:
                  type: string
                  description: UUID of the destination if the server has multiple destinations
                mongo_conf:
                  type: string
                  description: MongoDB conf
                mongo_initdb_root_username:
                  type: string
                  description: MongoDB initdb root username
                name:
                  type: string
                  description: Name of the database
                description:
                  type: string
                  description: Description of the database
                image:
                  type: string
                  description: Docker Image of the database
                is_public:
                  type: boolean
                  description: Is the database public?
                public_port:
                  type: integer
                  description: Public port of the database
                limits_memory:
                  type: string
                  description: Memory limit of the database
                limits_memory_swap:
                  type: string
                  description: Memory swap limit of the database
                limits_memory_swappiness:
                  type: integer
                  description: Memory swappiness of the database
                limits_memory_reservation:
                  type: string
                  description: Memory reservation of the database
                limits_cpus:
                  type: string
                  description: CPU limit of the database
                limits_cpuset:
                  type: string
                  description: CPU set of the database
                limits_cpu_shares:
                  type: integer
                  description: CPU shares of the database
                instant_deploy:
                  type: boolean
                  description: Instant deploy the database
              type: object
      responses:
        '200':
          description: Database updated
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /databases/{uuid}/start:
    get:
      tags:
        - Databases
      summary: Start
      description: Start database. `Post` request is also accepted.
      operationId: start-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Start database.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Database starting request queued.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /databases/{uuid}/stop:
    get:
      tags:
        - Databases
      summary: Stop
      description: Stop database. `Post` request is also accepted.
      operationId: stop-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Stop database.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Database stopping request queued.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /databases/{uuid}/restart:
    get:
      tags:
        - Databases
      summary: Restart
      description: Restart database. `Post` request is also accepted.
      operationId: restart-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the database.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Restart database.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Database restaring request queued.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
</file>

<file path="docs/openapi-chunks/deployments-api.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
paths:
  /deployments:
    get:
      tags:
        - Deployments
      summary: List
      description: List currently running deployments
      operationId: list-deployments
      responses:
        '200':
          description: Get all currently running deployments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationDeploymentQueue'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /deployments/{uuid}:
    get:
      tags:
        - Deployments
      summary: Get
      description: Get deployment by UUID.
      operationId: get-deployment-by-uuid
      parameters:
        - name: uuid
          in: path
          description: Deployment UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get deployment by UUID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDeploymentQueue'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /deploy:
    get:
      tags:
        - Deployments
      summary: Deploy
      description: Deploy by tag or uuid. `Post` request also accepted.
      operationId: deploy-by-tag-or-uuid
      parameters:
        - name: tag
          in: query
          description: Tag name(s). Comma separated list is also accepted.
          schema:
            type: string
        - name: uuid
          in: query
          description: Resource UUID(s). Comma separated list is also accepted.
          schema:
            type: string
        - name: force
          in: query
          description: Force rebuild (without cache)
          schema:
            type: boolean
      responses:
        '200':
          description: Get deployment(s) UUID's
          content:
            application/json:
              schema:
                properties:
                  deployments:
                    type: array
                    items:
                      properties:
                        message:
                          type: string
                        resource_uuid:
                          type: string
                        deployment_uuid:
                          type: string
                      type: object
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
</file>

<file path="docs/openapi-chunks/private-keys-api.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
paths:
  /security/keys:
    get:
      tags:
        - Private Keys
      summary: List
      description: List all private keys.
      operationId: list-private-keys
      responses:
        '200':
          description: Get all private keys.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrivateKey'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
    post:
      tags:
        - Private Keys
      summary: Create
      description: Create a new private key.
      operationId: create-private-key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - private_key
              properties:
                name:
                  type: string
                description:
                  type: string
                private_key:
                  type: string
              type: object
              additionalProperties: false
      responses:
        '201':
          description: The created private key's UUID.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Private Keys
      summary: Update
      description: Update a private key.
      operationId: update-private-key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - private_key
              properties:
                name:
                  type: string
                description:
                  type: string
                private_key:
                  type: string
              type: object
              additionalProperties: false
      responses:
        '201':
          description: The updated private key's UUID.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /security/keys/{uuid}:
    get:
      tags:
        - Private Keys
      summary: Get
      description: Get key by UUID.
      operationId: get-private-key-by-uuid
      parameters:
        - name: uuid
          in: path
          description: Private Key UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get all private keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateKey'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Private Key not found.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Private Keys
      summary: Delete
      description: Delete a private key.
      operationId: delete-private-key-by-uuid
      parameters:
        - name: uuid
          in: path
          description: Private Key UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Private Key deleted.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Private Key deleted.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Private Key not found.
      security:
        - bearerAuth: []
</file>

<file path="docs/openapi-chunks/projects-api.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
paths:
  /projects:
    get:
      tags:
        - Projects
      summary: List
      description: List projects.
      operationId: list-projects
      responses:
        '200':
          description: Get all projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
    post:
      tags:
        - Projects
      summary: Create
      description: Create Project.
      operationId: create-project
      requestBody:
        description: Project created.
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: The name of the project.
                description:
                  type: string
                  description: The description of the project.
              type: object
      responses:
        '201':
          description: Project created.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                    example: og888os
                    description: The UUID of the project.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /projects/{uuid}:
    get:
      tags:
        - Projects
      summary: Get
      description: Get project by UUID.
      operationId: get-project-by-uuid
      parameters:
        - name: uuid
          in: path
          description: Project UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Project not found.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Projects
      summary: Delete
      description: Delete project by UUID.
      operationId: delete-project-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the application.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project deleted.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Project deleted.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Projects
      summary: Update
      description: Update Project.
      operationId: update-project-by-uuid
      requestBody:
        description: Project updated.
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: The name of the project.
                description:
                  type: string
                  description: The description of the project.
              type: object
      responses:
        '201':
          description: Project updated.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                    example: og888os
                  name:
                    type: string
                    example: Project Name
                  description:
                    type: string
                    example: Project Description
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /projects/{uuid}/{environment_name_or_uuid}:
    get:
      tags:
        - Projects
      summary: Environment
      description: Get environment by name or UUID.
      operationId: get-environment-by-name-or-uuid
      parameters:
        - name: uuid
          in: path
          description: Project UUID
          required: true
          schema:
            type: string
        - name: environment_name_or_uuid
          in: path
          description: Environment name or UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Environment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
</file>

<file path="docs/openapi-chunks/resources-api.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
paths:
  /resources:
    get:
      tags:
        - Resources
      summary: List
      description: Get all resources.
      operationId: list-resources
      responses:
        '200':
          description: Get all resources
          content:
            application/json:
              schema:
                type: string
              example: Content is very complex. Will be implemented later.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
</file>

<file path="docs/openapi-chunks/schemas.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
paths: {}
components:
  schemas:
    Application:
      description: Application model
      properties:
        id:
          type: integer
          description: The application identifier in the database.
        description:
          type: string
          nullable: true
          description: The application description.
        repository_project_id:
          type: integer
          nullable: true
          description: The repository project identifier.
        uuid:
          type: string
          description: The application UUID.
        name:
          type: string
          description: The application name.
        fqdn:
          type: string
          nullable: true
          description: The application domains.
        config_hash:
          type: string
          description: Configuration hash.
        git_repository:
          type: string
          description: Git repository URL.
        git_branch:
          type: string
          description: Git branch.
        git_commit_sha:
          type: string
          description: Git commit SHA.
        git_full_url:
          type: string
          nullable: true
          description: Git full URL.
        docker_registry_image_name:
          type: string
          nullable: true
          description: Docker registry image name.
        docker_registry_image_tag:
          type: string
          nullable: true
          description: Docker registry image tag.
        build_pack:
          type: string
          description: Build pack.
          enum:
            - nixpacks
            - static
            - dockerfile
            - dockercompose
        static_image:
          type: string
          description: Static image used when static site is deployed.
        install_command:
          type: string
          description: Install command.
        build_command:
          type: string
          description: Build command.
        start_command:
          type: string
          description: Start command.
        ports_exposes:
          type: string
          description: Ports exposes.
        ports_mappings:
          type: string
          nullable: true
          description: Ports mappings.
        base_directory:
          type: string
          description: Base directory for all commands.
        publish_directory:
          type: string
          description: Publish directory.
        health_check_enabled:
          type: boolean
          description: Health check enabled.
        health_check_path:
          type: string
          description: Health check path.
        health_check_port:
          type: string
          nullable: true
          description: Health check port.
        health_check_host:
          type: string
          nullable: true
          description: Health check host.
        health_check_method:
          type: string
          description: Health check method.
        health_check_return_code:
          type: integer
          description: Health check return code.
        health_check_scheme:
          type: string
          description: Health check scheme.
        health_check_response_text:
          type: string
          nullable: true
          description: Health check response text.
        health_check_interval:
          type: integer
          description: Health check interval in seconds.
        health_check_timeout:
          type: integer
          description: Health check timeout in seconds.
        health_check_retries:
          type: integer
          description: Health check retries count.
        health_check_start_period:
          type: integer
          description: Health check start period in seconds.
        limits_memory:
          type: string
          description: Memory limit.
        limits_memory_swap:
          type: string
          description: Memory swap limit.
        limits_memory_swappiness:
          type: integer
          description: Memory swappiness.
        limits_memory_reservation:
          type: string
          description: Memory reservation.
        limits_cpus:
          type: string
          description: CPU limit.
        limits_cpuset:
          type: string
          nullable: true
          description: CPU set.
        limits_cpu_shares:
          type: integer
          description: CPU shares.
        status:
          type: string
          description: Application status.
        preview_url_template:
          type: string
          description: Preview URL template.
        destination_type:
          type: string
          description: Destination type.
        destination_id:
          type: integer
          description: Destination identifier.
        source_id:
          type: integer
          nullable: true
          description: Source identifier.
        private_key_id:
          type: integer
          nullable: true
          description: Private key identifier.
        environment_id:
          type: integer
          description: Environment identifier.
        dockerfile:
          type: string
          nullable: true
          description: Dockerfile content. Used for dockerfile build pack.
        dockerfile_location:
          type: string
          description: Dockerfile location.
        custom_labels:
          type: string
          nullable: true
          description: Custom labels.
        dockerfile_target_build:
          type: string
          nullable: true
          description: Dockerfile target build.
        manual_webhook_secret_github:
          type: string
          nullable: true
          description: Manual webhook secret for GitHub.
        manual_webhook_secret_gitlab:
          type: string
          nullable: true
          description: Manual webhook secret for GitLab.
        manual_webhook_secret_bitbucket:
          type: string
          nullable: true
          description: Manual webhook secret for Bitbucket.
        manual_webhook_secret_gitea:
          type: string
          nullable: true
          description: Manual webhook secret for Gitea.
        docker_compose_location:
          type: string
          description: Docker compose location.
        docker_compose:
          type: string
          nullable: true
          description: Docker compose content. Used for docker compose build pack.
        docker_compose_raw:
          type: string
          nullable: true
          description: Docker compose raw content.
        docker_compose_domains:
          type: string
          nullable: true
          description: Docker compose domains.
        docker_compose_custom_start_command:
          type: string
          nullable: true
          description: Docker compose custom start command.
        docker_compose_custom_build_command:
          type: string
          nullable: true
          description: Docker compose custom build command.
        swarm_replicas:
          type: integer
          nullable: true
          description: Swarm replicas. Only used for swarm deployments.
        swarm_placement_constraints:
          type: string
          nullable: true
          description: Swarm placement constraints. Only used for swarm deployments.
        custom_docker_run_options:
          type: string
          nullable: true
          description: Custom docker run options.
        post_deployment_command:
          type: string
          nullable: true
          description: Post deployment command.
        post_deployment_command_container:
          type: string
          nullable: true
          description: Post deployment command container.
        pre_deployment_command:
          type: string
          nullable: true
          description: Pre deployment command.
        pre_deployment_command_container:
          type: string
          nullable: true
          description: Pre deployment command container.
        watch_paths:
          type: string
          nullable: true
          description: Watch paths.
        custom_healthcheck_found:
          type: boolean
          description: Custom healthcheck found.
        redirect:
          type: string
          nullable: true
          description: How to set redirect with Traefik / Caddy. www<->non-www.
          enum:
            - www
            - non-www
            - both
        created_at:
          type: string
          format: date-time
          description: The date and time when the application was created.
        updated_at:
          type: string
          format: date-time
          description: The date and time when the application was last updated.
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: The date and time when the application was deleted.
        compose_parsing_version:
          type: string
          description: How Coolify parse the compose file.
        custom_nginx_configuration:
          type: string
          nullable: true
          description: Custom Nginx configuration base64 encoded.
      type: object
    ApplicationDeploymentQueue:
      description: Project model
      properties:
        id:
          type: integer
        application_id:
          type: string
        deployment_uuid:
          type: string
        pull_request_id:
          type: integer
        force_rebuild:
          type: boolean
        commit:
          type: string
        status:
          type: string
        is_webhook:
          type: boolean
        is_api:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        logs:
          type: string
        current_process_id:
          type: string
        restart_only:
          type: boolean
        git_type:
          type: string
        server_id:
          type: integer
        application_name:
          type: string
        server_name:
          type: string
        deployment_url:
          type: string
        destination_id:
          type: string
        only_this_server:
          type: boolean
        rollback:
          type: boolean
        commit_message:
          type: string
      type: object
    Environment:
      description: Environment model
      properties:
        id:
          type: integer
        name:
          type: string
        project_id:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
        description:
          type: string
      type: object
    EnvironmentVariable:
      description: Environment Variable model
      properties:
        id:
          type: integer
        uuid:
          type: string
        resourceable_type:
          type: string
        resourceable_id:
          type: integer
        is_build_time:
          type: boolean
        is_literal:
          type: boolean
        is_multiline:
          type: boolean
        is_preview:
          type: boolean
        is_shared:
          type: boolean
        is_shown_once:
          type: boolean
        key:
          type: string
        value:
          type: string
        real_value:
          type: string
        version:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      type: object
    PrivateKey:
      description: Private Key model
      properties:
        id:
          type: integer
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        private_key:
          type: string
          format: private-key
        is_git_related:
          type: boolean
        team_id:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
      type: object
    Project:
      description: Project model
      properties:
        id:
          type: integer
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        environments:
          description: The environments of the project.
          type: array
          items:
            $ref: '#/components/schemas/Environment'
      type: object
    Server:
      description: Server model
      properties:
        id:
          type: integer
          description: The server ID.
        uuid:
          type: string
          description: The server UUID.
        name:
          type: string
          description: The server name.
        description:
          type: string
          description: The server description.
        ip:
          type: string
          description: The IP address.
        user:
          type: string
          description: The user.
        port:
          type: integer
          description: The port number.
        proxy:
          type: object
          description: The proxy configuration.
        proxy_type:
          type: string
          enum:
            - traefik
            - caddy
            - none
          description: The proxy type.
        high_disk_usage_notification_sent:
          type: boolean
          description: The flag to indicate if the high disk usage notification has been sent.
        unreachable_notification_sent:
          type: boolean
          description: The flag to indicate if the unreachable notification has been sent.
        unreachable_count:
          type: integer
          description: The unreachable count for your server.
        validation_logs:
          type: string
          description: The validation logs.
        log_drain_notification_sent:
          type: boolean
          description: The flag to indicate if the log drain notification has been sent.
        swarm_cluster:
          type: string
          description: The swarm cluster configuration.
        settings:
          $ref: '#/components/schemas/ServerSetting'
      type: object
    ServerSetting:
      description: Server Settings model
      properties:
        id:
          type: integer
        concurrent_builds:
          type: integer
        dynamic_timeout:
          type: integer
        force_disabled:
          type: boolean
        force_server_cleanup:
          type: boolean
        is_build_server:
          type: boolean
        is_cloudflare_tunnel:
          type: boolean
        is_jump_server:
          type: boolean
        is_logdrain_axiom_enabled:
          type: boolean
        is_logdrain_custom_enabled:
          type: boolean
        is_logdrain_highlight_enabled:
          type: boolean
        is_logdrain_newrelic_enabled:
          type: boolean
        is_metrics_enabled:
          type: boolean
        is_reachable:
          type: boolean
        is_sentinel_enabled:
          type: boolean
        is_swarm_manager:
          type: boolean
        is_swarm_worker:
          type: boolean
        is_usable:
          type: boolean
        logdrain_axiom_api_key:
          type: string
        logdrain_axiom_dataset_name:
          type: string
        logdrain_custom_config:
          type: string
        logdrain_custom_config_parser:
          type: string
        logdrain_highlight_project_id:
          type: string
        logdrain_newrelic_base_uri:
          type: string
        logdrain_newrelic_license_key:
          type: string
        sentinel_metrics_history_days:
          type: integer
        sentinel_metrics_refresh_rate_seconds:
          type: integer
        sentinel_token:
          type: string
        docker_cleanup_frequency:
          type: string
        docker_cleanup_threshold:
          type: integer
        server_id:
          type: integer
        wildcard_domain:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        delete_unused_volumes:
          type: boolean
          description: The flag to indicate if the unused volumes should be deleted.
        delete_unused_networks:
          type: boolean
          description: The flag to indicate if the unused networks should be deleted.
      type: object
    Service:
      description: Service model
      properties:
        id:
          type: integer
          description: The unique identifier of the service. Only used for database identification.
        uuid:
          type: string
          description: The unique identifier of the service.
        name:
          type: string
          description: The name of the service.
        environment_id:
          type: integer
          description: The unique identifier of the environment where the service is attached to.
        server_id:
          type: integer
          description: The unique identifier of the server where the service is running.
        description:
          type: string
          description: The description of the service.
        docker_compose_raw:
          type: string
          description: The raw docker-compose.yml file of the service.
        docker_compose:
          type: string
          description: The docker-compose.yml file that is parsed and modified by Coolify.
        destination_type:
          type: string
          description: Destination type.
        destination_id:
          type: integer
          description: The unique identifier of the destination where the service is running.
        connect_to_docker_network:
          type: boolean
          description: The flag to connect the service to the predefined Docker network.
        is_container_label_escape_enabled:
          type: boolean
          description: The flag to enable the container label escape.
        is_container_label_readonly_enabled:
          type: boolean
          description: The flag to enable the container label readonly.
        config_hash:
          type: string
          description: The hash of the service configuration.
        service_type:
          type: string
          description: The type of the service.
        created_at:
          type: string
          description: The date and time when the service was created.
        updated_at:
          type: string
          description: The date and time when the service was last updated.
        deleted_at:
          type: string
          description: The date and time when the service was deleted.
      type: object
    Team:
      description: Team model
      properties:
        id:
          type: integer
          description: The unique identifier of the team.
        name:
          type: string
          description: The name of the team.
        description:
          type: string
          description: The description of the team.
        personal_team:
          type: boolean
          description: Whether the team is personal or not.
        created_at:
          type: string
          description: The date and time the team was created.
        updated_at:
          type: string
          description: The date and time the team was last updated.
        show_boarding:
          type: boolean
          description: Whether to show the boarding screen or not.
        custom_server_limit:
          type: string
          description: The custom server limit.
        members:
          description: The members of the team.
          type: array
          items:
            $ref: '#/components/schemas/User'
      type: object
    User:
      description: User model
      properties:
        id:
          type: integer
          description: The user identifier in the database.
        name:
          type: string
          description: The user name.
        email:
          type: string
          description: The user email.
        email_verified_at:
          type: string
          description: The date when the user email was verified.
        created_at:
          type: string
          description: The date when the user was created.
        updated_at:
          type: string
          description: The date when the user was updated.
        two_factor_confirmed_at:
          type: string
          description: The date when the user two factor was confirmed.
        force_password_reset:
          type: boolean
          description: The flag to force the user to reset the password.
        marketing_emails:
          type: boolean
          description: The flag to receive marketing emails.
      type: object
</file>

<file path="docs/openapi-chunks/servers-api.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
paths:
  /servers:
    get:
      tags:
        - Servers
      summary: List
      description: List all servers.
      operationId: list-servers
      responses:
        '200':
          description: Get all servers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
    post:
      tags:
        - Servers
      summary: Create
      description: Create Server.
      operationId: create-server
      requestBody:
        description: Server created.
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: My Server
                  description: The name of the server.
                description:
                  type: string
                  example: My Server Description
                  description: The description of the server.
                ip:
                  type: string
                  example: 127.0.0.1
                  description: The IP of the server.
                port:
                  type: integer
                  example: 22
                  description: The port of the server.
                user:
                  type: string
                  example: root
                  description: The user of the server.
                private_key_uuid:
                  type: string
                  example: og888os
                  description: The UUID of the private key.
                is_build_server:
                  type: boolean
                  example: false
                  description: Is build server.
                instant_validate:
                  type: boolean
                  example: false
                  description: Instant validate.
                proxy_type:
                  type: string
                  enum:
                    - traefik
                    - caddy
                    - none
                  example: traefik
                  description: The proxy type.
              type: object
      responses:
        '201':
          description: Server created.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                    example: og888os
                    description: The UUID of the server.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /servers/{uuid}:
    get:
      tags:
        - Servers
      summary: Get
      description: Get server by UUID.
      operationId: get-server-by-uuid
      parameters:
        - name: uuid
          in: path
          description: Server's UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get server by UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Servers
      summary: Delete
      description: Delete server by UUID.
      operationId: delete-server-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the server.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Server deleted.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Server deleted.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Servers
      summary: Update
      description: Update Server.
      operationId: update-server-by-uuid
      parameters:
        - name: uuid
          in: path
          description: Server UUID
          required: true
          schema:
            type: string
      requestBody:
        description: Server updated.
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: The name of the server.
                description:
                  type: string
                  description: The description of the server.
                ip:
                  type: string
                  description: The IP of the server.
                port:
                  type: integer
                  description: The port of the server.
                user:
                  type: string
                  description: The user of the server.
                private_key_uuid:
                  type: string
                  description: The UUID of the private key.
                is_build_server:
                  type: boolean
                  description: Is build server.
                instant_validate:
                  type: boolean
                  description: Instant validate.
                proxy_type:
                  type: string
                  enum:
                    - traefik
                    - caddy
                    - none
                  description: The proxy type.
              type: object
      responses:
        '201':
          description: Server updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /servers/{uuid}/resources:
    get:
      tags:
        - Servers
      summary: Resources
      description: Get resources by server.
      operationId: get-resources-by-server-uuid
      parameters:
        - name: uuid
          in: path
          description: Server's UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get resources by server
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                    uuid:
                      type: string
                    name:
                      type: string
                    type:
                      type: string
                    created_at:
                      type: string
                    updated_at:
                      type: string
                    status:
                      type: string
                  type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /servers/{uuid}/domains:
    get:
      tags:
        - Servers
      summary: Domains
      description: Get domains by server.
      operationId: get-domains-by-server-uuid
      parameters:
        - name: uuid
          in: path
          description: Server's UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get domains by server
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    ip:
                      type: string
                    domains:
                      type: array
                      items:
                        type: string
                  type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /servers/{uuid}/validate:
    get:
      tags:
        - Servers
      summary: Validate
      description: Validate server by UUID.
      operationId: validate-server-by-uuid
      parameters:
        - name: uuid
          in: path
          description: Server UUID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Server validation started.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Validation started.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
</file>

<file path="docs/openapi-chunks/services-api.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
paths:
  /services:
    get:
      tags:
        - Services
      summary: List
      description: List all services.
      operationId: list-services
      responses:
        '200':
          description: Get all services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
    post:
      tags:
        - Services
      summary: Create
      description: Create a one-click service
      operationId: create-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
                - type
              properties:
                type:
                  description: The one-click service type
                  type: string
                  enum:
                    - activepieces
                    - appsmith
                    - appwrite
                    - authentik
                    - babybuddy
                    - budge
                    - changedetection
                    - chatwoot
                    - classicpress-with-mariadb
                    - classicpress-with-mysql
                    - classicpress-without-database
                    - cloudflared
                    - code-server
                    - dashboard
                    - directus
                    - directus-with-postgresql
                    - docker-registry
                    - docuseal
                    - docuseal-with-postgres
                    - dokuwiki
                    - duplicati
                    - emby
                    - embystat
                    - fider
                    - filebrowser
                    - firefly
                    - formbricks
                    - ghost
                    - gitea
                    - gitea-with-mariadb
                    - gitea-with-mysql
                    - gitea-with-postgresql
                    - glance
                    - glances
                    - glitchtip
                    - grafana
                    - grafana-with-postgresql
                    - grocy
                    - heimdall
                    - homepage
                    - jellyfin
                    - kuzzle
                    - listmonk
                    - logto
                    - mediawiki
                    - meilisearch
                    - metabase
                    - metube
                    - minio
                    - moodle
                    - n8n
                    - n8n-with-postgresql
                    - next-image-transformation
                    - nextcloud
                    - nocodb
                    - odoo
                    - openblocks
                    - pairdrop
                    - penpot
                    - phpmyadmin
                    - pocketbase
                    - posthog
                    - reactive-resume
                    - rocketchat
                    - shlink
                    - slash
                    - snapdrop
                    - statusnook
                    - stirling-pdf
                    - supabase
                    - syncthing
                    - tolgee
                    - trigger
                    - trigger-with-external-database
                    - twenty
                    - umami
                    - unleash-with-postgresql
                    - unleash-without-database
                    - uptime-kuma
                    - vaultwarden
                    - vikunja
                    - weblate
                    - whoogle
                    - wordpress-with-mariadb
                    - wordpress-with-mysql
                    - wordpress-without-database
                name:
                  type: string
                  maxLength: 255
                  description: Name of the service.
                description:
                  type: string
                  nullable: true
                  description: Description of the service.
                project_uuid:
                  type: string
                  description: Project UUID.
                environment_name:
                  type: string
                  description: Environment name. You need to provide at least one of environment_name or environment_uuid.
                environment_uuid:
                  type: string
                  description: Environment UUID. You need to provide at least one of environment_name or environment_uuid.
                server_uuid:
                  type: string
                  description: Server UUID.
                destination_uuid:
                  type: string
                  description: Destination UUID. Required if server has multiple destinations.
                instant_deploy:
                  type: boolean
                  default: false
                  description: Start the service immediately after creation.
              type: object
      responses:
        '201':
          description: Create a service.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                    description: Service UUID.
                  domains:
                    type: array
                    items:
                      type: string
                    description: Service domains.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /services/{uuid}:
    get:
      tags:
        - Services
      summary: Get
      description: Get service by UUID.
      operationId: get-service-by-uuid
      parameters:
        - name: uuid
          in: path
          description: Service UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get a service by UUID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Services
      summary: Delete
      description: Delete service by UUID.
      operationId: delete-service-by-uuid
      parameters:
        - name: uuid
          in: path
          description: Service UUID
          required: true
          schema:
            type: string
        - name: delete_configurations
          in: query
          description: Delete configurations.
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_volumes
          in: query
          description: Delete volumes.
          required: false
          schema:
            type: boolean
            default: true
        - name: docker_cleanup
          in: query
          description: Run docker cleanup.
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_connected_networks
          in: query
          description: Delete connected networks.
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Delete a service by UUID
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Service deletion request queued.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /services/{uuid}/envs:
    get:
      tags:
        - Services
      summary: List Envs
      description: List all envs by service UUID.
      operationId: list-envs-by-service-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the service.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All environment variables by service UUID.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentVariable'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    post:
      tags:
        - Services
      summary: Create Env
      description: Create env by service UUID.
      operationId: create-env-by-service-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the service.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Env created.
        required: true
        content:
          application/json:
            schema:
              properties:
                key:
                  type: string
                  description: The key of the environment variable.
                value:
                  type: string
                  description: The value of the environment variable.
                is_preview:
                  type: boolean
                  description: The flag to indicate if the environment variable is used in preview deployments.
                is_build_time:
                  type: boolean
                  description: The flag to indicate if the environment variable is used in build time.
                is_literal:
                  type: boolean
                  description: The flag to indicate if the environment variable is a literal, nothing espaced.
                is_multiline:
                  type: boolean
                  description: The flag to indicate if the environment variable is multiline.
                is_shown_once:
                  type: boolean
                  description: The flag to indicate if the environment variable's value is shown on the UI.
              type: object
      responses:
        '201':
          description: Environment variable created.
          content:
            application/json:
              schema:
                properties:
                  uuid:
                    type: string
                    example: nc0k04gk8g0cgsk440g0koko
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Services
      summary: Update Env
      description: Update env by service UUID.
      operationId: update-env-by-service-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the service.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Env updated.
        required: true
        content:
          application/json:
            schema:
              required:
                - key
                - value
              properties:
                key:
                  type: string
                  description: The key of the environment variable.
                value:
                  type: string
                  description: The value of the environment variable.
                is_preview:
                  type: boolean
                  description: The flag to indicate if the environment variable is used in preview deployments.
                is_build_time:
                  type: boolean
                  description: The flag to indicate if the environment variable is used in build time.
                is_literal:
                  type: boolean
                  description: The flag to indicate if the environment variable is a literal, nothing espaced.
                is_multiline:
                  type: boolean
                  description: The flag to indicate if the environment variable is multiline.
                is_shown_once:
                  type: boolean
                  description: The flag to indicate if the environment variable's value is shown on the UI.
              type: object
      responses:
        '201':
          description: Environment variable updated.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Environment variable updated.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /services/{uuid}/envs/bulk:
    patch:
      tags:
        - Services
      summary: Update Envs (Bulk)
      description: Update multiple envs by service UUID.
      operationId: update-envs-by-service-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the service.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Bulk envs updated.
        required: true
        content:
          application/json:
            schema:
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    properties:
                      key:
                        type: string
                        description: The key of the environment variable.
                      value:
                        type: string
                        description: The value of the environment variable.
                      is_preview:
                        type: boolean
                        description: The flag to indicate if the environment variable is used in preview deployments.
                      is_build_time:
                        type: boolean
                        description: The flag to indicate if the environment variable is used in build time.
                      is_literal:
                        type: boolean
                        description: The flag to indicate if the environment variable is a literal, nothing espaced.
                      is_multiline:
                        type: boolean
                        description: The flag to indicate if the environment variable is multiline.
                      is_shown_once:
                        type: boolean
                        description: The flag to indicate if the environment variable's value is shown on the UI.
                    type: object
              type: object
      responses:
        '201':
          description: Environment variables updated.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Environment variables updated.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /services/{uuid}/envs/{env_uuid}:
    delete:
      tags:
        - Services
      summary: Delete Env
      description: Delete env by UUID.
      operationId: delete-env-by-service-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the service.
          required: true
          schema:
            type: string
            format: uuid
        - name: env_uuid
          in: path
          description: UUID of the environment variable.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Environment variable deleted.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Environment variable deleted.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /services/{uuid}/start:
    get:
      tags:
        - Services
      summary: Start
      description: Start service. `Post` request is also accepted.
      operationId: start-service-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the service.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Start service.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Service starting request queued.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /services/{uuid}/stop:
    get:
      tags:
        - Services
      summary: Stop
      description: Stop service. `Post` request is also accepted.
      operationId: stop-service-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the service.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Stop service.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Service stopping request queued.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /services/{uuid}/restart:
    get:
      tags:
        - Services
      summary: Restart
      description: Restart service. `Post` request is also accepted.
      operationId: restart-service-by-uuid
      parameters:
        - name: uuid
          in: path
          description: UUID of the service.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Restart service.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Service restaring request queued.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
</file>

<file path="docs/openapi-chunks/teams-api.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
paths:
  /teams:
    get:
      tags:
        - Teams
      summary: List
      description: Get all teams.
      operationId: list-teams
      responses:
        '200':
          description: List of teams.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /teams/{id}:
    get:
      tags:
        - Teams
      summary: Get
      description: Get team by TeamId.
      operationId: get-team-by-id
      parameters:
        - name: id
          in: path
          description: Team ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of teams.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /teams/{id}/members:
    get:
      tags:
        - Teams
      summary: Members
      description: Get members by TeamId.
      operationId: get-members-by-team-id
      parameters:
        - name: id
          in: path
          description: Team ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /teams/current:
    get:
      tags:
        - Teams
      summary: Authenticated Team
      description: Get currently authenticated team.
      operationId: get-current-team
      responses:
        '200':
          description: Current Team.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /teams/current/members:
    get:
      tags:
        - Teams
      summary: Authenticated Team Members
      description: Get currently authenticated team members.
      operationId: get-current-team-members
      responses:
        '200':
          description: Currently authenticated team members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
</file>

<file path="docs/openapi-chunks/untagged-api.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
paths:
  /version:
    get:
      summary: Version
      description: Get Coolify version.
      operationId: version
      responses:
        '200':
          description: Returns the version of the application
          content:
            application/json:
              schema:
                type: string
              example: v4.0.0
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
      security:
        - bearerAuth: []
  /enable:
    get:
      summary: Enable API
      description: Enable API (only with root permissions).
      operationId: enable-api
      responses:
        '200':
          description: Enable API.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: API enabled.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: You are not allowed to enable the API.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: You are not allowed to enable the API.
                type: object
      security:
        - bearerAuth: []
  /disable:
    get:
      summary: Disable API
      description: Disable API (only with root permissions).
      operationId: disable-api
      responses:
        '200':
          description: Disable API.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: API disabled.
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: You are not allowed to disable the API.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: You are not allowed to disable the API.
                type: object
      security:
        - bearerAuth: []
  /health:
    get:
      summary: Healthcheck
      description: Healthcheck endpoint.
      operationId: healthcheck
      responses:
        '200':
          description: Healthcheck endpoint.
          content:
            application/json:
              schema:
                type: string
              example: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
</file>

<file path="docs/coolify-openapi.yaml">
openapi: 3.1.0
info:
  title: Coolify
  version: '0.1'
servers:
  - url: 'https://app.coolify.io/api/v1'
    description: 'Coolify Cloud API. Change the host to your own instance if you are self-hosting.'
paths:
  /applications:
    get:
      tags:
        - Applications
      summary: List
      description: 'List all applications.'
      operationId: list-applications
      responses:
        '200':
          description: 'Get all applications.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /applications/public:
    post:
      tags:
        - Applications
      summary: 'Create (Public)'
      description: 'Create new application based on a public git repository.'
      operationId: create-public-application
      requestBody:
        description: 'Application object that needs to be created.'
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - git_repository
                - git_branch
                - build_pack
                - ports_exposes
              properties:
                project_uuid:
                  type: string
                  description: 'The project UUID.'
                server_uuid:
                  type: string
                  description: 'The server UUID.'
                environment_name:
                  type: string
                  description: 'The environment name. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'The environment UUID. You need to provide at least one of environment_name or environment_uuid.'
                git_repository:
                  type: string
                  description: 'The git repository URL.'
                git_branch:
                  type: string
                  description: 'The git branch.'
                build_pack:
                  type: string
                  enum: [nixpacks, static, dockerfile, dockercompose]
                  description: 'The build pack type.'
                ports_exposes:
                  type: string
                  description: 'The ports to expose.'
                destination_uuid:
                  type: string
                  description: 'The destination UUID.'
                name:
                  type: string
                  description: 'The application name.'
                description:
                  type: string
                  description: 'The application description.'
                domains:
                  type: string
                  description: 'The application domains.'
                git_commit_sha:
                  type: string
                  description: 'The git commit SHA.'
                docker_registry_image_name:
                  type: string
                  description: 'The docker registry image name.'
                docker_registry_image_tag:
                  type: string
                  description: 'The docker registry image tag.'
                is_static:
                  type: boolean
                  description: 'The flag to indicate if the application is static.'
                static_image:
                  type: string
                  enum: ['nginx:alpine']
                  description: 'The static image.'
                install_command:
                  type: string
                  description: 'The install command.'
                build_command:
                  type: string
                  description: 'The build command.'
                start_command:
                  type: string
                  description: 'The start command.'
                ports_mappings:
                  type: string
                  description: 'The ports mappings.'
                base_directory:
                  type: string
                  description: 'The base directory for all commands.'
                publish_directory:
                  type: string
                  description: 'The publish directory.'
                health_check_enabled:
                  type: boolean
                  description: 'Health check enabled.'
                health_check_path:
                  type: string
                  description: 'Health check path.'
                health_check_port:
                  type: string
                  nullable: true
                  description: 'Health check port.'
                health_check_host:
                  type: string
                  nullable: true
                  description: 'Health check host.'
                health_check_method:
                  type: string
                  description: 'Health check method.'
                health_check_return_code:
                  type: integer
                  description: 'Health check return code.'
                health_check_scheme:
                  type: string
                  description: 'Health check scheme.'
                health_check_response_text:
                  type: string
                  nullable: true
                  description: 'Health check response text.'
                health_check_interval:
                  type: integer
                  description: 'Health check interval in seconds.'
                health_check_timeout:
                  type: integer
                  description: 'Health check timeout in seconds.'
                health_check_retries:
                  type: integer
                  description: 'Health check retries count.'
                health_check_start_period:
                  type: integer
                  description: 'Health check start period in seconds.'
                limits_memory:
                  type: string
                  description: 'Memory limit.'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit.'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness.'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation.'
                limits_cpus:
                  type: string
                  description: 'CPU limit.'
                limits_cpuset:
                  type: string
                  nullable: true
                  description: 'CPU set.'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares.'
                custom_labels:
                  type: string
                  description: 'Custom labels.'
                custom_docker_run_options:
                  type: string
                  description: 'Custom docker run options.'
                post_deployment_command:
                  type: string
                  description: 'Post deployment command.'
                post_deployment_command_container:
                  type: string
                  description: 'Post deployment command container.'
                pre_deployment_command:
                  type: string
                  description: 'Pre deployment command.'
                pre_deployment_command_container:
                  type: string
                  description: 'Pre deployment command container.'
                manual_webhook_secret_github:
                  type: string
                  description: 'Manual webhook secret for Github.'
                manual_webhook_secret_gitlab:
                  type: string
                  description: 'Manual webhook secret for Gitlab.'
                manual_webhook_secret_bitbucket:
                  type: string
                  description: 'Manual webhook secret for Bitbucket.'
                manual_webhook_secret_gitea:
                  type: string
                  description: 'Manual webhook secret for Gitea.'
                redirect:
                  type: string
                  nullable: true
                  description: 'How to set redirect with Traefik / Caddy. www<->non-www.'
                  enum: [www, non-www, both]
                instant_deploy:
                  type: boolean
                  description: 'The flag to indicate if the application should be deployed instantly.'
                dockerfile:
                  type: string
                  description: 'The Dockerfile content.'
                docker_compose_location:
                  type: string
                  description: 'The Docker Compose location.'
                docker_compose_raw:
                  type: string
                  description: 'The Docker Compose raw content.'
                docker_compose_custom_start_command:
                  type: string
                  description: 'The Docker Compose custom start command.'
                docker_compose_custom_build_command:
                  type: string
                  description: 'The Docker Compose custom build command.'
                docker_compose_domains:
                  type: array
                  description: 'The Docker Compose domains.'
                watch_paths:
                  type: string
                  description: 'The watch paths.'
                use_build_server:
                  type: boolean
                  nullable: true
                  description: 'Use build server.'
              type: object
      responses:
        '201':
          description: 'Application created successfully.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /applications/private-github-app:
    post:
      tags:
        - Applications
      summary: 'Create (Private - GH App)'
      description: 'Create new application based on a private repository through a Github App.'
      operationId: create-private-github-app-application
      requestBody:
        description: 'Application object that needs to be created.'
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - github_app_uuid
                - git_repository
                - git_branch
                - build_pack
                - ports_exposes
              properties:
                project_uuid:
                  type: string
                  description: 'The project UUID.'
                server_uuid:
                  type: string
                  description: 'The server UUID.'
                environment_name:
                  type: string
                  description: 'The environment name. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'The environment UUID. You need to provide at least one of environment_name or environment_uuid.'
                github_app_uuid:
                  type: string
                  description: 'The Github App UUID.'
                git_repository:
                  type: string
                  description: 'The git repository URL.'
                git_branch:
                  type: string
                  description: 'The git branch.'
                ports_exposes:
                  type: string
                  description: 'The ports to expose.'
                destination_uuid:
                  type: string
                  description: 'The destination UUID.'
                build_pack:
                  type: string
                  enum: [nixpacks, static, dockerfile, dockercompose]
                  description: 'The build pack type.'
                name:
                  type: string
                  description: 'The application name.'
                description:
                  type: string
                  description: 'The application description.'
                domains:
                  type: string
                  description: 'The application domains.'
                git_commit_sha:
                  type: string
                  description: 'The git commit SHA.'
                docker_registry_image_name:
                  type: string
                  description: 'The docker registry image name.'
                docker_registry_image_tag:
                  type: string
                  description: 'The docker registry image tag.'
                is_static:
                  type: boolean
                  description: 'The flag to indicate if the application is static.'
                static_image:
                  type: string
                  enum: ['nginx:alpine']
                  description: 'The static image.'
                install_command:
                  type: string
                  description: 'The install command.'
                build_command:
                  type: string
                  description: 'The build command.'
                start_command:
                  type: string
                  description: 'The start command.'
                ports_mappings:
                  type: string
                  description: 'The ports mappings.'
                base_directory:
                  type: string
                  description: 'The base directory for all commands.'
                publish_directory:
                  type: string
                  description: 'The publish directory.'
                health_check_enabled:
                  type: boolean
                  description: 'Health check enabled.'
                health_check_path:
                  type: string
                  description: 'Health check path.'
                health_check_port:
                  type: string
                  nullable: true
                  description: 'Health check port.'
                health_check_host:
                  type: string
                  nullable: true
                  description: 'Health check host.'
                health_check_method:
                  type: string
                  description: 'Health check method.'
                health_check_return_code:
                  type: integer
                  description: 'Health check return code.'
                health_check_scheme:
                  type: string
                  description: 'Health check scheme.'
                health_check_response_text:
                  type: string
                  nullable: true
                  description: 'Health check response text.'
                health_check_interval:
                  type: integer
                  description: 'Health check interval in seconds.'
                health_check_timeout:
                  type: integer
                  description: 'Health check timeout in seconds.'
                health_check_retries:
                  type: integer
                  description: 'Health check retries count.'
                health_check_start_period:
                  type: integer
                  description: 'Health check start period in seconds.'
                limits_memory:
                  type: string
                  description: 'Memory limit.'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit.'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness.'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation.'
                limits_cpus:
                  type: string
                  description: 'CPU limit.'
                limits_cpuset:
                  type: string
                  nullable: true
                  description: 'CPU set.'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares.'
                custom_labels:
                  type: string
                  description: 'Custom labels.'
                custom_docker_run_options:
                  type: string
                  description: 'Custom docker run options.'
                post_deployment_command:
                  type: string
                  description: 'Post deployment command.'
                post_deployment_command_container:
                  type: string
                  description: 'Post deployment command container.'
                pre_deployment_command:
                  type: string
                  description: 'Pre deployment command.'
                pre_deployment_command_container:
                  type: string
                  description: 'Pre deployment command container.'
                manual_webhook_secret_github:
                  type: string
                  description: 'Manual webhook secret for Github.'
                manual_webhook_secret_gitlab:
                  type: string
                  description: 'Manual webhook secret for Gitlab.'
                manual_webhook_secret_bitbucket:
                  type: string
                  description: 'Manual webhook secret for Bitbucket.'
                manual_webhook_secret_gitea:
                  type: string
                  description: 'Manual webhook secret for Gitea.'
                redirect:
                  type: string
                  nullable: true
                  description: 'How to set redirect with Traefik / Caddy. www<->non-www.'
                  enum: [www, non-www, both]
                instant_deploy:
                  type: boolean
                  description: 'The flag to indicate if the application should be deployed instantly.'
                dockerfile:
                  type: string
                  description: 'The Dockerfile content.'
                docker_compose_location:
                  type: string
                  description: 'The Docker Compose location.'
                docker_compose_raw:
                  type: string
                  description: 'The Docker Compose raw content.'
                docker_compose_custom_start_command:
                  type: string
                  description: 'The Docker Compose custom start command.'
                docker_compose_custom_build_command:
                  type: string
                  description: 'The Docker Compose custom build command.'
                docker_compose_domains:
                  type: array
                  description: 'The Docker Compose domains.'
                watch_paths:
                  type: string
                  description: 'The watch paths.'
                use_build_server:
                  type: boolean
                  nullable: true
                  description: 'Use build server.'
              type: object
      responses:
        '201':
          description: 'Application created successfully.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /applications/private-deploy-key:
    post:
      tags:
        - Applications
      summary: 'Create (Private - Deploy Key)'
      description: 'Create new application based on a private repository through a Deploy Key.'
      operationId: create-private-deploy-key-application
      requestBody:
        description: 'Application object that needs to be created.'
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - private_key_uuid
                - git_repository
                - git_branch
                - build_pack
                - ports_exposes
              properties:
                project_uuid:
                  type: string
                  description: 'The project UUID.'
                server_uuid:
                  type: string
                  description: 'The server UUID.'
                environment_name:
                  type: string
                  description: 'The environment name. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'The environment UUID. You need to provide at least one of environment_name or environment_uuid.'
                private_key_uuid:
                  type: string
                  description: 'The private key UUID.'
                git_repository:
                  type: string
                  description: 'The git repository URL.'
                git_branch:
                  type: string
                  description: 'The git branch.'
                ports_exposes:
                  type: string
                  description: 'The ports to expose.'
                destination_uuid:
                  type: string
                  description: 'The destination UUID.'
                build_pack:
                  type: string
                  enum: [nixpacks, static, dockerfile, dockercompose]
                  description: 'The build pack type.'
                name:
                  type: string
                  description: 'The application name.'
                description:
                  type: string
                  description: 'The application description.'
                domains:
                  type: string
                  description: 'The application domains.'
                git_commit_sha:
                  type: string
                  description: 'The git commit SHA.'
                docker_registry_image_name:
                  type: string
                  description: 'The docker registry image name.'
                docker_registry_image_tag:
                  type: string
                  description: 'The docker registry image tag.'
                is_static:
                  type: boolean
                  description: 'The flag to indicate if the application is static.'
                static_image:
                  type: string
                  enum: ['nginx:alpine']
                  description: 'The static image.'
                install_command:
                  type: string
                  description: 'The install command.'
                build_command:
                  type: string
                  description: 'The build command.'
                start_command:
                  type: string
                  description: 'The start command.'
                ports_mappings:
                  type: string
                  description: 'The ports mappings.'
                base_directory:
                  type: string
                  description: 'The base directory for all commands.'
                publish_directory:
                  type: string
                  description: 'The publish directory.'
                health_check_enabled:
                  type: boolean
                  description: 'Health check enabled.'
                health_check_path:
                  type: string
                  description: 'Health check path.'
                health_check_port:
                  type: string
                  nullable: true
                  description: 'Health check port.'
                health_check_host:
                  type: string
                  nullable: true
                  description: 'Health check host.'
                health_check_method:
                  type: string
                  description: 'Health check method.'
                health_check_return_code:
                  type: integer
                  description: 'Health check return code.'
                health_check_scheme:
                  type: string
                  description: 'Health check scheme.'
                health_check_response_text:
                  type: string
                  nullable: true
                  description: 'Health check response text.'
                health_check_interval:
                  type: integer
                  description: 'Health check interval in seconds.'
                health_check_timeout:
                  type: integer
                  description: 'Health check timeout in seconds.'
                health_check_retries:
                  type: integer
                  description: 'Health check retries count.'
                health_check_start_period:
                  type: integer
                  description: 'Health check start period in seconds.'
                limits_memory:
                  type: string
                  description: 'Memory limit.'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit.'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness.'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation.'
                limits_cpus:
                  type: string
                  description: 'CPU limit.'
                limits_cpuset:
                  type: string
                  nullable: true
                  description: 'CPU set.'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares.'
                custom_labels:
                  type: string
                  description: 'Custom labels.'
                custom_docker_run_options:
                  type: string
                  description: 'Custom docker run options.'
                post_deployment_command:
                  type: string
                  description: 'Post deployment command.'
                post_deployment_command_container:
                  type: string
                  description: 'Post deployment command container.'
                pre_deployment_command:
                  type: string
                  description: 'Pre deployment command.'
                pre_deployment_command_container:
                  type: string
                  description: 'Pre deployment command container.'
                manual_webhook_secret_github:
                  type: string
                  description: 'Manual webhook secret for Github.'
                manual_webhook_secret_gitlab:
                  type: string
                  description: 'Manual webhook secret for Gitlab.'
                manual_webhook_secret_bitbucket:
                  type: string
                  description: 'Manual webhook secret for Bitbucket.'
                manual_webhook_secret_gitea:
                  type: string
                  description: 'Manual webhook secret for Gitea.'
                redirect:
                  type: string
                  nullable: true
                  description: 'How to set redirect with Traefik / Caddy. www<->non-www.'
                  enum: [www, non-www, both]
                instant_deploy:
                  type: boolean
                  description: 'The flag to indicate if the application should be deployed instantly.'
                dockerfile:
                  type: string
                  description: 'The Dockerfile content.'
                docker_compose_location:
                  type: string
                  description: 'The Docker Compose location.'
                docker_compose_raw:
                  type: string
                  description: 'The Docker Compose raw content.'
                docker_compose_custom_start_command:
                  type: string
                  description: 'The Docker Compose custom start command.'
                docker_compose_custom_build_command:
                  type: string
                  description: 'The Docker Compose custom build command.'
                docker_compose_domains:
                  type: array
                  description: 'The Docker Compose domains.'
                watch_paths:
                  type: string
                  description: 'The watch paths.'
                use_build_server:
                  type: boolean
                  nullable: true
                  description: 'Use build server.'
              type: object
      responses:
        '201':
          description: 'Application created successfully.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /applications/dockerfile:
    post:
      tags:
        - Applications
      summary: 'Create (Dockerfile)'
      description: 'Create new application based on a simple Dockerfile.'
      operationId: create-dockerfile-application
      requestBody:
        description: 'Application object that needs to be created.'
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - dockerfile
              properties:
                project_uuid:
                  type: string
                  description: 'The project UUID.'
                server_uuid:
                  type: string
                  description: 'The server UUID.'
                environment_name:
                  type: string
                  description: 'The environment name. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'The environment UUID. You need to provide at least one of environment_name or environment_uuid.'
                dockerfile:
                  type: string
                  description: 'The Dockerfile content.'
                build_pack:
                  type: string
                  enum: [nixpacks, static, dockerfile, dockercompose]
                  description: 'The build pack type.'
                ports_exposes:
                  type: string
                  description: 'The ports to expose.'
                destination_uuid:
                  type: string
                  description: 'The destination UUID.'
                name:
                  type: string
                  description: 'The application name.'
                description:
                  type: string
                  description: 'The application description.'
                domains:
                  type: string
                  description: 'The application domains.'
                docker_registry_image_name:
                  type: string
                  description: 'The docker registry image name.'
                docker_registry_image_tag:
                  type: string
                  description: 'The docker registry image tag.'
                ports_mappings:
                  type: string
                  description: 'The ports mappings.'
                base_directory:
                  type: string
                  description: 'The base directory for all commands.'
                health_check_enabled:
                  type: boolean
                  description: 'Health check enabled.'
                health_check_path:
                  type: string
                  description: 'Health check path.'
                health_check_port:
                  type: string
                  nullable: true
                  description: 'Health check port.'
                health_check_host:
                  type: string
                  nullable: true
                  description: 'Health check host.'
                health_check_method:
                  type: string
                  description: 'Health check method.'
                health_check_return_code:
                  type: integer
                  description: 'Health check return code.'
                health_check_scheme:
                  type: string
                  description: 'Health check scheme.'
                health_check_response_text:
                  type: string
                  nullable: true
                  description: 'Health check response text.'
                health_check_interval:
                  type: integer
                  description: 'Health check interval in seconds.'
                health_check_timeout:
                  type: integer
                  description: 'Health check timeout in seconds.'
                health_check_retries:
                  type: integer
                  description: 'Health check retries count.'
                health_check_start_period:
                  type: integer
                  description: 'Health check start period in seconds.'
                limits_memory:
                  type: string
                  description: 'Memory limit.'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit.'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness.'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation.'
                limits_cpus:
                  type: string
                  description: 'CPU limit.'
                limits_cpuset:
                  type: string
                  nullable: true
                  description: 'CPU set.'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares.'
                custom_labels:
                  type: string
                  description: 'Custom labels.'
                custom_docker_run_options:
                  type: string
                  description: 'Custom docker run options.'
                post_deployment_command:
                  type: string
                  description: 'Post deployment command.'
                post_deployment_command_container:
                  type: string
                  description: 'Post deployment command container.'
                pre_deployment_command:
                  type: string
                  description: 'Pre deployment command.'
                pre_deployment_command_container:
                  type: string
                  description: 'Pre deployment command container.'
                manual_webhook_secret_github:
                  type: string
                  description: 'Manual webhook secret for Github.'
                manual_webhook_secret_gitlab:
                  type: string
                  description: 'Manual webhook secret for Gitlab.'
                manual_webhook_secret_bitbucket:
                  type: string
                  description: 'Manual webhook secret for Bitbucket.'
                manual_webhook_secret_gitea:
                  type: string
                  description: 'Manual webhook secret for Gitea.'
                redirect:
                  type: string
                  nullable: true
                  description: 'How to set redirect with Traefik / Caddy. www<->non-www.'
                  enum: [www, non-www, both]
                instant_deploy:
                  type: boolean
                  description: 'The flag to indicate if the application should be deployed instantly.'
                use_build_server:
                  type: boolean
                  nullable: true
                  description: 'Use build server.'
              type: object
      responses:
        '201':
          description: 'Application created successfully.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /applications/dockerimage:
    post:
      tags:
        - Applications
      summary: 'Create (Docker Image)'
      description: 'Create new application based on a prebuilt docker image'
      operationId: create-dockerimage-application
      requestBody:
        description: 'Application object that needs to be created.'
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - docker_registry_image_name
                - ports_exposes
              properties:
                project_uuid:
                  type: string
                  description: 'The project UUID.'
                server_uuid:
                  type: string
                  description: 'The server UUID.'
                environment_name:
                  type: string
                  description: 'The environment name. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'The environment UUID. You need to provide at least one of environment_name or environment_uuid.'
                docker_registry_image_name:
                  type: string
                  description: 'The docker registry image name.'
                docker_registry_image_tag:
                  type: string
                  description: 'The docker registry image tag.'
                ports_exposes:
                  type: string
                  description: 'The ports to expose.'
                destination_uuid:
                  type: string
                  description: 'The destination UUID.'
                name:
                  type: string
                  description: 'The application name.'
                description:
                  type: string
                  description: 'The application description.'
                domains:
                  type: string
                  description: 'The application domains.'
                ports_mappings:
                  type: string
                  description: 'The ports mappings.'
                health_check_enabled:
                  type: boolean
                  description: 'Health check enabled.'
                health_check_path:
                  type: string
                  description: 'Health check path.'
                health_check_port:
                  type: string
                  nullable: true
                  description: 'Health check port.'
                health_check_host:
                  type: string
                  nullable: true
                  description: 'Health check host.'
                health_check_method:
                  type: string
                  description: 'Health check method.'
                health_check_return_code:
                  type: integer
                  description: 'Health check return code.'
                health_check_scheme:
                  type: string
                  description: 'Health check scheme.'
                health_check_response_text:
                  type: string
                  nullable: true
                  description: 'Health check response text.'
                health_check_interval:
                  type: integer
                  description: 'Health check interval in seconds.'
                health_check_timeout:
                  type: integer
                  description: 'Health check timeout in seconds.'
                health_check_retries:
                  type: integer
                  description: 'Health check retries count.'
                health_check_start_period:
                  type: integer
                  description: 'Health check start period in seconds.'
                limits_memory:
                  type: string
                  description: 'Memory limit.'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit.'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness.'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation.'
                limits_cpus:
                  type: string
                  description: 'CPU limit.'
                limits_cpuset:
                  type: string
                  nullable: true
                  description: 'CPU set.'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares.'
                custom_labels:
                  type: string
                  description: 'Custom labels.'
                custom_docker_run_options:
                  type: string
                  description: 'Custom docker run options.'
                post_deployment_command:
                  type: string
                  description: 'Post deployment command.'
                post_deployment_command_container:
                  type: string
                  description: 'Post deployment command container.'
                pre_deployment_command:
                  type: string
                  description: 'Pre deployment command.'
                pre_deployment_command_container:
                  type: string
                  description: 'Pre deployment command container.'
                manual_webhook_secret_github:
                  type: string
                  description: 'Manual webhook secret for Github.'
                manual_webhook_secret_gitlab:
                  type: string
                  description: 'Manual webhook secret for Gitlab.'
                manual_webhook_secret_bitbucket:
                  type: string
                  description: 'Manual webhook secret for Bitbucket.'
                manual_webhook_secret_gitea:
                  type: string
                  description: 'Manual webhook secret for Gitea.'
                redirect:
                  type: string
                  nullable: true
                  description: 'How to set redirect with Traefik / Caddy. www<->non-www.'
                  enum: [www, non-www, both]
                instant_deploy:
                  type: boolean
                  description: 'The flag to indicate if the application should be deployed instantly.'
                use_build_server:
                  type: boolean
                  nullable: true
                  description: 'Use build server.'
              type: object
      responses:
        '201':
          description: 'Application created successfully.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /applications/dockercompose:
    post:
      tags:
        - Applications
      summary: 'Create (Docker Compose)'
      description: 'Create new application based on a docker-compose file.'
      operationId: create-dockercompose-application
      requestBody:
        description: 'Application object that needs to be created.'
        required: true
        content:
          application/json:
            schema:
              required:
                - project_uuid
                - server_uuid
                - environment_name
                - environment_uuid
                - docker_compose_raw
              properties:
                project_uuid:
                  type: string
                  description: 'The project UUID.'
                server_uuid:
                  type: string
                  description: 'The server UUID.'
                environment_name:
                  type: string
                  description: 'The environment name. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'The environment UUID. You need to provide at least one of environment_name or environment_uuid.'
                docker_compose_raw:
                  type: string
                  description: 'The Docker Compose raw content.'
                destination_uuid:
                  type: string
                  description: 'The destination UUID if the server has more than one destinations.'
                name:
                  type: string
                  description: 'The application name.'
                description:
                  type: string
                  description: 'The application description.'
                instant_deploy:
                  type: boolean
                  description: 'The flag to indicate if the application should be deployed instantly.'
                use_build_server:
                  type: boolean
                  nullable: true
                  description: 'Use build server.'
              type: object
      responses:
        '201':
          description: 'Application created successfully.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  '/applications/{uuid}':
    get:
      tags:
        - Applications
      summary: Get
      description: 'Get application by UUID.'
      operationId: get-application-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Get application by UUID.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Applications
      summary: Delete
      description: 'Delete application by UUID.'
      operationId: delete-application-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
        - name: delete_configurations
          in: query
          description: 'Delete configurations.'
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_volumes
          in: query
          description: 'Delete volumes.'
          required: false
          schema:
            type: boolean
            default: true
        - name: docker_cleanup
          in: query
          description: 'Run docker cleanup.'
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_connected_networks
          in: query
          description: 'Delete connected networks.'
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: 'Application deleted.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Application deleted.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Applications
      summary: Update
      description: 'Update application by UUID.'
      operationId: update-application-by-uuid
      requestBody:
        description: 'Application updated.'
        required: true
        content:
          application/json:
            schema:
              properties:
                project_uuid:
                  type: string
                  description: 'The project UUID.'
                server_uuid:
                  type: string
                  description: 'The server UUID.'
                environment_name:
                  type: string
                  description: 'The environment name.'
                github_app_uuid:
                  type: string
                  description: 'The Github App UUID.'
                git_repository:
                  type: string
                  description: 'The git repository URL.'
                git_branch:
                  type: string
                  description: 'The git branch.'
                ports_exposes:
                  type: string
                  description: 'The ports to expose.'
                destination_uuid:
                  type: string
                  description: 'The destination UUID.'
                build_pack:
                  type: string
                  enum: [nixpacks, static, dockerfile, dockercompose]
                  description: 'The build pack type.'
                name:
                  type: string
                  description: 'The application name.'
                description:
                  type: string
                  description: 'The application description.'
                domains:
                  type: string
                  description: 'The application domains.'
                git_commit_sha:
                  type: string
                  description: 'The git commit SHA.'
                docker_registry_image_name:
                  type: string
                  description: 'The docker registry image name.'
                docker_registry_image_tag:
                  type: string
                  description: 'The docker registry image tag.'
                is_static:
                  type: boolean
                  description: 'The flag to indicate if the application is static.'
                install_command:
                  type: string
                  description: 'The install command.'
                build_command:
                  type: string
                  description: 'The build command.'
                start_command:
                  type: string
                  description: 'The start command.'
                ports_mappings:
                  type: string
                  description: 'The ports mappings.'
                base_directory:
                  type: string
                  description: 'The base directory for all commands.'
                publish_directory:
                  type: string
                  description: 'The publish directory.'
                health_check_enabled:
                  type: boolean
                  description: 'Health check enabled.'
                health_check_path:
                  type: string
                  description: 'Health check path.'
                health_check_port:
                  type: string
                  nullable: true
                  description: 'Health check port.'
                health_check_host:
                  type: string
                  nullable: true
                  description: 'Health check host.'
                health_check_method:
                  type: string
                  description: 'Health check method.'
                health_check_return_code:
                  type: integer
                  description: 'Health check return code.'
                health_check_scheme:
                  type: string
                  description: 'Health check scheme.'
                health_check_response_text:
                  type: string
                  nullable: true
                  description: 'Health check response text.'
                health_check_interval:
                  type: integer
                  description: 'Health check interval in seconds.'
                health_check_timeout:
                  type: integer
                  description: 'Health check timeout in seconds.'
                health_check_retries:
                  type: integer
                  description: 'Health check retries count.'
                health_check_start_period:
                  type: integer
                  description: 'Health check start period in seconds.'
                limits_memory:
                  type: string
                  description: 'Memory limit.'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit.'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness.'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation.'
                limits_cpus:
                  type: string
                  description: 'CPU limit.'
                limits_cpuset:
                  type: string
                  nullable: true
                  description: 'CPU set.'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares.'
                custom_labels:
                  type: string
                  description: 'Custom labels.'
                custom_docker_run_options:
                  type: string
                  description: 'Custom docker run options.'
                post_deployment_command:
                  type: string
                  description: 'Post deployment command.'
                post_deployment_command_container:
                  type: string
                  description: 'Post deployment command container.'
                pre_deployment_command:
                  type: string
                  description: 'Pre deployment command.'
                pre_deployment_command_container:
                  type: string
                  description: 'Pre deployment command container.'
                manual_webhook_secret_github:
                  type: string
                  description: 'Manual webhook secret for Github.'
                manual_webhook_secret_gitlab:
                  type: string
                  description: 'Manual webhook secret for Gitlab.'
                manual_webhook_secret_bitbucket:
                  type: string
                  description: 'Manual webhook secret for Bitbucket.'
                manual_webhook_secret_gitea:
                  type: string
                  description: 'Manual webhook secret for Gitea.'
                redirect:
                  type: string
                  nullable: true
                  description: 'How to set redirect with Traefik / Caddy. www<->non-www.'
                  enum: [www, non-www, both]
                instant_deploy:
                  type: boolean
                  description: 'The flag to indicate if the application should be deployed instantly.'
                dockerfile:
                  type: string
                  description: 'The Dockerfile content.'
                docker_compose_location:
                  type: string
                  description: 'The Docker Compose location.'
                docker_compose_raw:
                  type: string
                  description: 'The Docker Compose raw content.'
                docker_compose_custom_start_command:
                  type: string
                  description: 'The Docker Compose custom start command.'
                docker_compose_custom_build_command:
                  type: string
                  description: 'The Docker Compose custom build command.'
                docker_compose_domains:
                  type: array
                  description: 'The Docker Compose domains.'
                watch_paths:
                  type: string
                  description: 'The watch paths.'
                use_build_server:
                  type: boolean
                  nullable: true
                  description: 'Use build server.'
              type: object
      responses:
        '200':
          description: 'Application updated.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/applications/{uuid}/envs':
    get:
      tags:
        - Applications
      summary: 'List Envs'
      description: 'List all envs by application UUID.'
      operationId: list-envs-by-application-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'All environment variables by application UUID.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentVariable'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    post:
      tags:
        - Applications
      summary: 'Create Env'
      description: 'Create env by application UUID.'
      operationId: create-env-by-application-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Env created.'
        required: true
        content:
          application/json:
            schema:
              properties:
                key:
                  type: string
                  description: 'The key of the environment variable.'
                value:
                  type: string
                  description: 'The value of the environment variable.'
                is_preview:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is used in preview deployments.'
                is_build_time:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is used in build time.'
                is_literal:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is a literal, nothing espaced.'
                is_multiline:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is multiline.'
                is_shown_once:
                  type: boolean
                  description: "The flag to indicate if the environment variable's value is shown on the UI."
              type: object
      responses:
        '201':
          description: 'Environment variable created.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string, example: nc0k04gk8g0cgsk440g0koko }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Applications
      summary: 'Update Env'
      description: 'Update env by application UUID.'
      operationId: update-env-by-application-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Env updated.'
        required: true
        content:
          application/json:
            schema:
              required:
                - key
                - value
              properties:
                key:
                  type: string
                  description: 'The key of the environment variable.'
                value:
                  type: string
                  description: 'The value of the environment variable.'
                is_preview:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is used in preview deployments.'
                is_build_time:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is used in build time.'
                is_literal:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is a literal, nothing espaced.'
                is_multiline:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is multiline.'
                is_shown_once:
                  type: boolean
                  description: "The flag to indicate if the environment variable's value is shown on the UI."
              type: object
      responses:
        '201':
          description: 'Environment variable updated.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Environment variable updated.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/applications/{uuid}/envs/bulk':
    patch:
      tags:
        - Applications
      summary: 'Update Envs (Bulk)'
      description: 'Update multiple envs by application UUID.'
      operationId: update-envs-by-application-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Bulk envs updated.'
        required: true
        content:
          application/json:
            schema:
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    {
                      properties:
                        {
                          key:
                            { type: string, description: 'The key of the environment variable.' },
                          value:
                            { type: string, description: 'The value of the environment variable.' },
                          is_preview:
                            {
                              type: boolean,
                              description: 'The flag to indicate if the environment variable is used in preview deployments.',
                            },
                          is_build_time:
                            {
                              type: boolean,
                              description: 'The flag to indicate if the environment variable is used in build time.',
                            },
                          is_literal:
                            {
                              type: boolean,
                              description: 'The flag to indicate if the environment variable is a literal, nothing espaced.',
                            },
                          is_multiline:
                            {
                              type: boolean,
                              description: 'The flag to indicate if the environment variable is multiline.',
                            },
                          is_shown_once:
                            {
                              type: boolean,
                              description: "The flag to indicate if the environment variable's value is shown on the UI.",
                            },
                        },
                      type: object,
                    }
              type: object
      responses:
        '201':
          description: 'Environment variables updated.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Environment variables updated.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/applications/{uuid}/envs/{env_uuid}':
    delete:
      tags:
        - Applications
      summary: 'Delete Env'
      description: 'Delete env by UUID.'
      operationId: delete-env-by-application-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
        - name: env_uuid
          in: path
          description: 'UUID of the environment variable.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Environment variable deleted.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Environment variable deleted.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/applications/{uuid}/start':
    get:
      tags:
        - Applications
      summary: Start
      description: 'Start application. `Post` request is also accepted.'
      operationId: start-application-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
        - name: force
          in: query
          description: 'Force rebuild.'
          schema:
            type: boolean
            default: false
        - name: instant_deploy
          in: query
          description: 'Instant deploy (skip queuing).'
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: 'Start application.'
          content:
            application/json:
              schema:
                properties:
                  message:
                    { type: string, example: 'Deployment request queued.', description: Message. }
                  deployment_uuid:
                    { type: string, example: doogksw, description: 'UUID of the deployment.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/applications/{uuid}/stop':
    get:
      tags:
        - Applications
      summary: Stop
      description: 'Stop application. `Post` request is also accepted.'
      operationId: stop-application-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Stop application.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Application stopping request queued.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/applications/{uuid}/restart':
    get:
      tags:
        - Applications
      summary: Restart
      description: 'Restart application. `Post` request is also accepted.'
      operationId: restart-application-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Restart application.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Restart request queued.' }
                  deployment_uuid:
                    { type: string, example: doogksw, description: 'UUID of the deployment.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/applications/{uuid}/execute':
    post:
      tags:
        - Applications
      summary: 'Execute Command'
      description: "Execute a command on the application's current container."
      operationId: execute-command-application
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Command to execute.'
        required: true
        content:
          application/json:
            schema:
              properties:
                command:
                  type: string
                  description: 'Command to execute.'
              type: object
      responses:
        '200':
          description: "Execute a command on the application's current container."
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Command executed.' }
                  response: { type: string }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /databases:
    get:
      tags:
        - Databases
      summary: List
      description: 'List all databases.'
      operationId: list-databases
      responses:
        '200':
          description: 'Get all databases'
          content:
            application/json:
              schema:
                type: string
              example: 'Content is very complex. Will be implemented later.'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  '/databases/{uuid}':
    get:
      tags:
        - Databases
      summary: Get
      description: 'Get database by UUID.'
      operationId: get-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the database.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Get all databases'
          content:
            application/json:
              schema:
                type: string
              example: 'Content is very complex. Will be implemented later.'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Databases
      summary: Delete
      description: 'Delete database by UUID.'
      operationId: delete-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the database.'
          required: true
          schema:
            type: string
            format: uuid
        - name: delete_configurations
          in: query
          description: 'Delete configurations.'
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_volumes
          in: query
          description: 'Delete volumes.'
          required: false
          schema:
            type: boolean
            default: true
        - name: docker_cleanup
          in: query
          description: 'Run docker cleanup.'
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_connected_networks
          in: query
          description: 'Delete connected networks.'
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: 'Database deleted.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Database deleted.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Databases
      summary: Update
      description: 'Update database by UUID.'
      operationId: update-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the database.'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Database data'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: 'Name of the database'
                description:
                  type: string
                  description: 'Description of the database'
                image:
                  type: string
                  description: 'Docker Image of the database'
                is_public:
                  type: boolean
                  description: 'Is the database public?'
                public_port:
                  type: integer
                  description: 'Public port of the database'
                limits_memory:
                  type: string
                  description: 'Memory limit of the database'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit of the database'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness of the database'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation of the database'
                limits_cpus:
                  type: string
                  description: 'CPU limit of the database'
                limits_cpuset:
                  type: string
                  description: 'CPU set of the database'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares of the database'
                postgres_user:
                  type: string
                  description: 'PostgreSQL user'
                postgres_password:
                  type: string
                  description: 'PostgreSQL password'
                postgres_db:
                  type: string
                  description: 'PostgreSQL database'
                postgres_initdb_args:
                  type: string
                  description: 'PostgreSQL initdb args'
                postgres_host_auth_method:
                  type: string
                  description: 'PostgreSQL host auth method'
                postgres_conf:
                  type: string
                  description: 'PostgreSQL conf'
                clickhouse_admin_user:
                  type: string
                  description: 'Clickhouse admin user'
                clickhouse_admin_password:
                  type: string
                  description: 'Clickhouse admin password'
                dragonfly_password:
                  type: string
                  description: 'DragonFly password'
                redis_password:
                  type: string
                  description: 'Redis password'
                redis_conf:
                  type: string
                  description: 'Redis conf'
                keydb_password:
                  type: string
                  description: 'KeyDB password'
                keydb_conf:
                  type: string
                  description: 'KeyDB conf'
                mariadb_conf:
                  type: string
                  description: 'MariaDB conf'
                mariadb_root_password:
                  type: string
                  description: 'MariaDB root password'
                mariadb_user:
                  type: string
                  description: 'MariaDB user'
                mariadb_password:
                  type: string
                  description: 'MariaDB password'
                mariadb_database:
                  type: string
                  description: 'MariaDB database'
                mongo_conf:
                  type: string
                  description: 'Mongo conf'
                mongo_initdb_root_username:
                  type: string
                  description: 'Mongo initdb root username'
                mongo_initdb_root_password:
                  type: string
                  description: 'Mongo initdb root password'
                mongo_initdb_database:
                  type: string
                  description: 'Mongo initdb init database'
                mysql_root_password:
                  type: string
                  description: 'MySQL root password'
                mysql_password:
                  type: string
                  description: 'MySQL password'
                mysql_user:
                  type: string
                  description: 'MySQL user'
                mysql_database:
                  type: string
                  description: 'MySQL database'
                mysql_conf:
                  type: string
                  description: 'MySQL conf'
              type: object
      responses:
        '200':
          description: 'Database updated'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /databases/postgresql:
    post:
      tags:
        - Databases
      summary: 'Create (PostgreSQL)'
      description: 'Create a new PostgreSQL database.'
      operationId: create-database-postgresql
      requestBody:
        description: 'Database data'
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: 'UUID of the server'
                project_uuid:
                  type: string
                  description: 'UUID of the project'
                environment_name:
                  type: string
                  description: 'Name of the environment. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'UUID of the environment. You need to provide at least one of environment_name or environment_uuid.'
                postgres_user:
                  type: string
                  description: 'PostgreSQL user'
                postgres_password:
                  type: string
                  description: 'PostgreSQL password'
                postgres_db:
                  type: string
                  description: 'PostgreSQL database'
                postgres_initdb_args:
                  type: string
                  description: 'PostgreSQL initdb args'
                postgres_host_auth_method:
                  type: string
                  description: 'PostgreSQL host auth method'
                postgres_conf:
                  type: string
                  description: 'PostgreSQL conf'
                destination_uuid:
                  type: string
                  description: 'UUID of the destination if the server has multiple destinations'
                name:
                  type: string
                  description: 'Name of the database'
                description:
                  type: string
                  description: 'Description of the database'
                image:
                  type: string
                  description: 'Docker Image of the database'
                is_public:
                  type: boolean
                  description: 'Is the database public?'
                public_port:
                  type: integer
                  description: 'Public port of the database'
                limits_memory:
                  type: string
                  description: 'Memory limit of the database'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit of the database'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness of the database'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation of the database'
                limits_cpus:
                  type: string
                  description: 'CPU limit of the database'
                limits_cpuset:
                  type: string
                  description: 'CPU set of the database'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares of the database'
                instant_deploy:
                  type: boolean
                  description: 'Instant deploy the database'
              type: object
      responses:
        '200':
          description: 'Database updated'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /databases/clickhouse:
    post:
      tags:
        - Databases
      summary: 'Create (Clickhouse)'
      description: 'Create a new Clickhouse database.'
      operationId: create-database-clickhouse
      requestBody:
        description: 'Database data'
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: 'UUID of the server'
                project_uuid:
                  type: string
                  description: 'UUID of the project'
                environment_name:
                  type: string
                  description: 'Name of the environment. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'UUID of the environment. You need to provide at least one of environment_name or environment_uuid.'
                destination_uuid:
                  type: string
                  description: 'UUID of the destination if the server has multiple destinations'
                clickhouse_admin_user:
                  type: string
                  description: 'Clickhouse admin user'
                clickhouse_admin_password:
                  type: string
                  description: 'Clickhouse admin password'
                name:
                  type: string
                  description: 'Name of the database'
                description:
                  type: string
                  description: 'Description of the database'
                image:
                  type: string
                  description: 'Docker Image of the database'
                is_public:
                  type: boolean
                  description: 'Is the database public?'
                public_port:
                  type: integer
                  description: 'Public port of the database'
                limits_memory:
                  type: string
                  description: 'Memory limit of the database'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit of the database'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness of the database'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation of the database'
                limits_cpus:
                  type: string
                  description: 'CPU limit of the database'
                limits_cpuset:
                  type: string
                  description: 'CPU set of the database'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares of the database'
                instant_deploy:
                  type: boolean
                  description: 'Instant deploy the database'
              type: object
      responses:
        '200':
          description: 'Database updated'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /databases/dragonfly:
    post:
      tags:
        - Databases
      summary: 'Create (DragonFly)'
      description: 'Create a new DragonFly database.'
      operationId: create-database-dragonfly
      requestBody:
        description: 'Database data'
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: 'UUID of the server'
                project_uuid:
                  type: string
                  description: 'UUID of the project'
                environment_name:
                  type: string
                  description: 'Name of the environment. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'UUID of the environment. You need to provide at least one of environment_name or environment_uuid.'
                destination_uuid:
                  type: string
                  description: 'UUID of the destination if the server has multiple destinations'
                dragonfly_password:
                  type: string
                  description: 'DragonFly password'
                name:
                  type: string
                  description: 'Name of the database'
                description:
                  type: string
                  description: 'Description of the database'
                image:
                  type: string
                  description: 'Docker Image of the database'
                is_public:
                  type: boolean
                  description: 'Is the database public?'
                public_port:
                  type: integer
                  description: 'Public port of the database'
                limits_memory:
                  type: string
                  description: 'Memory limit of the database'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit of the database'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness of the database'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation of the database'
                limits_cpus:
                  type: string
                  description: 'CPU limit of the database'
                limits_cpuset:
                  type: string
                  description: 'CPU set of the database'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares of the database'
                instant_deploy:
                  type: boolean
                  description: 'Instant deploy the database'
              type: object
      responses:
        '200':
          description: 'Database updated'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /databases/redis:
    post:
      tags:
        - Databases
      summary: 'Create (Redis)'
      description: 'Create a new Redis database.'
      operationId: create-database-redis
      requestBody:
        description: 'Database data'
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: 'UUID of the server'
                project_uuid:
                  type: string
                  description: 'UUID of the project'
                environment_name:
                  type: string
                  description: 'Name of the environment. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'UUID of the environment. You need to provide at least one of environment_name or environment_uuid.'
                destination_uuid:
                  type: string
                  description: 'UUID of the destination if the server has multiple destinations'
                redis_password:
                  type: string
                  description: 'Redis password'
                redis_conf:
                  type: string
                  description: 'Redis conf'
                name:
                  type: string
                  description: 'Name of the database'
                description:
                  type: string
                  description: 'Description of the database'
                image:
                  type: string
                  description: 'Docker Image of the database'
                is_public:
                  type: boolean
                  description: 'Is the database public?'
                public_port:
                  type: integer
                  description: 'Public port of the database'
                limits_memory:
                  type: string
                  description: 'Memory limit of the database'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit of the database'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness of the database'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation of the database'
                limits_cpus:
                  type: string
                  description: 'CPU limit of the database'
                limits_cpuset:
                  type: string
                  description: 'CPU set of the database'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares of the database'
                instant_deploy:
                  type: boolean
                  description: 'Instant deploy the database'
              type: object
      responses:
        '200':
          description: 'Database updated'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /databases/keydb:
    post:
      tags:
        - Databases
      summary: 'Create (KeyDB)'
      description: 'Create a new KeyDB database.'
      operationId: create-database-keydb
      requestBody:
        description: 'Database data'
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: 'UUID of the server'
                project_uuid:
                  type: string
                  description: 'UUID of the project'
                environment_name:
                  type: string
                  description: 'Name of the environment. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'UUID of the environment. You need to provide at least one of environment_name or environment_uuid.'
                destination_uuid:
                  type: string
                  description: 'UUID of the destination if the server has multiple destinations'
                keydb_password:
                  type: string
                  description: 'KeyDB password'
                keydb_conf:
                  type: string
                  description: 'KeyDB conf'
                name:
                  type: string
                  description: 'Name of the database'
                description:
                  type: string
                  description: 'Description of the database'
                image:
                  type: string
                  description: 'Docker Image of the database'
                is_public:
                  type: boolean
                  description: 'Is the database public?'
                public_port:
                  type: integer
                  description: 'Public port of the database'
                limits_memory:
                  type: string
                  description: 'Memory limit of the database'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit of the database'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness of the database'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation of the database'
                limits_cpus:
                  type: string
                  description: 'CPU limit of the database'
                limits_cpuset:
                  type: string
                  description: 'CPU set of the database'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares of the database'
                instant_deploy:
                  type: boolean
                  description: 'Instant deploy the database'
              type: object
      responses:
        '200':
          description: 'Database updated'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /databases/mariadb:
    post:
      tags:
        - Databases
      summary: 'Create (MariaDB)'
      description: 'Create a new MariaDB database.'
      operationId: create-database-mariadb
      requestBody:
        description: 'Database data'
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: 'UUID of the server'
                project_uuid:
                  type: string
                  description: 'UUID of the project'
                environment_name:
                  type: string
                  description: 'Name of the environment. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'UUID of the environment. You need to provide at least one of environment_name or environment_uuid.'
                destination_uuid:
                  type: string
                  description: 'UUID of the destination if the server has multiple destinations'
                mariadb_conf:
                  type: string
                  description: 'MariaDB conf'
                mariadb_root_password:
                  type: string
                  description: 'MariaDB root password'
                mariadb_user:
                  type: string
                  description: 'MariaDB user'
                mariadb_password:
                  type: string
                  description: 'MariaDB password'
                mariadb_database:
                  type: string
                  description: 'MariaDB database'
                name:
                  type: string
                  description: 'Name of the database'
                description:
                  type: string
                  description: 'Description of the database'
                image:
                  type: string
                  description: 'Docker Image of the database'
                is_public:
                  type: boolean
                  description: 'Is the database public?'
                public_port:
                  type: integer
                  description: 'Public port of the database'
                limits_memory:
                  type: string
                  description: 'Memory limit of the database'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit of the database'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness of the database'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation of the database'
                limits_cpus:
                  type: string
                  description: 'CPU limit of the database'
                limits_cpuset:
                  type: string
                  description: 'CPU set of the database'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares of the database'
                instant_deploy:
                  type: boolean
                  description: 'Instant deploy the database'
              type: object
      responses:
        '200':
          description: 'Database updated'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /databases/mysql:
    post:
      tags:
        - Databases
      summary: 'Create (MySQL)'
      description: 'Create a new MySQL database.'
      operationId: create-database-mysql
      requestBody:
        description: 'Database data'
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: 'UUID of the server'
                project_uuid:
                  type: string
                  description: 'UUID of the project'
                environment_name:
                  type: string
                  description: 'Name of the environment. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'UUID of the environment. You need to provide at least one of environment_name or environment_uuid.'
                destination_uuid:
                  type: string
                  description: 'UUID of the destination if the server has multiple destinations'
                mysql_root_password:
                  type: string
                  description: 'MySQL root password'
                mysql_password:
                  type: string
                  description: 'MySQL password'
                mysql_user:
                  type: string
                  description: 'MySQL user'
                mysql_database:
                  type: string
                  description: 'MySQL database'
                mysql_conf:
                  type: string
                  description: 'MySQL conf'
                name:
                  type: string
                  description: 'Name of the database'
                description:
                  type: string
                  description: 'Description of the database'
                image:
                  type: string
                  description: 'Docker Image of the database'
                is_public:
                  type: boolean
                  description: 'Is the database public?'
                public_port:
                  type: integer
                  description: 'Public port of the database'
                limits_memory:
                  type: string
                  description: 'Memory limit of the database'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit of the database'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness of the database'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation of the database'
                limits_cpus:
                  type: string
                  description: 'CPU limit of the database'
                limits_cpuset:
                  type: string
                  description: 'CPU set of the database'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares of the database'
                instant_deploy:
                  type: boolean
                  description: 'Instant deploy the database'
              type: object
      responses:
        '200':
          description: 'Database updated'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /databases/mongodb:
    post:
      tags:
        - Databases
      summary: 'Create (MongoDB)'
      description: 'Create a new MongoDB database.'
      operationId: create-database-mongodb
      requestBody:
        description: 'Database data'
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
              properties:
                server_uuid:
                  type: string
                  description: 'UUID of the server'
                project_uuid:
                  type: string
                  description: 'UUID of the project'
                environment_name:
                  type: string
                  description: 'Name of the environment. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'UUID of the environment. You need to provide at least one of environment_name or environment_uuid.'
                destination_uuid:
                  type: string
                  description: 'UUID of the destination if the server has multiple destinations'
                mongo_conf:
                  type: string
                  description: 'MongoDB conf'
                mongo_initdb_root_username:
                  type: string
                  description: 'MongoDB initdb root username'
                name:
                  type: string
                  description: 'Name of the database'
                description:
                  type: string
                  description: 'Description of the database'
                image:
                  type: string
                  description: 'Docker Image of the database'
                is_public:
                  type: boolean
                  description: 'Is the database public?'
                public_port:
                  type: integer
                  description: 'Public port of the database'
                limits_memory:
                  type: string
                  description: 'Memory limit of the database'
                limits_memory_swap:
                  type: string
                  description: 'Memory swap limit of the database'
                limits_memory_swappiness:
                  type: integer
                  description: 'Memory swappiness of the database'
                limits_memory_reservation:
                  type: string
                  description: 'Memory reservation of the database'
                limits_cpus:
                  type: string
                  description: 'CPU limit of the database'
                limits_cpuset:
                  type: string
                  description: 'CPU set of the database'
                limits_cpu_shares:
                  type: integer
                  description: 'CPU shares of the database'
                instant_deploy:
                  type: boolean
                  description: 'Instant deploy the database'
              type: object
      responses:
        '200':
          description: 'Database updated'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  '/databases/{uuid}/start':
    get:
      tags:
        - Databases
      summary: Start
      description: 'Start database. `Post` request is also accepted.'
      operationId: start-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the database.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Start database.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Database starting request queued.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/databases/{uuid}/stop':
    get:
      tags:
        - Databases
      summary: Stop
      description: 'Stop database. `Post` request is also accepted.'
      operationId: stop-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the database.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Stop database.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Database stopping request queued.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/databases/{uuid}/restart':
    get:
      tags:
        - Databases
      summary: Restart
      description: 'Restart database. `Post` request is also accepted.'
      operationId: restart-database-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the database.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Restart database.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Database restaring request queued.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /deployments:
    get:
      tags:
        - Deployments
      summary: List
      description: 'List currently running deployments'
      operationId: list-deployments
      responses:
        '200':
          description: 'Get all currently running deployments.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationDeploymentQueue'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  '/deployments/{uuid}':
    get:
      tags:
        - Deployments
      summary: Get
      description: 'Get deployment by UUID.'
      operationId: get-deployment-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'Deployment UUID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Get deployment by UUID.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDeploymentQueue'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /deploy:
    get:
      tags:
        - Deployments
      summary: Deploy
      description: 'Deploy by tag or uuid. `Post` request also accepted.'
      operationId: deploy-by-tag-or-uuid
      parameters:
        - name: tag
          in: query
          description: 'Tag name(s). Comma separated list is also accepted.'
          schema:
            type: string
        - name: uuid
          in: query
          description: 'Resource UUID(s). Comma separated list is also accepted.'
          schema:
            type: string
        - name: force
          in: query
          description: 'Force rebuild (without cache)'
          schema:
            type: boolean
      responses:
        '200':
          description: "Get deployment(s) UUID's"
          content:
            application/json:
              schema:
                properties:
                  deployments:
                    {
                      type: array,
                      items:
                        {
                          properties:
                            {
                              message: { type: string },
                              resource_uuid: { type: string },
                              deployment_uuid: { type: string },
                            },
                          type: object,
                        },
                    }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /version:
    get:
      summary: Version
      description: 'Get Coolify version.'
      operationId: version
      responses:
        '200':
          description: 'Returns the version of the application'
          content:
            application/json:
              schema:
                type: string
              example: v4.0.0
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /enable:
    get:
      summary: 'Enable API'
      description: 'Enable API (only with root permissions).'
      operationId: enable-api
      responses:
        '200':
          description: 'Enable API.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'API enabled.' }
                type: object
        '403':
          description: 'You are not allowed to enable the API.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'You are not allowed to enable the API.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /disable:
    get:
      summary: 'Disable API'
      description: 'Disable API (only with root permissions).'
      operationId: disable-api
      responses:
        '200':
          description: 'Disable API.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'API disabled.' }
                type: object
        '403':
          description: 'You are not allowed to disable the API.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'You are not allowed to disable the API.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /health:
    get:
      summary: Healthcheck
      description: 'Healthcheck endpoint.'
      operationId: healthcheck
      responses:
        '200':
          description: 'Healthcheck endpoint.'
          content:
            application/json:
              schema:
                type: string
              example: OK
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
  /projects:
    get:
      tags:
        - Projects
      summary: List
      description: 'List projects.'
      operationId: list-projects
      responses:
        '200':
          description: 'Get all projects.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
    post:
      tags:
        - Projects
      summary: Create
      description: 'Create Project.'
      operationId: create-project
      requestBody:
        description: 'Project created.'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: 'The name of the project.'
                description:
                  type: string
                  description: 'The description of the project.'
              type: object
      responses:
        '201':
          description: 'Project created.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string, example: og888os, description: 'The UUID of the project.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/projects/{uuid}':
    get:
      tags:
        - Projects
      summary: Get
      description: 'Get project by UUID.'
      operationId: get-project-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'Project UUID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Project details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: 'Project not found.'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Projects
      summary: Delete
      description: 'Delete project by UUID.'
      operationId: delete-project-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the application.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Project deleted.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Project deleted.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Projects
      summary: Update
      description: 'Update Project.'
      operationId: update-project-by-uuid
      requestBody:
        description: 'Project updated.'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: 'The name of the project.'
                description:
                  type: string
                  description: 'The description of the project.'
              type: object
      responses:
        '201':
          description: 'Project updated.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string, example: og888os }
                  name: { type: string, example: 'Project Name' }
                  description: { type: string, example: 'Project Description' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/projects/{uuid}/{environment_name_or_uuid}':
    get:
      tags:
        - Projects
      summary: Environment
      description: 'Get environment by name or UUID.'
      operationId: get-environment-by-name-or-uuid
      parameters:
        - name: uuid
          in: path
          description: 'Project UUID'
          required: true
          schema:
            type: string
        - name: environment_name_or_uuid
          in: path
          description: 'Environment name or UUID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Environment details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /resources:
    get:
      tags:
        - Resources
      summary: List
      description: 'Get all resources.'
      operationId: list-resources
      responses:
        '200':
          description: 'Get all resources'
          content:
            application/json:
              schema:
                type: string
              example: 'Content is very complex. Will be implemented later.'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /security/keys:
    get:
      tags:
        - 'Private Keys'
      summary: List
      description: 'List all private keys.'
      operationId: list-private-keys
      responses:
        '200':
          description: 'Get all private keys.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrivateKey'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
    post:
      tags:
        - 'Private Keys'
      summary: Create
      description: 'Create a new private key.'
      operationId: create-private-key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - private_key
              properties:
                name:
                  type: string
                description:
                  type: string
                private_key:
                  type: string
              type: object
              additionalProperties: false
      responses:
        '201':
          description: "The created private key's UUID."
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
    patch:
      tags:
        - 'Private Keys'
      summary: Update
      description: 'Update a private key.'
      operationId: update-private-key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - private_key
              properties:
                name:
                  type: string
                description:
                  type: string
                private_key:
                  type: string
              type: object
              additionalProperties: false
      responses:
        '201':
          description: "The updated private key's UUID."
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  '/security/keys/{uuid}':
    get:
      tags:
        - 'Private Keys'
      summary: Get
      description: 'Get key by UUID.'
      operationId: get-private-key-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'Private Key UUID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Get all private keys.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateKey'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: 'Private Key not found.'
      security:
        - bearerAuth: []
    delete:
      tags:
        - 'Private Keys'
      summary: Delete
      description: 'Delete a private key.'
      operationId: delete-private-key-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'Private Key UUID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Private Key deleted.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Private Key deleted.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: 'Private Key not found.'
      security:
        - bearerAuth: []
  /servers:
    get:
      tags:
        - Servers
      summary: List
      description: 'List all servers.'
      operationId: list-servers
      responses:
        '200':
          description: 'Get all servers.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
    post:
      tags:
        - Servers
      summary: Create
      description: 'Create Server.'
      operationId: create-server
      requestBody:
        description: 'Server created.'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: 'My Server'
                  description: 'The name of the server.'
                description:
                  type: string
                  example: 'My Server Description'
                  description: 'The description of the server.'
                ip:
                  type: string
                  example: 127.0.0.1
                  description: 'The IP of the server.'
                port:
                  type: integer
                  example: 22
                  description: 'The port of the server.'
                user:
                  type: string
                  example: root
                  description: 'The user of the server.'
                private_key_uuid:
                  type: string
                  example: og888os
                  description: 'The UUID of the private key.'
                is_build_server:
                  type: boolean
                  example: false
                  description: 'Is build server.'
                instant_validate:
                  type: boolean
                  example: false
                  description: 'Instant validate.'
                proxy_type:
                  type: string
                  enum: [traefik, caddy, none]
                  example: traefik
                  description: 'The proxy type.'
              type: object
      responses:
        '201':
          description: 'Server created.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string, example: og888os, description: 'The UUID of the server.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/servers/{uuid}':
    get:
      tags:
        - Servers
      summary: Get
      description: 'Get server by UUID.'
      operationId: get-server-by-uuid
      parameters:
        - name: uuid
          in: path
          description: "Server's UUID"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Get server by UUID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Servers
      summary: Delete
      description: 'Delete server by UUID.'
      operationId: delete-server-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the server.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Server deleted.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Server deleted.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Servers
      summary: Update
      description: 'Update Server.'
      operationId: update-server-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'Server UUID'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Server updated.'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: 'The name of the server.'
                description:
                  type: string
                  description: 'The description of the server.'
                ip:
                  type: string
                  description: 'The IP of the server.'
                port:
                  type: integer
                  description: 'The port of the server.'
                user:
                  type: string
                  description: 'The user of the server.'
                private_key_uuid:
                  type: string
                  description: 'The UUID of the private key.'
                is_build_server:
                  type: boolean
                  description: 'Is build server.'
                instant_validate:
                  type: boolean
                  description: 'Instant validate.'
                proxy_type:
                  type: string
                  enum: [traefik, caddy, none]
                  description: 'The proxy type.'
              type: object
      responses:
        '201':
          description: 'Server updated.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/servers/{uuid}/resources':
    get:
      tags:
        - Servers
      summary: Resources
      description: 'Get resources by server.'
      operationId: get-resources-by-server-uuid
      parameters:
        - name: uuid
          in: path
          description: "Server's UUID"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Get resources by server'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    {
                      id: { type: integer },
                      uuid: { type: string },
                      name: { type: string },
                      type: { type: string },
                      created_at: { type: string },
                      updated_at: { type: string },
                      status: { type: string },
                    }
                  type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  '/servers/{uuid}/domains':
    get:
      tags:
        - Servers
      summary: Domains
      description: 'Get domains by server.'
      operationId: get-domains-by-server-uuid
      parameters:
        - name: uuid
          in: path
          description: "Server's UUID"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Get domains by server'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    { ip: { type: string }, domains: { type: array, items: { type: string } } }
                  type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  '/servers/{uuid}/validate':
    get:
      tags:
        - Servers
      summary: Validate
      description: 'Validate server by UUID.'
      operationId: validate-server-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'Server UUID'
          required: true
          schema:
            type: string
      responses:
        '201':
          description: 'Server validation started.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Validation started.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /services:
    get:
      tags:
        - Services
      summary: List
      description: 'List all services.'
      operationId: list-services
      responses:
        '200':
          description: 'Get all services'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
    post:
      tags:
        - Services
      summary: Create
      description: 'Create a one-click service'
      operationId: create-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - server_uuid
                - project_uuid
                - environment_name
                - environment_uuid
                - type
              properties:
                type:
                  description: 'The one-click service type'
                  type: string
                  enum:
                    [
                      activepieces,
                      appsmith,
                      appwrite,
                      authentik,
                      babybuddy,
                      budge,
                      changedetection,
                      chatwoot,
                      classicpress-with-mariadb,
                      classicpress-with-mysql,
                      classicpress-without-database,
                      cloudflared,
                      code-server,
                      dashboard,
                      directus,
                      directus-with-postgresql,
                      docker-registry,
                      docuseal,
                      docuseal-with-postgres,
                      dokuwiki,
                      duplicati,
                      emby,
                      embystat,
                      fider,
                      filebrowser,
                      firefly,
                      formbricks,
                      ghost,
                      gitea,
                      gitea-with-mariadb,
                      gitea-with-mysql,
                      gitea-with-postgresql,
                      glance,
                      glances,
                      glitchtip,
                      grafana,
                      grafana-with-postgresql,
                      grocy,
                      heimdall,
                      homepage,
                      jellyfin,
                      kuzzle,
                      listmonk,
                      logto,
                      mediawiki,
                      meilisearch,
                      metabase,
                      metube,
                      minio,
                      moodle,
                      n8n,
                      n8n-with-postgresql,
                      next-image-transformation,
                      nextcloud,
                      nocodb,
                      odoo,
                      openblocks,
                      pairdrop,
                      penpot,
                      phpmyadmin,
                      pocketbase,
                      posthog,
                      reactive-resume,
                      rocketchat,
                      shlink,
                      slash,
                      snapdrop,
                      statusnook,
                      stirling-pdf,
                      supabase,
                      syncthing,
                      tolgee,
                      trigger,
                      trigger-with-external-database,
                      twenty,
                      umami,
                      unleash-with-postgresql,
                      unleash-without-database,
                      uptime-kuma,
                      vaultwarden,
                      vikunja,
                      weblate,
                      whoogle,
                      wordpress-with-mariadb,
                      wordpress-with-mysql,
                      wordpress-without-database,
                    ]
                name:
                  type: string
                  maxLength: 255
                  description: 'Name of the service.'
                description:
                  type: string
                  nullable: true
                  description: 'Description of the service.'
                project_uuid:
                  type: string
                  description: 'Project UUID.'
                environment_name:
                  type: string
                  description: 'Environment name. You need to provide at least one of environment_name or environment_uuid.'
                environment_uuid:
                  type: string
                  description: 'Environment UUID. You need to provide at least one of environment_name or environment_uuid.'
                server_uuid:
                  type: string
                  description: 'Server UUID.'
                destination_uuid:
                  type: string
                  description: 'Destination UUID. Required if server has multiple destinations.'
                instant_deploy:
                  type: boolean
                  default: false
                  description: 'Start the service immediately after creation.'
              type: object
      responses:
        '201':
          description: 'Create a service.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string, description: 'Service UUID.' }
                  domains: { type: array, items: { type: string }, description: 'Service domains.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  '/services/{uuid}':
    get:
      tags:
        - Services
      summary: Get
      description: 'Get service by UUID.'
      operationId: get-service-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'Service UUID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Get a service by UUID.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Services
      summary: Delete
      description: 'Delete service by UUID.'
      operationId: delete-service-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'Service UUID'
          required: true
          schema:
            type: string
        - name: delete_configurations
          in: query
          description: 'Delete configurations.'
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_volumes
          in: query
          description: 'Delete volumes.'
          required: false
          schema:
            type: boolean
            default: true
        - name: docker_cleanup
          in: query
          description: 'Run docker cleanup.'
          required: false
          schema:
            type: boolean
            default: true
        - name: delete_connected_networks
          in: query
          description: 'Delete connected networks.'
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: 'Delete a service by UUID'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Service deletion request queued.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/services/{uuid}/envs':
    get:
      tags:
        - Services
      summary: 'List Envs'
      description: 'List all envs by service UUID.'
      operationId: list-envs-by-service-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the service.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'All environment variables by service UUID.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentVariable'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    post:
      tags:
        - Services
      summary: 'Create Env'
      description: 'Create env by service UUID.'
      operationId: create-env-by-service-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the service.'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Env created.'
        required: true
        content:
          application/json:
            schema:
              properties:
                key:
                  type: string
                  description: 'The key of the environment variable.'
                value:
                  type: string
                  description: 'The value of the environment variable.'
                is_preview:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is used in preview deployments.'
                is_build_time:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is used in build time.'
                is_literal:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is a literal, nothing espaced.'
                is_multiline:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is multiline.'
                is_shown_once:
                  type: boolean
                  description: "The flag to indicate if the environment variable's value is shown on the UI."
              type: object
      responses:
        '201':
          description: 'Environment variable created.'
          content:
            application/json:
              schema:
                properties:
                  uuid: { type: string, example: nc0k04gk8g0cgsk440g0koko }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Services
      summary: 'Update Env'
      description: 'Update env by service UUID.'
      operationId: update-env-by-service-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the service.'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Env updated.'
        required: true
        content:
          application/json:
            schema:
              required:
                - key
                - value
              properties:
                key:
                  type: string
                  description: 'The key of the environment variable.'
                value:
                  type: string
                  description: 'The value of the environment variable.'
                is_preview:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is used in preview deployments.'
                is_build_time:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is used in build time.'
                is_literal:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is a literal, nothing espaced.'
                is_multiline:
                  type: boolean
                  description: 'The flag to indicate if the environment variable is multiline.'
                is_shown_once:
                  type: boolean
                  description: "The flag to indicate if the environment variable's value is shown on the UI."
              type: object
      responses:
        '201':
          description: 'Environment variable updated.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Environment variable updated.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/services/{uuid}/envs/bulk':
    patch:
      tags:
        - Services
      summary: 'Update Envs (Bulk)'
      description: 'Update multiple envs by service UUID.'
      operationId: update-envs-by-service-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the service.'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: 'Bulk envs updated.'
        required: true
        content:
          application/json:
            schema:
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    {
                      properties:
                        {
                          key:
                            { type: string, description: 'The key of the environment variable.' },
                          value:
                            { type: string, description: 'The value of the environment variable.' },
                          is_preview:
                            {
                              type: boolean,
                              description: 'The flag to indicate if the environment variable is used in preview deployments.',
                            },
                          is_build_time:
                            {
                              type: boolean,
                              description: 'The flag to indicate if the environment variable is used in build time.',
                            },
                          is_literal:
                            {
                              type: boolean,
                              description: 'The flag to indicate if the environment variable is a literal, nothing espaced.',
                            },
                          is_multiline:
                            {
                              type: boolean,
                              description: 'The flag to indicate if the environment variable is multiline.',
                            },
                          is_shown_once:
                            {
                              type: boolean,
                              description: "The flag to indicate if the environment variable's value is shown on the UI.",
                            },
                        },
                      type: object,
                    }
              type: object
      responses:
        '201':
          description: 'Environment variables updated.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Environment variables updated.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/services/{uuid}/envs/{env_uuid}':
    delete:
      tags:
        - Services
      summary: 'Delete Env'
      description: 'Delete env by UUID.'
      operationId: delete-env-by-service-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the service.'
          required: true
          schema:
            type: string
            format: uuid
        - name: env_uuid
          in: path
          description: 'UUID of the environment variable.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Environment variable deleted.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Environment variable deleted.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/services/{uuid}/start':
    get:
      tags:
        - Services
      summary: Start
      description: 'Start service. `Post` request is also accepted.'
      operationId: start-service-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the service.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Start service.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Service starting request queued.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/services/{uuid}/stop':
    get:
      tags:
        - Services
      summary: Stop
      description: 'Stop service. `Post` request is also accepted.'
      operationId: stop-service-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the service.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Stop service.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Service stopping request queued.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/services/{uuid}/restart':
    get:
      tags:
        - Services
      summary: Restart
      description: 'Restart service. `Post` request is also accepted.'
      operationId: restart-service-by-uuid
      parameters:
        - name: uuid
          in: path
          description: 'UUID of the service.'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Restart service.'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Service restaring request queued.' }
                type: object
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /teams:
    get:
      tags:
        - Teams
      summary: List
      description: 'Get all teams.'
      operationId: list-teams
      responses:
        '200':
          description: 'List of teams.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  '/teams/{id}':
    get:
      tags:
        - Teams
      summary: Get
      description: 'Get team by TeamId.'
      operationId: get-team-by-id
      parameters:
        - name: id
          in: path
          description: 'Team ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'List of teams.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  '/teams/{id}/members':
    get:
      tags:
        - Teams
      summary: Members
      description: 'Get members by TeamId.'
      operationId: get-members-by-team-id
      parameters:
        - name: id
          in: path
          description: 'Team ID'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'List of members.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      security:
        - bearerAuth: []
  /teams/current:
    get:
      tags:
        - Teams
      summary: 'Authenticated Team'
      description: 'Get currently authenticated team.'
      operationId: get-current-team
      responses:
        '200':
          description: 'Current Team.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
  /teams/current/members:
    get:
      tags:
        - Teams
      summary: 'Authenticated Team Members'
      description: 'Get currently authenticated team members.'
      operationId: get-current-team-members
      responses:
        '200':
          description: 'Currently authenticated team members.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
      security:
        - bearerAuth: []
components:
  schemas:
    Application:
      description: 'Application model'
      properties:
        id:
          type: integer
          description: 'The application identifier in the database.'
        description:
          type: string
          nullable: true
          description: 'The application description.'
        repository_project_id:
          type: integer
          nullable: true
          description: 'The repository project identifier.'
        uuid:
          type: string
          description: 'The application UUID.'
        name:
          type: string
          description: 'The application name.'
        fqdn:
          type: string
          nullable: true
          description: 'The application domains.'
        config_hash:
          type: string
          description: 'Configuration hash.'
        git_repository:
          type: string
          description: 'Git repository URL.'
        git_branch:
          type: string
          description: 'Git branch.'
        git_commit_sha:
          type: string
          description: 'Git commit SHA.'
        git_full_url:
          type: string
          nullable: true
          description: 'Git full URL.'
        docker_registry_image_name:
          type: string
          nullable: true
          description: 'Docker registry image name.'
        docker_registry_image_tag:
          type: string
          nullable: true
          description: 'Docker registry image tag.'
        build_pack:
          type: string
          description: 'Build pack.'
          enum:
            - nixpacks
            - static
            - dockerfile
            - dockercompose
        static_image:
          type: string
          description: 'Static image used when static site is deployed.'
        install_command:
          type: string
          description: 'Install command.'
        build_command:
          type: string
          description: 'Build command.'
        start_command:
          type: string
          description: 'Start command.'
        ports_exposes:
          type: string
          description: 'Ports exposes.'
        ports_mappings:
          type: string
          nullable: true
          description: 'Ports mappings.'
        base_directory:
          type: string
          description: 'Base directory for all commands.'
        publish_directory:
          type: string
          description: 'Publish directory.'
        health_check_enabled:
          type: boolean
          description: 'Health check enabled.'
        health_check_path:
          type: string
          description: 'Health check path.'
        health_check_port:
          type: string
          nullable: true
          description: 'Health check port.'
        health_check_host:
          type: string
          nullable: true
          description: 'Health check host.'
        health_check_method:
          type: string
          description: 'Health check method.'
        health_check_return_code:
          type: integer
          description: 'Health check return code.'
        health_check_scheme:
          type: string
          description: 'Health check scheme.'
        health_check_response_text:
          type: string
          nullable: true
          description: 'Health check response text.'
        health_check_interval:
          type: integer
          description: 'Health check interval in seconds.'
        health_check_timeout:
          type: integer
          description: 'Health check timeout in seconds.'
        health_check_retries:
          type: integer
          description: 'Health check retries count.'
        health_check_start_period:
          type: integer
          description: 'Health check start period in seconds.'
        limits_memory:
          type: string
          description: 'Memory limit.'
        limits_memory_swap:
          type: string
          description: 'Memory swap limit.'
        limits_memory_swappiness:
          type: integer
          description: 'Memory swappiness.'
        limits_memory_reservation:
          type: string
          description: 'Memory reservation.'
        limits_cpus:
          type: string
          description: 'CPU limit.'
        limits_cpuset:
          type: string
          nullable: true
          description: 'CPU set.'
        limits_cpu_shares:
          type: integer
          description: 'CPU shares.'
        status:
          type: string
          description: 'Application status.'
        preview_url_template:
          type: string
          description: 'Preview URL template.'
        destination_type:
          type: string
          description: 'Destination type.'
        destination_id:
          type: integer
          description: 'Destination identifier.'
        source_id:
          type: integer
          nullable: true
          description: 'Source identifier.'
        private_key_id:
          type: integer
          nullable: true
          description: 'Private key identifier.'
        environment_id:
          type: integer
          description: 'Environment identifier.'
        dockerfile:
          type: string
          nullable: true
          description: 'Dockerfile content. Used for dockerfile build pack.'
        dockerfile_location:
          type: string
          description: 'Dockerfile location.'
        custom_labels:
          type: string
          nullable: true
          description: 'Custom labels.'
        dockerfile_target_build:
          type: string
          nullable: true
          description: 'Dockerfile target build.'
        manual_webhook_secret_github:
          type: string
          nullable: true
          description: 'Manual webhook secret for GitHub.'
        manual_webhook_secret_gitlab:
          type: string
          nullable: true
          description: 'Manual webhook secret for GitLab.'
        manual_webhook_secret_bitbucket:
          type: string
          nullable: true
          description: 'Manual webhook secret for Bitbucket.'
        manual_webhook_secret_gitea:
          type: string
          nullable: true
          description: 'Manual webhook secret for Gitea.'
        docker_compose_location:
          type: string
          description: 'Docker compose location.'
        docker_compose:
          type: string
          nullable: true
          description: 'Docker compose content. Used for docker compose build pack.'
        docker_compose_raw:
          type: string
          nullable: true
          description: 'Docker compose raw content.'
        docker_compose_domains:
          type: string
          nullable: true
          description: 'Docker compose domains.'
        docker_compose_custom_start_command:
          type: string
          nullable: true
          description: 'Docker compose custom start command.'
        docker_compose_custom_build_command:
          type: string
          nullable: true
          description: 'Docker compose custom build command.'
        swarm_replicas:
          type: integer
          nullable: true
          description: 'Swarm replicas. Only used for swarm deployments.'
        swarm_placement_constraints:
          type: string
          nullable: true
          description: 'Swarm placement constraints. Only used for swarm deployments.'
        custom_docker_run_options:
          type: string
          nullable: true
          description: 'Custom docker run options.'
        post_deployment_command:
          type: string
          nullable: true
          description: 'Post deployment command.'
        post_deployment_command_container:
          type: string
          nullable: true
          description: 'Post deployment command container.'
        pre_deployment_command:
          type: string
          nullable: true
          description: 'Pre deployment command.'
        pre_deployment_command_container:
          type: string
          nullable: true
          description: 'Pre deployment command container.'
        watch_paths:
          type: string
          nullable: true
          description: 'Watch paths.'
        custom_healthcheck_found:
          type: boolean
          description: 'Custom healthcheck found.'
        redirect:
          type: string
          nullable: true
          description: 'How to set redirect with Traefik / Caddy. www<->non-www.'
          enum:
            - www
            - non-www
            - both
        created_at:
          type: string
          format: date-time
          description: 'The date and time when the application was created.'
        updated_at:
          type: string
          format: date-time
          description: 'The date and time when the application was last updated.'
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: 'The date and time when the application was deleted.'
        compose_parsing_version:
          type: string
          description: 'How Coolify parse the compose file.'
        custom_nginx_configuration:
          type: string
          nullable: true
          description: 'Custom Nginx configuration base64 encoded.'
      type: object
    ApplicationDeploymentQueue:
      description: 'Project model'
      properties:
        id:
          type: integer
        application_id:
          type: string
        deployment_uuid:
          type: string
        pull_request_id:
          type: integer
        force_rebuild:
          type: boolean
        commit:
          type: string
        status:
          type: string
        is_webhook:
          type: boolean
        is_api:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
        logs:
          type: string
        current_process_id:
          type: string
        restart_only:
          type: boolean
        git_type:
          type: string
        server_id:
          type: integer
        application_name:
          type: string
        server_name:
          type: string
        deployment_url:
          type: string
        destination_id:
          type: string
        only_this_server:
          type: boolean
        rollback:
          type: boolean
        commit_message:
          type: string
      type: object
    Environment:
      description: 'Environment model'
      properties:
        id:
          type: integer
        name:
          type: string
        project_id:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
        description:
          type: string
      type: object
    EnvironmentVariable:
      description: 'Environment Variable model'
      properties:
        id:
          type: integer
        uuid:
          type: string
        resourceable_type:
          type: string
        resourceable_id:
          type: integer
        is_build_time:
          type: boolean
        is_literal:
          type: boolean
        is_multiline:
          type: boolean
        is_preview:
          type: boolean
        is_shared:
          type: boolean
        is_shown_once:
          type: boolean
        key:
          type: string
        value:
          type: string
        real_value:
          type: string
        version:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      type: object
    PrivateKey:
      description: 'Private Key model'
      properties:
        id:
          type: integer
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        private_key:
          type: string
          format: private-key
        is_git_related:
          type: boolean
        team_id:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
      type: object
    Project:
      description: 'Project model'
      properties:
        id:
          type: integer
        uuid:
          type: string
        name:
          type: string
        description:
          type: string
        environments:
          description: 'The environments of the project.'
          type: array
          items:
            $ref: '#/components/schemas/Environment'
      type: object
    Server:
      description: 'Server model'
      properties:
        id:
          type: integer
          description: 'The server ID.'
        uuid:
          type: string
          description: 'The server UUID.'
        name:
          type: string
          description: 'The server name.'
        description:
          type: string
          description: 'The server description.'
        ip:
          type: string
          description: 'The IP address.'
        user:
          type: string
          description: 'The user.'
        port:
          type: integer
          description: 'The port number.'
        proxy:
          type: object
          description: 'The proxy configuration.'
        proxy_type:
          type: string
          enum:
            - traefik
            - caddy
            - none
          description: 'The proxy type.'
        high_disk_usage_notification_sent:
          type: boolean
          description: 'The flag to indicate if the high disk usage notification has been sent.'
        unreachable_notification_sent:
          type: boolean
          description: 'The flag to indicate if the unreachable notification has been sent.'
        unreachable_count:
          type: integer
          description: 'The unreachable count for your server.'
        validation_logs:
          type: string
          description: 'The validation logs.'
        log_drain_notification_sent:
          type: boolean
          description: 'The flag to indicate if the log drain notification has been sent.'
        swarm_cluster:
          type: string
          description: 'The swarm cluster configuration.'
        settings:
          $ref: '#/components/schemas/ServerSetting'
      type: object
    ServerSetting:
      description: 'Server Settings model'
      properties:
        id:
          type: integer
        concurrent_builds:
          type: integer
        dynamic_timeout:
          type: integer
        force_disabled:
          type: boolean
        force_server_cleanup:
          type: boolean
        is_build_server:
          type: boolean
        is_cloudflare_tunnel:
          type: boolean
        is_jump_server:
          type: boolean
        is_logdrain_axiom_enabled:
          type: boolean
        is_logdrain_custom_enabled:
          type: boolean
        is_logdrain_highlight_enabled:
          type: boolean
        is_logdrain_newrelic_enabled:
          type: boolean
        is_metrics_enabled:
          type: boolean
        is_reachable:
          type: boolean
        is_sentinel_enabled:
          type: boolean
        is_swarm_manager:
          type: boolean
        is_swarm_worker:
          type: boolean
        is_usable:
          type: boolean
        logdrain_axiom_api_key:
          type: string
        logdrain_axiom_dataset_name:
          type: string
        logdrain_custom_config:
          type: string
        logdrain_custom_config_parser:
          type: string
        logdrain_highlight_project_id:
          type: string
        logdrain_newrelic_base_uri:
          type: string
        logdrain_newrelic_license_key:
          type: string
        sentinel_metrics_history_days:
          type: integer
        sentinel_metrics_refresh_rate_seconds:
          type: integer
        sentinel_token:
          type: string
        docker_cleanup_frequency:
          type: string
        docker_cleanup_threshold:
          type: integer
        server_id:
          type: integer
        wildcard_domain:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        delete_unused_volumes:
          type: boolean
          description: 'The flag to indicate if the unused volumes should be deleted.'
        delete_unused_networks:
          type: boolean
          description: 'The flag to indicate if the unused networks should be deleted.'
      type: object
    Service:
      description: 'Service model'
      properties:
        id:
          type: integer
          description: 'The unique identifier of the service. Only used for database identification.'
        uuid:
          type: string
          description: 'The unique identifier of the service.'
        name:
          type: string
          description: 'The name of the service.'
        environment_id:
          type: integer
          description: 'The unique identifier of the environment where the service is attached to.'
        server_id:
          type: integer
          description: 'The unique identifier of the server where the service is running.'
        description:
          type: string
          description: 'The description of the service.'
        docker_compose_raw:
          type: string
          description: 'The raw docker-compose.yml file of the service.'
        docker_compose:
          type: string
          description: 'The docker-compose.yml file that is parsed and modified by Coolify.'
        destination_type:
          type: string
          description: 'Destination type.'
        destination_id:
          type: integer
          description: 'The unique identifier of the destination where the service is running.'
        connect_to_docker_network:
          type: boolean
          description: 'The flag to connect the service to the predefined Docker network.'
        is_container_label_escape_enabled:
          type: boolean
          description: 'The flag to enable the container label escape.'
        is_container_label_readonly_enabled:
          type: boolean
          description: 'The flag to enable the container label readonly.'
        config_hash:
          type: string
          description: 'The hash of the service configuration.'
        service_type:
          type: string
          description: 'The type of the service.'
        created_at:
          type: string
          description: 'The date and time when the service was created.'
        updated_at:
          type: string
          description: 'The date and time when the service was last updated.'
        deleted_at:
          type: string
          description: 'The date and time when the service was deleted.'
      type: object
    Team:
      description: 'Team model'
      properties:
        id:
          type: integer
          description: 'The unique identifier of the team.'
        name:
          type: string
          description: 'The name of the team.'
        description:
          type: string
          description: 'The description of the team.'
        personal_team:
          type: boolean
          description: 'Whether the team is personal or not.'
        created_at:
          type: string
          description: 'The date and time the team was created.'
        updated_at:
          type: string
          description: 'The date and time the team was last updated.'
        show_boarding:
          type: boolean
          description: 'Whether to show the boarding screen or not.'
        custom_server_limit:
          type: string
          description: 'The custom server limit.'
        members:
          description: 'The members of the team.'
          type: array
          items:
            $ref: '#/components/schemas/User'
      type: object
    User:
      description: 'User model'
      properties:
        id:
          type: integer
          description: 'The user identifier in the database.'
        name:
          type: string
          description: 'The user name.'
        email:
          type: string
          description: 'The user email.'
        email_verified_at:
          type: string
          description: 'The date when the user email was verified.'
        created_at:
          type: string
          description: 'The date when the user was created.'
        updated_at:
          type: string
          description: 'The date when the user was updated.'
        two_factor_confirmed_at:
          type: string
          description: 'The date when the user two factor was confirmed.'
        force_password_reset:
          type: boolean
          description: 'The flag to force the user to reset the password.'
        marketing_emails:
          type: boolean
          description: 'The flag to receive marketing emails.'
      type: object
  responses:
    '400':
      description: 'Invalid token.'
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
                example: 'Invalid token.'
            type: object
    '401':
      description: Unauthenticated.
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
                example: Unauthenticated.
            type: object
    '404':
      description: 'Resource not found.'
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
                example: 'Resource not found.'
            type: object
  securitySchemes:
    bearerAuth:
      type: http
      description: 'Go to `Keys & Tokens` / `API tokens` and create a new token. Use the token as the bearer token.'
      scheme: bearer
tags:
  - name: Applications
    description: Applications
  - name: Databases
    description: Databases
  - name: Deployments
    description: Deployments
  - name: Projects
    description: Projects
  - name: Resources
    description: Resources
  - name: 'Private Keys'
    description: 'Private Keys'
  - name: Servers
    description: Servers
  - name: Services
    description: Services
  - name: Teams
    description: Teams
</file>

<file path="docs/mcp-example-clients.md">
# Example Clients

Source: https://modelcontextprotocol.io/clients

A list of applications that support MCP integrations

This page provides an overview of applications that support the Model Context Protocol (MCP). Each client may support different MCP features, allowing for varying levels of integration with MCP servers.

## Feature support matrix

| Client                               | [Resources] | [Prompts] | [Tools] | [Sampling] | Roots | Notes                                                              |
| ------------------------------------ | ----------- | --------- | ------- | ---------- | ----- | ------------------------------------------------------------------ |
| [Claude Desktop App][Claude]         | ✅          | ✅        | ✅      | ❌         | ❌    | Full support for all MCP features                                  |
| [5ire][5ire]                         | ❌          | ❌        | ✅      | ❌         | ❌    | Supports tools.                                                    |
| [BeeAI Framework][BeeAI Framework]   | ❌          | ❌        | ✅      | ❌         | ❌    | Supports tools in agentic workflows.                               |
| [Cline][Cline]                       | ✅          | ❌        | ✅      | ❌         | ❌    | Supports tools and resources.                                      |
| [Continue][Continue]                 | ✅          | ✅        | ✅      | ❌         | ❌    | Full support for all MCP features                                  |
| [Cursor][Cursor]                     | ❌          | ❌        | ✅      | ❌         | ❌    | Supports tools.                                                    |
| [Emacs Mcp][Mcp.el]                  | ❌          | ❌        | ✅      | ❌         | ❌    | Supports tools in Emacs.                                           |
| [Firebase Genkit][Genkit]            | ⚠️          | ✅        | ✅      | ❌         | ❌    | Supports resource list and lookup through tools.                   |
| [GenAIScript][GenAIScript]           | ❌          | ❌        | ✅      | ❌         | ❌    | Supports tools.                                                    |
| [Goose][Goose]                       | ❌          | ❌        | ✅      | ❌         | ❌    | Supports tools.                                                    |
| [LibreChat][LibreChat]               | ❌          | ❌        | ✅      | ❌         | ❌    | Supports tools for Agents                                          |
| [mcp-agent][mcp-agent]               | ❌          | ❌        | ✅      | ⚠️         | ❌    | Supports tools, server connection management, and agent workflows. |
| [Roo Code][Roo Code]                 | ✅          | ❌        | ✅      | ❌         | ❌    | Supports tools and resources.                                      |
| [Sourcegraph Cody][Cody]             | ✅          | ❌        | ❌      | ❌         | ❌    | Supports resources through OpenCTX                                 |
| [Superinterface][Superinterface]     | ❌          | ❌        | ✅      | ❌         | ❌    | Supports tools                                                     |
| [TheiaAI/TheiaIDE][TheiaAI/TheiaIDE] | ❌          | ❌        | ✅      | ❌         | ❌    | Supports tools for Agents in Theia AI and the AI-powered Theia IDE |
| [Windsurf Editor][Windsurf]          | ❌          | ❌        | ✅      | ❌         | ❌    | Supports tools with AI Flow for collaborative development.         |
| [Zed][Zed]                           | ❌          | ✅        | ❌      | ❌         | ❌    | Prompts appear as slash commands                                   |
| \[OpenSumi]\[OpenSumi]               | ❌          | ❌        | ✅      | ❌         | ❌    | Supports tools in OpenSumi                                         |

[Claude]: https://claude.ai/download
[Cursor]: https://cursor.com
[Zed]: https://zed.dev
[Cody]: https://sourcegraph.com/cody
[Genkit]: https://github.com/firebase/genkit
[Continue]: https://github.com/continuedev/continue
[GenAIScript]: https://microsoft.github.io/genaiscript/reference/scripts/mcp-tools/
[Cline]: https://github.com/cline/cline
[LibreChat]: https://github.com/danny-avila/LibreChat
[TheiaAI/TheiaIDE]: https://eclipsesource.com/blogs/2024/12/19/theia-ide-and-theia-ai-support-mcp/
[Superinterface]: https://superinterface.ai
[5ire]: https://github.com/nanbingxyz/5ire
[BeeAI Framework]: https://i-am-bee.github.io/beeai-framework
[mcp-agent]: https://github.com/lastmile-ai/mcp-agent
[Mcp.el]: https://github.com/lizqwerscott/mcp.el
[Roo Code]: https://roocode.com
[Goose]: https://block.github.io/goose/docs/goose-architecture/#interoperability-with-extensions
[Windsurf]: https://codeium.com/windsurf
[Resources]: https://modelcontextprotocol.io/docs/concepts/resources
[Prompts]: https://modelcontextprotocol.io/docs/concepts/prompts
[Tools]: https://modelcontextprotocol.io/docs/concepts/tools
[Sampling]: https://modelcontextprotocol.io/docs/concepts/sampling

## Client details

### Claude Desktop App

The Claude desktop application provides comprehensive support for MCP, enabling deep integration with local tools and data sources.

**Key features:**

- Full support for resources, allowing attachment of local files and data
- Support for prompt templates
- Tool integration for executing commands and scripts
- Local server connections for enhanced privacy and security

> ⓘ Note: The Claude.ai web application does not currently support MCP. MCP features are only available in the desktop application.

### 5ire

[5ire](https://github.com/nanbingxyz/5ire) is an open source cross-platform desktop AI assistant that supports tools through MCP servers.

**Key features:**

- Built-in MCP servers can be quickly enabled and disabled.
- Users can add more servers by modifying the configuration file.
- It is open-source and user-friendly, suitable for beginners.
- Future support for MCP will be continuously improved.

### BeeAI Framework

[BeeAI Framework](https://i-am-bee.github.io/beeai-framework) is an open-source framework for building, deploying, and serving powerful agentic workflows at scale. The framework includes the **MCP Tool**, a native feature that simplifies the integration of MCP servers into agentic workflows.

**Key features:**

- Seamlessly incorporate MCP tools into agentic workflows.
- Quickly instantiate framework-native tools from connected MCP client(s).
- Planned future support for agentic MCP capabilities.

**Learn more:**

- [Example of using MCP tools in agentic workflow](https://i-am-bee.github.io/beeai-framework/#/typescript/tools?id=using-the-mcptool-class)

### Cline

[Cline](https://github.com/cline/cline) is an autonomous coding agent in VS Code that edits files, runs commands, uses a browser, and more–with your permission at each step.

**Key features:**

- Create and add tools through natural language (e.g. "add a tool that searches the web")
- Share custom MCP servers Cline creates with others via the `~/Documents/Cline/MCP` directory
- Displays configured MCP servers along with their tools, resources, and any error logs

### Continue

[Continue](https://github.com/continuedev/continue) is an open-source AI code assistant, with built-in support for all MCP features.

**Key features**

- Type "@" to mention MCP resources
- Prompt templates surface as slash commands
- Use both built-in and MCP tools directly in chat
- Supports VS Code and JetBrains IDEs, with any LLM

### Cursor

[Cursor](https://docs.cursor.com/advanced/model-context-protocol) is an AI code editor.

**Key Features**:

- Support for MCP tools in Cursor Composer
- Support for both STDIO and SSE

### Emacs Mcp

[Emacs Mcp](https://github.com/lizqwerscott/mcp.el) is an Emacs client designed to interface with MCP servers, enabling seamless connections and interactions. It provides MCP tool invocation support for AI plugins like [gptel](https://github.com/karthink/gptel) and [llm](https://github.com/ahyatt/llm), adhering to Emacs' standard tool invocation format. This integration enhances the functionality of AI tools within the Emacs ecosystem.

**Key features:**

- Provides MCP tool support for Emacs.

### Firebase Genkit

[Genkit](https://github.com/firebase/genkit) is Firebase's SDK for building and integrating GenAI features into applications. The [genkitx-mcp](https://github.com/firebase/genkit/tree/main/js/plugins/mcp) plugin enables consuming MCP servers as a client or creating MCP servers from Genkit tools and prompts.

**Key features:**

- Client support for tools and prompts (resources partially supported)
- Rich discovery with support in Genkit's Dev UI playground
- Seamless interoperability with Genkit's existing tools and prompts
- Works across a wide variety of GenAI models from top providers

### GenAIScript

Programmatically assemble prompts for LLMs using [GenAIScript](https://microsoft.github.io/genaiscript/) (in JavaScript). Orchestrate LLMs, tools, and data in JavaScript.

**Key features:**

- JavaScript toolbox to work with prompts
- Abstraction to make it easy and productive
- Seamless Visual Studio Code integration

### Goose

[Goose](https://github.com/block/goose) is an open source AI agent that supercharges your software development by automating coding tasks.

**Key features:**

- Expose MCP functionality to Goose through tools.
- MCPs can be installed directly via the [extensions directory](https://block.github.io/goose/v1/extensions/), CLI, or UI.
- Goose allows you to extend its functionality by [building your own MCP servers](https://block.github.io/goose/docs/tutorials/custom-extensions).
- Includes built-in tools for development, web scraping, automation, memory, and integrations with JetBrains and Google Drive.

### LibreChat

[LibreChat](https://github.com/danny-avila/LibreChat) is an open-source, customizable AI chat UI that supports multiple AI providers, now including MCP integration.

**Key features:**

- Extend current tool ecosystem, including [Code Interpreter](https://www.librechat.ai/docs/features/code_interpreter) and Image generation tools, through MCP servers
- Add tools to customizable [Agents](https://www.librechat.ai/docs/features/agents), using a variety of LLMs from top providers
- Open-source and self-hostable, with secure multi-user support
- Future roadmap includes expanded MCP feature support

### mcp-agent

[mcp-agent] is a simple, composable framework to build agents using Model Context Protocol.

**Key features:**

- Automatic connection management of MCP servers.
- Expose tools from multiple servers to an LLM.
- Implements every pattern defined in [Building Effective Agents](https://www.anthropic.com/research/building-effective-agents).
- Supports workflow pause/resume signals, such as waiting for human feedback.

### Roo Code

[Roo Code](https://roocode.com) enables AI coding assistance via MCP.

**Key features:**

- Support for MCP tools and resources
- Integration with development workflows
- Extensible AI capabilities

### Sourcegraph Cody

[Cody](https://openctx.org/docs/providers/modelcontextprotocol) is Sourcegraph's AI coding assistant, which implements MCP through OpenCTX.

**Key features:**

- Support for MCP resources
- Integration with Sourcegraph's code intelligence
- Uses OpenCTX as an abstraction layer
- Future support planned for additional MCP features

### Superinterface

[Superinterface](https://superinterface.ai) is AI infrastructure and a developer platform to build in-app AI assistants with support for MCP, interactive components, client-side function calling and more.

**Key features:**

- Use tools from MCP servers in assistants embedded via React components or script tags
- SSE transport support
- Use any AI model from any AI provider (OpenAI, Anthropic, Ollama, others)

### TheiaAI/TheiaIDE

[Theia AI](https://eclipsesource.com/blogs/2024/10/07/introducing-theia-ai/) is a framework for building AI-enhanced tools and IDEs. The [AI-powered Theia IDE](https://eclipsesource.com/blogs/2024/10/08/introducting-ai-theia-ide/) is an open and flexible development environment built on Theia AI.

**Key features:**

- **Tool Integration**: Theia AI enables AI agents, including those in the Theia IDE, to utilize MCP servers for seamless tool interaction.
- **Customizable Prompts**: The Theia IDE allows users to define and adapt prompts, dynamically integrating MCP servers for tailored workflows.
- **Custom agents**: The Theia IDE supports creating custom agents that leverage MCP capabilities, enabling users to design dedicated workflows on the fly.

Theia AI and Theia IDE's MCP integration provide users with flexibility, making them powerful platforms for exploring and adapting MCP.

**Learn more:**

- [Theia IDE and Theia AI MCP Announcement](https://eclipsesource.com/blogs/2024/12/19/theia-ide-and-theia-ai-support-mcp/)
- [Download the AI-powered Theia IDE](https://theia-ide.org/)

### Windsurf Editor

[Windsurf Editor](https://codeium.com/windsurf) is an agentic IDE that combines AI assistance with developer workflows. It features an innovative AI Flow system that enables both collaborative and independent AI interactions while maintaining developer control.

**Key features:**

- Revolutionary AI Flow paradigm for human-AI collaboration
- Intelligent code generation and understanding
- Rich development tools with multi-model support

### Zed

[Zed](https://zed.dev/docs/assistant/model-context-protocol) is a high-performance code editor with built-in MCP support, focusing on prompt templates and tool integration.

**Key features:**

- Prompt templates surface as slash commands in the editor
- Tool integration for enhanced coding workflows
- Tight integration with editor features and workspace context
- Does not support MCP resources

### OpenSumi

[OpenSumi](https://github.com/opensumi/core) is a framework helps you quickly build AI Native IDE products.

**Key features:**

- Supports MCP tools in OpenSumi
- Supports built-in IDE MCP servers and custom MCP servers

## Adding MCP support to your application

If you've added MCP support to your application, we encourage you to submit a pull request to add it to this list. MCP integration can provide your users with powerful contextual AI capabilities and make your application part of the growing MCP ecosystem.

Benefits of adding MCP support:

- Enable users to bring their own context and tools
- Join a growing ecosystem of interoperable AI applications
- Provide users with flexible integration options
- Support local-first AI workflows

To get started with implementing MCP in your application, check out our [Python](https://github.com/modelcontextprotocol/python-sdk) or [TypeScript SDK Documentation](https://github.com/modelcontextprotocol/typescript-sdk)

## Updates and corrections

This list is maintained by the community. If you notice any inaccuracies or would like to update information about MCP support in your application, please submit a pull request or [open an issue in our documentation repository](https://github.com/modelcontextprotocol/docs/issues).

# Contributing

Source: https://modelcontextprotocol.io/development/contributing

How to participate in Model Context Protocol development

We welcome contributions from the community! Please review our [contributing guidelines](https://github.com/modelcontextprotocol/.github/blob/main/CONTRIBUTING.md) for details on how to submit changes.

All contributors must adhere to our [Code of Conduct](https://github.com/modelcontextprotocol/.github/blob/main/CODE_OF_CONDUCT.md).

For questions and discussions, please use [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions).

# Roadmap

Source: https://modelcontextprotocol.io/development/roadmap

Our plans for evolving Model Context Protocol (H1 2025)

The Model Context Protocol is rapidly evolving. This page outlines our current thinking on key priorities and future direction for **the first half of 2025**, though these may change significantly as the project develops.

<Note>The ideas presented here are not commitments—we may solve these challenges differently than described, or some may not materialize at all. This is also not an _exhaustive_ list; we may incorporate work that isn't mentioned here.</Note>

We encourage community participation! Each section links to relevant discussions where you can learn more and contribute your thoughts.

## Remote MCP Support

Our top priority is enabling [remote MCP connections](https://github.com/modelcontextprotocol/specification/discussions/102), allowing clients to securely connect to MCP servers over the internet. Key initiatives include:

- [**Authentication & Authorization**](https://github.com/modelcontextprotocol/specification/discussions/64): Adding standardized auth capabilities, particularly focused on OAuth 2.0 support.

- [**Service Discovery**](https://github.com/modelcontextprotocol/specification/discussions/69): Defining how clients can discover and connect to remote MCP servers.

- [**Stateless Operations**](https://github.com/modelcontextprotocol/specification/discussions/102): Thinking about whether MCP could encompass serverless environments too, where they will need to be mostly stateless.

## Reference Implementations

To help developers build with MCP, we want to offer documentation for:

- **Client Examples**: Comprehensive reference client implementation(s), demonstrating all protocol features
- **Protocol Drafting**: Streamlined process for proposing and incorporating new protocol features

## Distribution & Discovery

Looking ahead, we're exploring ways to make MCP servers more accessible. Some areas we may investigate include:

- **Package Management**: Standardized packaging format for MCP servers
- **Installation Tools**: Simplified server installation across MCP clients
- **Sandboxing**: Improved security through server isolation
- **Server Registry**: A common directory for discovering available MCP servers

## Agent Support

We're expanding MCP's capabilities for [complex agentic workflows](https://github.com/modelcontextprotocol/specification/discussions/111), particularly focusing on:

- [**Hierarchical Agent Systems**](https://github.com/modelcontextprotocol/specification/discussions/94): Improved support for trees of agents through namespacing and topology awareness.

- [**Interactive Workflows**](https://github.com/modelcontextprotocol/specification/issues/97): Better handling of user permissions and information requests across agent hierarchies, and ways to send output to users instead of models.

- [**Streaming Results**](https://github.com/modelcontextprotocol/specification/issues/117): Real-time updates from long-running agent operations.

## Broader Ecosystem

We're also invested in:

- **Community-Led Standards Development**: Fostering a collaborative ecosystem where all AI providers can help shape MCP as an open standard through equal participation and shared governance, ensuring it meets the needs of diverse AI applications and use cases.
- [**Additional Modalities**](https://github.com/modelcontextprotocol/specification/discussions/88): Expanding beyond text to support audio, video, and other formats.
- \[**Standardization**] Considering standardization through a standardization body.

## Get Involved

We welcome community participation in shaping MCP's future. Visit our [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions) to join the conversation and contribute your ideas.

# What's New

Source: https://modelcontextprotocol.io/development/updates

The latest updates and improvements to MCP

<Update label="2025-02-14" description="Java SDK released">
  * We're excited to announce that the Java SDK developed by Spring AI at VMware Tanzu is now
    the official [Java SDK](https://github.com/modelcontextprotocol/java-sdk) for MCP.
    This joins our existing Kotlin SDK in our growing list of supported languages.
    The Spring AI team will maintain the SDK as an integral part of the Model Context Protocol
    organization. We're thrilled to welcome them to the MCP community!
</Update>

<Update label="2025-01-27" description="Python SDK 1.2.1">
  * Version [1.2.1](https://github.com/modelcontextprotocol/python-sdk/releases/tag/v1.2.1) of the MCP Python SDK has been released,
    delivering important stability improvements and bug fixes.
</Update>

<Update label="2025-01-18" description="SDK and Server Improvements">
  * Simplified, express-like API in the [TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk)
  * Added 8 new clients to the [clients page](https://modelcontextprotocol.io/clients)
</Update>

<Update label="2025-01-03" description="SDK and Server Improvements">
  * FastMCP API in the [Python SDK](https://github.com/modelcontextprotocol/python-sdk)
  * Dockerized MCP servers in the [servers repo](https://github.com/modelcontextprotocol/servers)
</Update>

<Update label="2024-12-21" description="Kotlin SDK released">
  * Jetbrains released a Kotlin SDK for MCP!
  * For a sample MCP Kotlin server, check out [this repository](https://github.com/modelcontextprotocol/kotlin-sdk/tree/main/samples/kotlin-mcp-server)
</Update>

# Core architecture

Source: https://modelcontextprotocol.io/docs/concepts/architecture

Understand how MCP connects clients, servers, and LLMs

The Model Context Protocol (MCP) is built on a flexible, extensible architecture that enables seamless communication between LLM applications and integrations. This document covers the core architectural components and concepts.

## Overview

MCP follows a client-server architecture where:

- **Hosts** are LLM applications (like Claude Desktop or IDEs) that initiate connections
- **Clients** maintain 1:1 connections with servers, inside the host application
- **Servers** provide context, tools, and prompts to clients

```mermaid
flowchart LR
    subgraph "&nbsp;Host&nbsp;"
        client1[MCP Client]
        client2[MCP Client]
    end
    subgraph "Server Process"
        server1[MCP Server]
    end
    subgraph "Server Process"
        server2[MCP Server]
    end

    client1 <-->|Transport Layer| server1
    client2 <-->|Transport Layer| server2
```

## Core components

### Protocol layer

The protocol layer handles message framing, request/response linking, and high-level communication patterns.

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    class Protocol<Request, Notification, Result> {
        // Handle incoming requests
        setRequestHandler<T>(schema: T, handler: (request: T, extra: RequestHandlerExtra) => Promise<Result>): void

        // Handle incoming notifications
        setNotificationHandler<T>(schema: T, handler: (notification: T) => Promise<void>): void

        // Send requests and await responses
        request<T>(request: Request, schema: T, options?: RequestOptions): Promise<T>

        // Send one-way notifications
        notification(notification: Notification): Promise<void>
    }
    ```

  </Tab>

  <Tab title="Python">
    ```python
    class Session(BaseSession[RequestT, NotificationT, ResultT]):
        async def send_request(
            self,
            request: RequestT,
            result_type: type[Result]
        ) -> Result:
            """
            Send request and wait for response. Raises McpError if response contains error.
            """
            # Request handling implementation

        async def send_notification(
            self,
            notification: NotificationT
        ) -> None:
            """Send one-way notification that doesn't expect response."""
            # Notification handling implementation

        async def _received_request(
            self,
            responder: RequestResponder[ReceiveRequestT, ResultT]
        ) -> None:
            """Handle incoming request from other side."""
            # Request handling implementation

        async def _received_notification(
            self,
            notification: ReceiveNotificationT
        ) -> None:
            """Handle incoming notification from other side."""
            # Notification handling implementation
    ```

  </Tab>
</Tabs>

Key classes include:

- `Protocol`
- `Client`
- `Server`

### Transport layer

The transport layer handles the actual communication between clients and servers. MCP supports multiple transport mechanisms:

1. **Stdio transport**

   - Uses standard input/output for communication
   - Ideal for local processes

2. **HTTP with SSE transport**
   - Uses Server-Sent Events for server-to-client messages
   - HTTP POST for client-to-server messages

All transports use [JSON-RPC](https://www.jsonrpc.org/) 2.0 to exchange messages. See the [specification](https://spec.modelcontextprotocol.io) for detailed information about the Model Context Protocol message format.

### Message types

MCP has these main types of messages:

1. **Requests** expect a response from the other side:

   ```typescript
   interface Request {
     method: string;
     params?: { ... };
   }
   ```

2. **Results** are successful responses to requests:

   ```typescript
   interface Result {
     [key: string]: unknown;
   }
   ```

3. **Errors** indicate that a request failed:

   ```typescript
   interface Error {
     code: number;
     message: string;
     data?: unknown;
   }
   ```

4. **Notifications** are one-way messages that don't expect a response:
   ```typescript
   interface Notification {
     method: string;
     params?: { ... };
   }
   ```

## Connection lifecycle

### 1. Initialization

```mermaid
sequenceDiagram
    participant Client
    participant Server

    Client->>Server: initialize request
    Server->>Client: initialize response
    Client->>Server: initialized notification

    Note over Client,Server: Connection ready for use
```

1. Client sends `initialize` request with protocol version and capabilities
2. Server responds with its protocol version and capabilities
3. Client sends `initialized` notification as acknowledgment
4. Normal message exchange begins

### 2. Message exchange

After initialization, the following patterns are supported:

- **Request-Response**: Client or server sends requests, the other responds
- **Notifications**: Either party sends one-way messages

### 3. Termination

Either party can terminate the connection:

- Clean shutdown via `close()`
- Transport disconnection
- Error conditions

## Error handling

MCP defines these standard error codes:

```typescript
enum ErrorCode {
  // Standard JSON-RPC error codes
  ParseError = -32700,
  InvalidRequest = -32600,
  MethodNotFound = -32601,
  InvalidParams = -32602,
  InternalError = -32603,
}
```

SDKs and applications can define their own error codes above -32000.

Errors are propagated through:

- Error responses to requests
- Error events on transports
- Protocol-level error handlers

## Implementation example

Here's a basic example of implementing an MCP server:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    import { Server } from "@modelcontextprotocol/sdk/server/index.js";
    import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

    const server = new Server({
      name: "example-server",
      version: "1.0.0"
    }, {
      capabilities: {
        resources: {}
      }
    });

    // Handle requests
    server.setRequestHandler(ListResourcesRequestSchema, async () => {
      return {
        resources: [
          {
            uri: "example://resource",
            name: "Example Resource"
          }
        ]
      };
    });

    // Connect transport
    const transport = new StdioServerTransport();
    await server.connect(transport);
    ```

  </Tab>

  <Tab title="Python">
    ```python
    import asyncio
    import mcp.types as types
    from mcp.server import Server
    from mcp.server.stdio import stdio_server

    app = Server("example-server")

    @app.list_resources()
    async def list_resources() -> list[types.Resource]:
        return [
            types.Resource(
                uri="example://resource",
                name="Example Resource"
            )
        ]

    async def main():
        async with stdio_server() as streams:
            await app.run(
                streams[0],
                streams[1],
                app.create_initialization_options()
            )

    if __name__ == "__main__":
        asyncio.run(main)
    ```

  </Tab>
</Tabs>

## Best practices

### Transport selection

1. **Local communication**

   - Use stdio transport for local processes
   - Efficient for same-machine communication
   - Simple process management

2. **Remote communication**
   - Use SSE for scenarios requiring HTTP compatibility
   - Consider security implications including authentication and authorization

### Message handling

1. **Request processing**

   - Validate inputs thoroughly
   - Use type-safe schemas
   - Handle errors gracefully
   - Implement timeouts

2. **Progress reporting**

   - Use progress tokens for long operations
   - Report progress incrementally
   - Include total progress when known

3. **Error management**
   - Use appropriate error codes
   - Include helpful error messages
   - Clean up resources on errors

## Security considerations

1. **Transport security**

   - Use TLS for remote connections
   - Validate connection origins
   - Implement authentication when needed

2. **Message validation**

   - Validate all incoming messages
   - Sanitize inputs
   - Check message size limits
   - Verify JSON-RPC format

3. **Resource protection**

   - Implement access controls
   - Validate resource paths
   - Monitor resource usage
   - Rate limit requests

4. **Error handling**
   - Don't leak sensitive information
   - Log security-relevant errors
   - Implement proper cleanup
   - Handle DoS scenarios

## Debugging and monitoring

1. **Logging**

   - Log protocol events
   - Track message flow
   - Monitor performance
   - Record errors

2. **Diagnostics**

   - Implement health checks
   - Monitor connection state
   - Track resource usage
   - Profile performance

3. **Testing**
   - Test different transports
   - Verify error handling
   - Check edge cases
   - Load test servers

# Prompts

Source: https://modelcontextprotocol.io/docs/concepts/prompts

Create reusable prompt templates and workflows

Prompts enable servers to define reusable prompt templates and workflows that clients can easily surface to users and LLMs. They provide a powerful way to standardize and share common LLM interactions.

<Note>
  Prompts are designed to be **user-controlled**, meaning they are exposed from servers to clients with the intention of the user being able to explicitly select them for use.
</Note>

## Overview

Prompts in MCP are predefined templates that can:

- Accept dynamic arguments
- Include context from resources
- Chain multiple interactions
- Guide specific workflows
- Surface as UI elements (like slash commands)

## Prompt structure

Each prompt is defined with:

```typescript
{
  name: string;              // Unique identifier for the prompt
  description?: string;      // Human-readable description
  arguments?: [              // Optional list of arguments
    {
      name: string;          // Argument identifier
      description?: string;  // Argument description
      required?: boolean;    // Whether argument is required
    }
  ]
}
```

## Discovering prompts

Clients can discover available prompts through the `prompts/list` endpoint:

```typescript
// Request
{
  method: 'prompts/list';
}

// Response
{
  prompts: [
    {
      name: 'analyze-code',
      description: 'Analyze code for potential improvements',
      arguments: [
        {
          name: 'language',
          description: 'Programming language',
          required: true,
        },
      ],
    },
  ];
}
```

## Using prompts

To use a prompt, clients make a `prompts/get` request:

````typescript
// Request
{
  method: "prompts/get",
  params: {
    name: "analyze-code",
    arguments: {
      language: "python"
    }
  }
}

// Response
{
  description: "Analyze Python code for potential improvements",
  messages: [
    {
      role: "user",
      content: {
        type: "text",
        text: "Please analyze the following Python code for potential improvements:\n\n```python\ndef calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total = total + num\n    return total\n\nresult = calculate_sum([1, 2, 3, 4, 5])\nprint(result)\n```"
      }
    }
  ]
}
````

## Dynamic prompts

Prompts can be dynamic and include:

### Embedded resource context

```json
{
  "name": "analyze-project",
  "description": "Analyze project logs and code",
  "arguments": [
    {
      "name": "timeframe",
      "description": "Time period to analyze logs",
      "required": true
    },
    {
      "name": "fileUri",
      "description": "URI of code file to review",
      "required": true
    }
  ]
}
```

When handling the `prompts/get` request:

```json
{
  "messages": [
    {
      "role": "user",
      "content": {
        "type": "text",
        "text": "Analyze these system logs and the code file for any issues:"
      }
    },
    {
      "role": "user",
      "content": {
        "type": "resource",
        "resource": {
          "uri": "logs://recent?timeframe=1h",
          "text": "[2024-03-14 15:32:11] ERROR: Connection timeout in network.py:127\n[2024-03-14 15:32:15] WARN: Retrying connection (attempt 2/3)\n[2024-03-14 15:32:20] ERROR: Max retries exceeded",
          "mimeType": "text/plain"
        }
      }
    },
    {
      "role": "user",
      "content": {
        "type": "resource",
        "resource": {
          "uri": "file:///path/to/code.py",
          "text": "def connect_to_service(timeout=30):\n    retries = 3\n    for attempt in range(retries):\n        try:\n            return establish_connection(timeout)\n        except TimeoutError:\n            if attempt == retries - 1:\n                raise\n            time.sleep(5)\n\ndef establish_connection(timeout):\n    # Connection implementation\n    pass",
          "mimeType": "text/x-python"
        }
      }
    }
  ]
}
```

### Multi-step workflows

```typescript
const debugWorkflow = {
  name: 'debug-error',
  async getMessages(error: string) {
    return [
      {
        role: 'user',
        content: {
          type: 'text',
          text: `Here's an error I'm seeing: ${error}`,
        },
      },
      {
        role: 'assistant',
        content: {
          type: 'text',
          text: "I'll help analyze this error. What have you tried so far?",
        },
      },
      {
        role: 'user',
        content: {
          type: 'text',
          text: "I've tried restarting the service, but the error persists.",
        },
      },
    ];
  },
};
```

## Example implementation

Here's a complete example of implementing prompts in an MCP server:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    import { Server } from "@modelcontextprotocol/sdk/server";
    import {
      ListPromptsRequestSchema,
      GetPromptRequestSchema
    } from "@modelcontextprotocol/sdk/types";

    const PROMPTS = {
      "git-commit": {
        name: "git-commit",
        description: "Generate a Git commit message",
        arguments: [
          {
            name: "changes",
            description: "Git diff or description of changes",
            required: true
          }
        ]
      },
      "explain-code": {
        name: "explain-code",
        description: "Explain how code works",
        arguments: [
          {
            name: "code",
            description: "Code to explain",
            required: true
          },
          {
            name: "language",
            description: "Programming language",
            required: false
          }
        ]
      }
    };

    const server = new Server({
      name: "example-prompts-server",
      version: "1.0.0"
    }, {
      capabilities: {
        prompts: {}
      }
    });

    // List available prompts
    server.setRequestHandler(ListPromptsRequestSchema, async () => {
      return {
        prompts: Object.values(PROMPTS)
      };
    });

    // Get specific prompt
    server.setRequestHandler(GetPromptRequestSchema, async (request) => {
      const prompt = PROMPTS[request.params.name];
      if (!prompt) {
        throw new Error(`Prompt not found: ${request.params.name}`);
      }

      if (request.params.name === "git-commit") {
        return {
          messages: [
            {
              role: "user",
              content: {
                type: "text",
                text: `Generate a concise but descriptive commit message for these changes:\n\n${request.params.arguments?.changes}`
              }
            }
          ]
        };
      }

      if (request.params.name === "explain-code") {
        const language = request.params.arguments?.language || "Unknown";
        return {
          messages: [
            {
              role: "user",
              content: {
                type: "text",
                text: `Explain how this ${language} code works:\n\n${request.params.arguments?.code}`
              }
            }
          ]
        };
      }

      throw new Error("Prompt implementation not found");
    });
    ```

  </Tab>

  <Tab title="Python">
    ```python
    from mcp.server import Server
    import mcp.types as types

    # Define available prompts
    PROMPTS = {
        "git-commit": types.Prompt(
            name="git-commit",
            description="Generate a Git commit message",
            arguments=[
                types.PromptArgument(
                    name="changes",
                    description="Git diff or description of changes",
                    required=True
                )
            ],
        ),
        "explain-code": types.Prompt(
            name="explain-code",
            description="Explain how code works",
            arguments=[
                types.PromptArgument(
                    name="code",
                    description="Code to explain",
                    required=True
                ),
                types.PromptArgument(
                    name="language",
                    description="Programming language",
                    required=False
                )
            ],
        )
    }

    # Initialize server
    app = Server("example-prompts-server")

    @app.list_prompts()
    async def list_prompts() -> list[types.Prompt]:
        return list(PROMPTS.values())

    @app.get_prompt()
    async def get_prompt(
        name: str, arguments: dict[str, str] | None = None
    ) -> types.GetPromptResult:
        if name not in PROMPTS:
            raise ValueError(f"Prompt not found: {name}")

        if name == "git-commit":
            changes = arguments.get("changes") if arguments else ""
            return types.GetPromptResult(
                messages=[
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(
                            type="text",
                            text=f"Generate a concise but descriptive commit message "
                            f"for these changes:\n\n{changes}"
                        )
                    )
                ]
            )

        if name == "explain-code":
            code = arguments.get("code") if arguments else ""
            language = arguments.get("language", "Unknown") if arguments else "Unknown"
            return types.GetPromptResult(
                messages=[
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(
                            type="text",
                            text=f"Explain how this {language} code works:\n\n{code}"
                        )
                    )
                ]
            )

        raise ValueError("Prompt implementation not found")
    ```

  </Tab>
</Tabs>

## Best practices

When implementing prompts:

1.  Use clear, descriptive prompt names
2.  Provide detailed descriptions for prompts and arguments
3.  Validate all required arguments
4.  Handle missing arguments gracefully
5.  Consider versioning for prompt templates
6.  Cache dynamic content when appropriate
7.  Implement error handling
8.  Document expected argument formats
9.  Consider prompt composability
10. Test prompts with various inputs

## UI integration

Prompts can be surfaced in client UIs as:

- Slash commands
- Quick actions
- Context menu items
- Command palette entries
- Guided workflows
- Interactive forms

## Updates and changes

Servers can notify clients about prompt changes:

1.  Server capability: `prompts.listChanged`
2.  Notification: `notifications/prompts/list_changed`
3.  Client re-fetches prompt list

## Security considerations

When implementing prompts:

- Validate all arguments
- Sanitize user input
- Consider rate limiting
- Implement access controls
- Audit prompt usage
- Handle sensitive data appropriately
- Validate generated content
- Implement timeouts
- Consider prompt injection risks
- Document security requirements

# Resources

Source: https://modelcontextprotocol.io/docs/concepts/resources

Expose data and content from your servers to LLMs

Resources are a core primitive in the Model Context Protocol (MCP) that allow servers to expose data and content that can be read by clients and used as context for LLM interactions.

<Note>
  Resources are designed to be **application-controlled**, meaning that the client application can decide how and when they should be used.
  Different MCP clients may handle resources differently. For example:

- Claude Desktop currently requires users to explicitly select resources before they can be used
- Other clients might automatically select resources based on heuristics
- Some implementations may even allow the AI model itself to determine which resources to use

Server authors should be prepared to handle any of these interaction patterns when implementing resource support. In order to expose data to models automatically, server authors should use a **model-controlled** primitive such as [Tools](./tools).
</Note>

## Overview

Resources represent any kind of data that an MCP server wants to make available to clients. This can include:

- File contents
- Database records
- API responses
- Live system data
- Screenshots and images
- Log files
- And more

Each resource is identified by a unique URI and can contain either text or binary data.

## Resource URIs

Resources are identified using URIs that follow this format:

```
[protocol]://[host]/[path]
```

For example:

- `file:///home/user/documents/report.pdf`
- `postgres://database/customers/schema`
- `screen://localhost/display1`

The protocol and path structure is defined by the MCP server implementation. Servers can define their own custom URI schemes.

## Resource types

Resources can contain two types of content:

### Text resources

Text resources contain UTF-8 encoded text data. These are suitable for:

- Source code
- Configuration files
- Log files
- JSON/XML data
- Plain text

### Binary resources

Binary resources contain raw binary data encoded in base64. These are suitable for:

- Images
- PDFs
- Audio files
- Video files
- Other non-text formats

## Resource discovery

Clients can discover available resources through two main methods:

### Direct resources

Servers expose a list of concrete resources via the `resources/list` endpoint. Each resource includes:

```typescript
{
  uri: string;           // Unique identifier for the resource
  name: string;          // Human-readable name
  description?: string;  // Optional description
  mimeType?: string;     // Optional MIME type
}
```

### Resource templates

For dynamic resources, servers can expose [URI templates](https://datatracker.ietf.org/doc/html/rfc6570) that clients can use to construct valid resource URIs:

```typescript
{
  uriTemplate: string;   // URI template following RFC 6570
  name: string;          // Human-readable name for this type
  description?: string;  // Optional description
  mimeType?: string;     // Optional MIME type for all matching resources
}
```

## Reading resources

To read a resource, clients make a `resources/read` request with the resource URI.

The server responds with a list of resource contents:

```typescript
{
  contents: [
    {
      uri: string;        // The URI of the resource
      mimeType?: string;  // Optional MIME type

      // One of:
      text?: string;      // For text resources
      blob?: string;      // For binary resources (base64 encoded)
    }
  ]
}
```

<Tip>
  Servers may return multiple resources in response to one `resources/read` request. This could be used, for example, to return a list of files inside a directory when the directory is read.
</Tip>

## Resource updates

MCP supports real-time updates for resources through two mechanisms:

### List changes

Servers can notify clients when their list of available resources changes via the `notifications/resources/list_changed` notification.

### Content changes

Clients can subscribe to updates for specific resources:

1.  Client sends `resources/subscribe` with resource URI
2.  Server sends `notifications/resources/updated` when the resource changes
3.  Client can fetch latest content with `resources/read`
4.  Client can unsubscribe with `resources/unsubscribe`

## Example implementation

Here's a simple example of implementing resource support in an MCP server:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    const server = new Server({
      name: "example-server",
      version: "1.0.0"
    }, {
      capabilities: {
        resources: {}
      }
    });

    // List available resources
    server.setRequestHandler(ListResourcesRequestSchema, async () => {
      return {
        resources: [
          {
            uri: "file:///logs/app.log",
            name: "Application Logs",
            mimeType: "text/plain"
          }
        ]
      };
    });

    // Read resource contents
    server.setRequestHandler(ReadResourceRequestSchema, async (request) => {
      const uri = request.params.uri;

      if (uri === "file:///logs/app.log") {
        const logContents = await readLogFile();
        return {
          contents: [
            {
              uri,
              mimeType: "text/plain",
              text: logContents
            }
          ]
        };
      }

      throw new Error("Resource not found");
    });
    ```

  </Tab>

  <Tab title="Python">
    ```python
    app = Server("example-server")

    @app.list_resources()
    async def list_resources() -> list[types.Resource]:
        return [
            types.Resource(
                uri="file:///logs/app.log",
                name="Application Logs",
                mimeType="text/plain"
            )
        ]

    @app.read_resource()
    async def read_resource(uri: AnyUrl) -> str:
        if str(uri) == "file:///logs/app.log":
            log_contents = await read_log_file()
            return log_contents

        raise ValueError("Resource not found")

    # Start server
    async with stdio_server() as streams:
        await app.run(
            streams[0],
            streams[1],
            app.create_initialization_options()
        )
    ```

  </Tab>
</Tabs>

## Best practices

When implementing resource support:

1.  Use clear, descriptive resource names and URIs
2.  Include helpful descriptions to guide LLM understanding
3.  Set appropriate MIME types when known
4.  Implement resource templates for dynamic content
5.  Use subscriptions for frequently changing resources
6.  Handle errors gracefully with clear error messages
7.  Consider pagination for large resource lists
8.  Cache resource contents when appropriate
9.  Validate URIs before processing
10. Document your custom URI schemes

## Security considerations

When exposing resources:

- Validate all resource URIs
- Implement appropriate access controls
- Sanitize file paths to prevent directory traversal
- Be cautious with binary data handling
- Consider rate limiting for resource reads
- Audit resource access
- Encrypt sensitive data in transit
- Validate MIME types
- Implement timeouts for long-running reads
- Handle resource cleanup appropriately

# Roots

Source: https://modelcontextprotocol.io/docs/concepts/roots

Understanding roots in MCP

Roots are a concept in MCP that define the boundaries where servers can operate. They provide a way for clients to inform servers about relevant resources and their locations.

## What are Roots?

A root is a URI that a client suggests a server should focus on. When a client connects to a server, it declares which roots the server should work with. While primarily used for filesystem paths, roots can be any valid URI including HTTP URLs.

For example, roots could be:

```
file:///home/user/projects/myapp
https://api.example.com/v1
```

## Why Use Roots?

Roots serve several important purposes:

1.  **Guidance**: They inform servers about relevant resources and locations
2.  **Clarity**: Roots make it clear which resources are part of your workspace
3.  **Organization**: Multiple roots let you work with different resources simultaneously

## How Roots Work

When a client supports roots, it:

1.  Declares the `roots` capability during connection
2.  Provides a list of suggested roots to the server
3.  Notifies the server when roots change (if supported)

While roots are informational and not strictly enforcing, servers should:

1.  Respect the provided roots
2.  Use root URIs to locate and access resources
3.  Prioritize operations within root boundaries

## Common Use Cases

Roots are commonly used to define:

- Project directories
- Repository locations
- API endpoints
- Configuration locations
- Resource boundaries

## Best Practices

When working with roots:

1.  Only suggest necessary resources
2.  Use clear, descriptive names for roots
3.  Monitor root accessibility
4.  Handle root changes gracefully

## Example

Here's how a typical MCP client might expose roots:

```json
{
  "roots": [
    {
      "uri": "file:///home/user/projects/frontend",
      "name": "Frontend Repository"
    },
    {
      "uri": "https://api.example.com/v1",
      "name": "API Endpoint"
    }
  ]
}
```

This configuration suggests the server focus on both a local repository and an API endpoint while keeping them logically separated.

# Sampling

Source: https://modelcontextprotocol.io/docs/concepts/sampling

Let your servers request completions from LLMs

Sampling is a powerful MCP feature that allows servers to request LLM completions through the client, enabling sophisticated agentic behaviors while maintaining security and privacy.

<Info>
  This feature of MCP is not yet supported in the Claude Desktop client.
</Info>

## How sampling works

The sampling flow follows these steps:

1.  Server sends a `sampling/createMessage` request to the client
2.  Client reviews the request and can modify it
3.  Client samples from an LLM
4.  Client reviews the completion
5.  Client returns the result to the server

This human-in-the-loop design ensures users maintain control over what the LLM sees and generates.

## Message format

Sampling requests use a standardized message format:

```typescript
{
  messages: [
    {
      role: "user" | "assistant",
      content: {
        type: "text" | "image",

        // For text:
        text?: string,

        // For images:
        data?: string,             // base64 encoded
        mimeType?: string
      }
    }
  ],
  modelPreferences?: {
    hints?: [{
      name?: string                // Suggested model name/family
    }],
    costPriority?: number,         // 0-1, importance of minimizing cost
    speedPriority?: number,        // 0-1, importance of low latency
    intelligencePriority?: number  // 0-1, importance of capabilities
  },
  systemPrompt?: string,
  includeContext?: "none" | "thisServer" | "allServers",
  temperature?: number,
  maxTokens: number,
  stopSequences?: string[],
  metadata?: Record<string, unknown>
}
```

## Request parameters

### Messages

The `messages` array contains the conversation history to send to the LLM. Each message has:

- `role`: Either "user" or "assistant"
- `content`: The message content, which can be:
  - Text content with a `text` field
  - Image content with `data` (base64) and `mimeType` fields

### Model preferences

The `modelPreferences` object allows servers to specify their model selection preferences:

- `hints`: Array of model name suggestions that clients can use to select an appropriate model:

  - `name`: String that can match full or partial model names (e.g. "claude-3", "sonnet")
  - Clients may map hints to equivalent models from different providers
  - Multiple hints are evaluated in preference order

- Priority values (0-1 normalized):
  - `costPriority`: Importance of minimizing costs
  - `speedPriority`: Importance of low latency response
  - `intelligencePriority`: Importance of advanced model capabilities

Clients make the final model selection based on these preferences and their available models.

### System prompt

An optional `systemPrompt` field allows servers to request a specific system prompt. The client may modify or ignore this.

### Context inclusion

The `includeContext` parameter specifies what MCP context to include:

- `"none"`: No additional context
- `"thisServer"`: Include context from the requesting server
- `"allServers"`: Include context from all connected MCP servers

The client controls what context is actually included.

### Sampling parameters

Fine-tune the LLM sampling with:

- `temperature`: Controls randomness (0.0 to 1.0)
- `maxTokens`: Maximum tokens to generate
- `stopSequences`: Array of sequences that stop generation
- `metadata`: Additional provider-specific parameters

## Response format

The client returns a completion result:

```typescript
{
  model: string,  // Name of the model used
  stopReason?: "endTurn" | "stopSequence" | "maxTokens" | string,
  role: "user" | "assistant",
  content: {
    type: "text" | "image",
    text?: string,
    data?: string,
    mimeType?: string
  }
}
```

## Example request

Here's an example of requesting sampling from a client:

```json
{
  "method": "sampling/createMessage",
  "params": {
    "messages": [
      {
        "role": "user",
        "content": {
          "type": "text",
          "text": "What files are in the current directory?"
        }
      }
    ],
    "systemPrompt": "You are a helpful file system assistant.",
    "includeContext": "thisServer",
    "maxTokens": 100
  }
}
```

## Best practices

When implementing sampling:

1.  Always provide clear, well-structured prompts
2.  Handle both text and image content appropriately
3.  Set reasonable token limits
4.  Include relevant context through `includeContext`
5.  Validate responses before using them
6.  Handle errors gracefully
7.  Consider rate limiting sampling requests
8.  Document expected sampling behavior
9.  Test with various model parameters
10. Monitor sampling costs

## Human in the loop controls

Sampling is designed with human oversight in mind:

### For prompts

- Clients should show users the proposed prompt
- Users should be able to modify or reject prompts
- System prompts can be filtered or modified
- Context inclusion is controlled by the client

### For completions

- Clients should show users the completion
- Users should be able to modify or reject completions
- Clients can filter or modify completions
- Users control which model is used

## Security considerations

When implementing sampling:

- Validate all message content
- Sanitize sensitive information
- Implement appropriate rate limits
- Monitor sampling usage
- Encrypt data in transit
- Handle user data privacy
- Audit sampling requests
- Control cost exposure
- Implement timeouts
- Handle model errors gracefully

## Common patterns

### Agentic workflows

Sampling enables agentic patterns like:

- Reading and analyzing resources
- Making decisions based on context
- Generating structured data
- Handling multi-step tasks
- Providing interactive assistance

### Context management

Best practices for context:

- Request minimal necessary context
- Structure context clearly
- Handle context size limits
- Update context as needed
- Clean up stale context

### Error handling

Robust error handling should:

- Catch sampling failures
- Handle timeout errors
- Manage rate limits
- Validate responses
- Provide fallback behaviors
- Log errors appropriately

## Limitations

Be aware of these limitations:

- Sampling depends on client capabilities
- Users control sampling behavior
- Context size has limits
- Rate limits may apply
- Costs should be considered
- Model availability varies
- Response times vary
- Not all content types supported

# Tools

Source: https://modelcontextprotocol.io/docs/concepts/tools

Enable LLMs to perform actions through your server

Tools are a powerful primitive in the Model Context Protocol (MCP) that enable servers to expose executable functionality to clients. Through tools, LLMs can interact with external systems, perform computations, and take actions in the real world.

<Note>
  Tools are designed to be **model-controlled**, meaning that tools are exposed from servers to clients with the intention of the AI model being able to automatically invoke them (with a human in the loop to grant approval).
</Note>

## Overview

Tools in MCP allow servers to expose executable functions that can be invoked by clients and used by LLMs to perform actions. Key aspects of tools include:

- **Discovery**: Clients can list available tools through the `tools/list` endpoint
- **Invocation**: Tools are called using the `tools/call` endpoint, where servers perform the requested operation and return results
- **Flexibility**: Tools can range from simple calculations to complex API interactions

Like [resources](/docs/concepts/resources), tools are identified by unique names and can include descriptions to guide their usage. However, unlike resources, tools represent dynamic operations that can modify state or interact with external systems.

## Tool definition structure

Each tool is defined with the following structure:

```typescript
{
  name: string;          // Unique identifier for the tool
  description?: string;  // Human-readable description
  inputSchema: {         // JSON Schema for the tool's parameters
    type: "object",
    properties: { ... }  // Tool-specific parameters
  }
}
```

## Implementing tools

Here's an example of implementing a basic tool in an MCP server:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    const server = new Server({
      name: "example-server",
      version: "1.0.0"
    }, {
      capabilities: {
        tools: {}
      }
    });

    // Define available tools
    server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [{
          name: "calculate_sum",
          description: "Add two numbers together",
          inputSchema: {
            type: "object",
            properties: {
              a: { type: "number" },
              b: { type: "number" }
            },
            required: ["a", "b"]
          }
        }]
      };
    });

    // Handle tool execution
    server.setRequestHandler(CallToolRequestSchema, async (request) => {
      if (request.params.name === "calculate_sum") {
        const { a, b } = request.params.arguments;
        return {
          content: [
            {
              type: "text",
              text: String(a + b)
            }
          ]
        };
      }
      throw new Error("Tool not found");
    });
    ```

  </Tab>

  <Tab title="Python">
    ```python
    app = Server("example-server")

    @app.list_tools()
    async def list_tools() -> list[types.Tool]:
        return [
            types.Tool(
                name="calculate_sum",
                description="Add two numbers together",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "a": {"type": "number"},
                        "b": {"type": "number"}
                    },
                    "required": ["a", "b"]
                }
            )
        ]

    @app.call_tool()
    async def call_tool(
        name: str,
        arguments: dict
    ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
        if name == "calculate_sum":
            a = arguments["a"]
            b = arguments["b"]
            result = a + b
            return [types.TextContent(type="text", text=str(result))]
        raise ValueError(f"Tool not found: {name}")
    ```

  </Tab>
</Tabs>

## Example tool patterns

Here are some examples of types of tools that a server could provide:

### System operations

Tools that interact with the local system:

```typescript
{
  name: "execute_command",
  description: "Run a shell command",
  inputSchema: {
    type: "object",
    properties: {
      command: { type: "string" },
      args: { type: "array", items: { type: "string" } }
    }
  }
}
```

### API integrations

Tools that wrap external APIs:

```typescript
{
  name: "github_create_issue",
  description: "Create a GitHub issue",
  inputSchema: {
    type: "object",
    properties: {
      title: { type: "string" },
      body: { type: "string" },
      labels: { type: "array", items: { type: "string" } }
    }
  }
}
```

### Data processing

Tools that transform or analyze data:

```typescript
{
  name: "analyze_csv",
  description: "Analyze a CSV file",
  inputSchema: {
    type: "object",
    properties: {
      filepath: { type: "string" },
      operations: {
        type: "array",
        items: {
          enum: ["sum", "average", "count"]
        }
      }
    }
  }
}
```

## Best practices

When implementing tools:

1.  Provide clear, descriptive names and descriptions
2.  Use detailed JSON Schema definitions for parameters
3.  Include examples in tool descriptions to demonstrate how the model should use them
4.  Implement proper error handling and validation
5.  Use progress reporting for long operations
6.  Keep tool operations focused and atomic
7.  Document expected return value structures
8.  Implement proper timeouts
9.  Consider rate limiting for resource-intensive operations
10. Log tool usage for debugging and monitoring

## Security considerations

When exposing tools:

### Input validation

- Validate all parameters against the schema
- Sanitize file paths and system commands
- Validate URLs and external identifiers
- Check parameter sizes and ranges
- Prevent command injection

### Access control

- Implement authentication where needed
- Use appropriate authorization checks
- Audit tool usage
- Rate limit requests
- Monitor for abuse

### Error handling

- Don't expose internal errors to clients
- Log security-relevant errors
- Handle timeouts appropriately
- Clean up resources after errors
- Validate return values

## Tool discovery and updates

MCP supports dynamic tool discovery:

1.  Clients can list available tools at any time
2.  Servers can notify clients when tools change using `notifications/tools/list_changed`
3.  Tools can be added or removed during runtime
4.  Tool definitions can be updated (though this should be done carefully)

## Error handling

Tool errors should be reported within the result object, not as MCP protocol-level errors. This allows the LLM to see and potentially handle the error. When a tool encounters an error:

1.  Set `isError` to `true` in the result
2.  Include error details in the `content` array

Here's an example of proper error handling for tools:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    try {
      // Tool operation
      const result = performOperation();
      return {
        content: [
          {
            type: "text",
            text: `Operation successful: ${result}`
          }
        ]
      };
    } catch (error) {
      return {
        isError: true,
        content: [
          {
            type: "text",
            text: `Error: ${error.message}`
          }
        ]
      };
    }
    ```
  </Tab>

  <Tab title="Python">
    ```python
    try:
        # Tool operation
        result = perform_operation()
        return types.CallToolResult(
            content=[
                types.TextContent(
                    type="text",
                    text=f"Operation successful: {result}"
                )
            ]
        )
    except Exception as error:
        return types.CallToolResult(
            isError=True,
            content=[
                types.TextContent(
                    type="text",
                    text=f"Error: {str(error)}"
                )
            ]
        )
    ```
  </Tab>
</Tabs>

This approach allows the LLM to see that an error occurred and potentially take corrective action or request human intervention.

## Testing tools

A comprehensive testing strategy for MCP tools should cover:

- **Functional testing**: Verify tools execute correctly with valid inputs and handle invalid inputs appropriately
- **Integration testing**: Test tool interaction with external systems using both real and mocked dependencies
- **Security testing**: Validate authentication, authorization, input sanitization, and rate limiting
- **Performance testing**: Check behavior under load, timeout handling, and resource cleanup
- **Error handling**: Ensure tools properly report errors through the MCP protocol and clean up resources

# Transports

Source: https://modelcontextprotocol.io/docs/concepts/transports

Learn about MCP's communication mechanisms

Transports in the Model Context Protocol (MCP) provide the foundation for communication between clients and servers. A transport handles the underlying mechanics of how messages are sent and received.

## Message Format

MCP uses [JSON-RPC](https://www.jsonrpc.org/) 2.0 as its wire format. The transport layer is responsible for converting MCP protocol messages into JSON-RPC format for transmission and converting received JSON-RPC messages back into MCP protocol messages.

There are three types of JSON-RPC messages used:

### Requests

```typescript
{
  jsonrpc: "2.0",
  id: number | string,
  method: string,
  params?: object
}
```

### Responses

```typescript
{
  jsonrpc: "2.0",
  id: number | string,
  result?: object,
  error?: {
    code: number,
    message: string,
    data?: unknown
  }
}
```

### Notifications

```typescript
{
  jsonrpc: "2.0",
  method: string,
  params?: object
}
```

## Built-in Transport Types

MCP includes two standard transport implementations:

### Standard Input/Output (stdio)

The stdio transport enables communication through standard input and output streams. This is particularly useful for local integrations and command-line tools.

Use stdio when:

- Building command-line tools
- Implementing local integrations
- Needing simple process communication
- Working with shell scripts

<Tabs>
  <Tab title="TypeScript (Server)">
    ```typescript
    const server = new Server({
      name: "example-server",
      version: "1.0.0"
    }, {
      capabilities: {}
    });

    const transport = new StdioServerTransport();
    await server.connect(transport);
    ```

  </Tab>

  <Tab title="TypeScript (Client)">
    ```typescript
    const client = new Client({
      name: "example-client",
      version: "1.0.0"
    }, {
      capabilities: {}
    });

    const transport = new StdioClientTransport({
      command: "./server",
      args: ["--option", "value"]
    });
    await client.connect(transport);
    ```

  </Tab>

  <Tab title="Python (Server)">
    ```python
    app = Server("example-server")

    async with stdio_server() as streams:
        await app.run(
            streams[0],
            streams[1],
            app.create_initialization_options()
        )
    ```

  </Tab>

  <Tab title="Python (Client)">
    ```python
    params = StdioServerParameters(
        command="./server",
        args=["--option", "value"]
    )

    async with stdio_client(params) as streams:
        async with ClientSession(streams[0], streams[1]) as session:
            await session.initialize()
    ```

  </Tab>
</Tabs>

### Server-Sent Events (SSE)

SSE transport enables server-to-client streaming with HTTP POST requests for client-to-server communication.

Use SSE when:

- Only server-to-client streaming is needed
- Working with restricted networks
- Implementing simple updates

<Tabs>
  <Tab title="TypeScript (Server)">
    ```typescript
    import express from "express";

    const app = express();

    const server = new Server({
      name: "example-server",
      version: "1.0.0"
    }, {
      capabilities: {}
    });

    let transport: SSEServerTransport | null = null;

    app.get("/sse", (req, res) => {
      transport = new SSEServerTransport("/messages", res);
      server.connect(transport);
    });

    app.post("/messages", (req, res) => {
      if (transport) {
        transport.handlePostMessage(req, res);
      }
    });

    app.listen(3000);
    ```

  </Tab>

  <Tab title="TypeScript (Client)">
    ```typescript
    const client = new Client({
      name: "example-client",
      version: "1.0.0"
    }, {
      capabilities: {}
    });

    const transport = new SSEClientTransport(
      new URL("http://localhost:3000/sse")
    );
    await client.connect(transport);
    ```

  </Tab>

  <Tab title="Python (Server)">
    ```python
    from mcp.server.sse import SseServerTransport
    from starlette.applications import Starlette
    from starlette.routing import Route

    app = Server("example-server")
    sse = SseServerTransport("/messages")

    async def handle_sse(scope, receive, send):
        async with sse.connect_sse(scope, receive, send) as streams:
            await app.run(streams[0], streams[1], app.create_initialization_options())

    async def handle_messages(scope, receive, send):
        await sse.handle_post_message(scope, receive, send)

    starlette_app = Starlette(
        routes=[
            Route("/sse", endpoint=handle_sse),
            Route("/messages", endpoint=handle_messages, methods=["POST"]),
        ]
    )
    ```

  </Tab>

  <Tab title="Python (Client)">
    ```python
    async with sse_client("http://localhost:8000/sse") as streams:
        async with ClientSession(streams[0], streams[1]) as session:
            await session.initialize()
    ```
  </Tab>
</Tabs>

## Custom Transports

MCP makes it easy to implement custom transports for specific needs. Any transport implementation just needs to conform to the Transport interface:

You can implement custom transports for:

- Custom network protocols
- Specialized communication channels
- Integration with existing systems
- Performance optimization

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    interface Transport {
      // Start processing messages
      start(): Promise<void>;

      // Send a JSON-RPC message
      send(message: JSONRPCMessage): Promise<void>;

      // Close the connection
      close(): Promise<void>;

      // Callbacks
      onclose?: () => void;
      onerror?: (error: Error) => void;
      onmessage?: (message: JSONRPCMessage) => void;
    }
    ```

  </Tab>

  <Tab title="Python">
    Note that while MCP Servers are often implemented with asyncio, we recommend
    implementing low-level interfaces like transports with `anyio` for wider compatibility.

    ```python
    @contextmanager
    async def create_transport(
        read_stream: MemoryObjectReceiveStream[JSONRPCMessage | Exception],
        write_stream: MemoryObjectSendStream[JSONRPCMessage]
    ):
        """
        Transport interface for MCP.

        Args:
            read_stream: Stream to read incoming messages from
            write_stream: Stream to write outgoing messages to
        """
        async with anyio.create_task_group() as tg:
            try:
                # Start processing messages
                tg.start_soon(lambda: process_messages(read_stream))

                # Send messages
                async with write_stream:
                    yield write_stream

            except Exception as exc:
                # Handle errors
                raise exc
            finally:
                # Clean up
                tg.cancel_scope.cancel()
                await write_stream.aclose()
                await read_stream.aclose()
    ```

  </Tab>
</Tabs>

## Error Handling

Transport implementations should handle various error scenarios:

1.  Connection errors
2.  Message parsing errors
3.  Protocol errors
4.  Network timeouts
5.  Resource cleanup

Example error handling:

<Tabs>
  <Tab title="TypeScript">
    ```typescript
    class ExampleTransport implements Transport {
      async start() {
        try {
          // Connection logic
        } catch (error) {
          this.onerror?.(new Error(`Failed to connect: ${error}`));
          throw error;
        }
      }

      async send(message: JSONRPCMessage) {
        try {
          // Sending logic
        } catch (error) {
          this.onerror?.(new Error(`Failed to send message: ${error}`));
          throw error;
        }
      }
    }
    ```

  </Tab>

  <Tab title="Python">
    Note that while MCP Servers are often implemented with asyncio, we recommend
    implementing low-level interfaces like transports with `anyio` for wider compatibility.

    ```python
    @contextmanager
    async def example_transport(scope: Scope, receive: Receive, send: Send):
        try:
            # Create streams for bidirectional communication
            read_stream_writer, read_stream = anyio.create_memory_object_stream(0)
            write_stream, write_stream_reader = anyio.create_memory_object_stream(0)

            async def message_handler():
                try:
                    async with read_stream_writer:
                        # Message handling logic
                        pass
                except Exception as exc:
                    logger.error(f"Failed to handle message: {exc}")
                    raise exc

            async with anyio.create_task_group() as tg:
                tg.start_soon(message_handler)
                try:
                    # Yield streams for communication
                    yield read_stream, write_stream
                except Exception as exc:
                    logger.error(f"Transport error: {exc}")
                    raise exc
                finally:
                    tg.cancel_scope.cancel()
                    await write_stream.aclose()
                    await read_stream.aclose()
        except Exception as exc:
            logger.error(f"Failed to initialize transport: {exc}")
            raise exc
    ```

  </Tab>
</Tabs>

## Best Practices

When implementing or using MCP transport:

1.  Handle connection lifecycle properly
2.  Implement proper error handling
3.  Clean up resources on connection close
4.  Use appropriate timeouts
5.  Validate messages before sending
6.  Log transport events for debugging
7.  Implement reconnection logic when appropriate
8.  Handle backpressure in message queues
9.  Monitor connection health
10. Implement proper security measures

## Security Considerations

When implementing transport:

### Authentication and Authorization

- Implement proper authentication mechanisms
- Validate client credentials
- Use secure token handling
- Implement authorization checks

### Data Security

- Use TLS for network transport
- Encrypt sensitive data
- Validate message integrity
- Implement message size limits
- Sanitize input data

### Network Security

- Implement rate limiting
- Use appropriate timeouts
- Handle denial of service scenarios
- Monitor for unusual patterns
- Implement proper firewall rules

## Debugging Transport

Tips for debugging transport issues:

1.  Enable debug logging
2.  Monitor message flow
3.  Check connection states
4.  Validate message formats
5.  Test error scenarios
6.  Use network analysis tools
7.  Implement health checks
8.  Monitor resource usage
9.  Test edge cases
10. Use proper error tracking

# Debugging

Source: https://modelcontextprotocol.io/docs/tools/debugging

A comprehensive guide to debugging Model Context Protocol (MCP) integrations

Effective debugging is essential when developing MCP servers or integrating them with applications. This guide covers the debugging tools and approaches available in the MCP ecosystem.

<Info>
  This guide is for macOS. Guides for other platforms are coming soon.
</Info>

## Debugging tools overview

MCP provides several tools for debugging at different levels:

1.  **MCP Inspector**

    - Interactive debugging interface
    - Direct server testing
    - See the [Inspector guide](/docs/tools/inspector) for details

2.  **Claude Desktop Developer Tools**

    - Integration testing
    - Log collection
    - Chrome DevTools integration

3.  **Server Logging**
    - Custom logging implementations
    - Error tracking
    - Performance monitoring

## Debugging in Claude Desktop

### Checking server status

The Claude.app interface provides basic server status information:

1.  Click the <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/claude-desktop-mcp-plug-icon.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> icon to view:

    - Connected servers
    - Available prompts and resources

2.  Click the <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/claude-desktop-mcp-hammer-icon.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> icon to view:
    - Tools made available to the model

### Viewing logs

Review detailed MCP logs from Claude Desktop:

```bash
# Follow logs in real-time
tail -n 20 -F ~/Library/Logs/Claude/mcp*.log
```

The logs capture:

- Server connection events
- Configuration issues
- Runtime errors
- Message exchanges

### Using Chrome DevTools

Access Chrome's developer tools inside Claude Desktop to investigate client-side errors:

1.  Create a `developer_settings.json` file with `allowDevTools` set to true:

```bash
echo '{"allowDevTools": true}' > ~/Library/Application\ Support/Claude/developer_settings.json
```

2.  Open DevTools: `Command-Option-Shift-i`

Note: You'll see two DevTools windows:

- Main content window
- App title bar window

Use the Console panel to inspect client-side errors.

Use the Network panel to inspect:

- Message payloads
- Connection timing

## Common issues

### Working directory

When using MCP servers with Claude Desktop:

- The working directory for servers launched via `claude_desktop_config.json` may be undefined (like `/` on macOS) since Claude Desktop could be started from anywhere
- Always use absolute paths in your configuration and `.env` files to ensure reliable operation
- For testing servers directly via command line, the working directory will be where you run the command

For example in `claude_desktop_config.json`, use:

```json
{
  "command": "npx",
  "args": ["-y", "@modelcontextprotocol/server-filesystem", "/Users/username/data"]
}
```

Instead of relative paths like `./data`

### Environment variables

MCP servers inherit only a subset of environment variables automatically, like `USER`, `HOME`, and `PATH`.

To override the default variables or provide your own, you can specify an `env` key in `claude_desktop_config.json`:

```json
{
  "myserver": {
    "command": "mcp-server-myapp",
    "env": {
      "MYAPP_API_KEY": "some_key"
    }
  }
}
```

### Server initialization

Common initialization problems:

1.  **Path Issues**

    - Incorrect server executable path
    - Missing required files
    - Permission problems
    - Try using an absolute path for `command`

2.  **Configuration Errors**

    - Invalid JSON syntax
    - Missing required fields
    - Type mismatches

3.  **Environment Problems**
    - Missing environment variables
    - Incorrect variable values
    - Permission restrictions

### Connection problems

When servers fail to connect:

1.  Check Claude Desktop logs
2.  Verify server process is running
3.  Test standalone with [Inspector](/docs/tools/inspector)
4.  Verify protocol compatibility

## Implementing logging

### Server-side logging

When building a server that uses the local stdio [transport](/docs/concepts/transports), all messages logged to stderr (standard error) will be captured by the host application (e.g., Claude Desktop) automatically.

<Warning>
  Local MCP servers should not log messages to stdout (standard out), as this will interfere with protocol operation.
</Warning>

For all [transports](/docs/concepts/transports), you can also provide logging to the client by sending a log message notification:

<Tabs>
  <Tab title="Python">
    ```python
    server.request_context.session.send_log_message(
      level="info",
      data="Server started successfully",
    )
    ```
  </Tab>

  <Tab title="TypeScript">
    ```typescript
    server.sendLoggingMessage({
      level: "info",
      data: "Server started successfully",
    });
    ```
  </Tab>
</Tabs>

Important events to log:

- Initialization steps
- Resource access
- Tool execution
- Error conditions
- Performance metrics

### Client-side logging

In client applications:

1.  Enable debug logging
2.  Monitor network traffic
3.  Track message exchanges
4.  Record error states

## Debugging workflow

### Development cycle

1.  Initial Development

    - Use [Inspector](/docs/tools/inspector) for basic testing
    - Implement core functionality
    - Add logging points

2.  Integration Testing
    - Test in Claude Desktop
    - Monitor logs
    - Check error handling

### Testing changes

To test changes efficiently:

- **Configuration changes**: Restart Claude Desktop
- **Server code changes**: Use Command-R to reload
- **Quick iteration**: Use [Inspector](/docs/tools/inspector) during development

## Best practices

### Logging strategy

1.  **Structured Logging**

    - Use consistent formats
    - Include context
    - Add timestamps
    - Track request IDs

2.  **Error Handling**

    - Log stack traces
    - Include error context
    - Track error patterns
    - Monitor recovery

3.  **Performance Tracking**
    - Log operation timing
    - Monitor resource usage
    - Track message sizes
    - Measure latency

### Security considerations

When debugging:

1.  **Sensitive Data**

    - Sanitize logs
    - Protect credentials
    - Mask personal information

2.  **Access Control**
    - Verify permissions
    - Check authentication
    - Monitor access patterns

## Getting help

When encountering issues:

1.  **First Steps**

    - Check server logs
    - Test with [Inspector](/docs/tools/inspector)
    - Review configuration
    - Verify environment

2.  **Support Channels**

    - GitHub issues
    - GitHub discussions

3.  **Providing Information**
    - Log excerpts
    - Configuration files
    - Steps to reproduce
    - Environment details

## Next steps

<CardGroup cols={2}>
  <Card title="MCP Inspector" icon="magnifying-glass" href="/docs/tools/inspector">
    Learn to use the MCP Inspector
  </Card>
</CardGroup>

# Inspector

Source: https://modelcontextprotocol.io/docs/tools/inspector

In-depth guide to using the MCP Inspector for testing and debugging Model Context Protocol servers

The [MCP Inspector](https://github.com/modelcontextprotocol/inspector) is an interactive developer tool for testing and debugging MCP servers. While the [Debugging Guide](/docs/tools/debugging) covers the Inspector as part of the overall debugging toolkit, this document provides a detailed exploration of the Inspector's features and capabilities.

## Getting started

### Installation and basic usage

The Inspector runs directly through `npx` without requiring installation:

```bash
npx @modelcontextprotocol/inspector <command>
```

```bash
npx @modelcontextprotocol/inspector <command> <arg1> <arg2>
```

#### Inspecting servers from NPM or PyPi

A common way to start server packages from [NPM](https://npmjs.com) or [PyPi](https://pypi.com).

<Tabs>
  <Tab title="NPM package">
    ```bash
    npx -y @modelcontextprotocol/inspector npx <package-name> <args>
    # For example
    npx -y @modelcontextprotocol/inspector npx server-postgres postgres://127.0.0.1/testdb
    ```
  </Tab>

  <Tab title="PyPi package">
    ```bash
    npx @modelcontextprotocol/inspector uvx <package-name> <args>
    # For example
    npx @modelcontextprotocol/inspector uvx mcp-server-git --repository ~/code/mcp/servers.git
    ```
  </Tab>
</Tabs>

#### Inspecting locally developed servers

To inspect servers locally developed or downloaded as a repository, the most common
way is:

<Tabs>
  <Tab title="TypeScript">
    ```bash
    npx @modelcontextprotocol/inspector node path/to/server/index.js args...
    ```
  </Tab>

  <Tab title="Python">
    ```bash
    npx @modelcontextprotocol/inspector \
      uv \
      --directory path/to/server \
      run \
      package-name \
      args...
    ```
  </Tab>
</Tabs>

Please carefully read any attached README for the most accurate instructions.

## Feature overview

<Frame caption="The MCP Inspector interface">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/mcp-inspector.png" />
</Frame>

The Inspector provides several features for interacting with your MCP server:

### Server connection pane

- Allows selecting the [transport](/docs/concepts/transports) for connecting to the server
- For local servers, supports customizing the command-line arguments and environment

### Resources tab

- Lists all available resources
- Shows resource metadata (MIME types, descriptions)
- Allows resource content inspection
- Supports subscription testing

### Prompts tab

- Displays available prompt templates
- Shows prompt arguments and descriptions
- Enables prompt testing with custom arguments
- Previews generated messages

### Tools tab

- Lists available tools
- Shows tool schemas and descriptions
- Enables tool testing with custom inputs
- Displays tool execution results

### Notifications pane

- Presents all logs recorded from the server
- Shows notifications received from the server

## Best practices

### Development workflow

1.  Start Development

    - Launch Inspector with your server
    - Verify basic connectivity
    - Check capability negotiation

2.  Iterative testing

    - Make server changes
    - Rebuild the server
    - Reconnect the Inspector
    - Test affected features
    - Monitor messages

3.  Test edge cases
    - Invalid inputs
    - Missing prompt arguments
    - Concurrent operations
    - Verify error handling and error responses

## Next steps

<CardGroup cols={2}>
  <Card title="Inspector Repository" icon="github" href="https://github.com/modelcontextprotocol/inspector">
    Check out the MCP Inspector source code
  </Card>

  <Card title="Debugging Guide" icon="bug" href="/docs/tools/debugging">
    Learn about broader debugging strategies
  </Card>
</CardGroup>

# Example Servers

Source: https://modelcontextprotocol.io/examples

A list of example servers and implementations

This page showcases various Model Context Protocol (MCP) servers that demonstrate the protocol's capabilities and versatility. These servers enable Large Language Models (LLMs) to securely access tools and data sources.

## Reference implementations

These official reference servers demonstrate core MCP features and SDK usage:

### Data and file systems

- **[Filesystem](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem)** - Secure file operations with configurable access controls
- **[PostgreSQL](https://github.com/modelcontextprotocol/servers/tree/main/src/postgres)** - Read-only database access with schema inspection capabilities
- **[SQLite](https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite)** - Database interaction and business intelligence features
- **[Google Drive](https://github.com/modelcontextprotocol/servers/tree/main/src/gdrive)** - File access and search capabilities for Google Drive

### Development tools

- **[Git](https://github.com/modelcontextprotocol/servers/tree/main/src/git)** - Tools to read, search, and manipulate Git repositories
- **[GitHub](https://github.com/modelcontextprotocol/servers/tree/main/src/github)** - Repository management, file operations, and GitHub API integration
- **[GitLab](https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab)** - GitLab API integration enabling project management
- **[Sentry](https://github.com/modelcontextprotocol/servers/tree/main/src/sentry)** - Retrieving and analyzing issues from Sentry.io

### Web and browser automation

- **[Brave Search](https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search)** - Web and local search using Brave's Search API
- **[Fetch](https://github.com/modelcontextprotocol/servers/tree/main/src/fetch)** - Web content fetching and conversion optimized for LLM usage
- **[Puppeteer](https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer)** - Browser automation and web scraping capabilities

### Productivity and communication

- **[Slack](https://github.com/modelcontextprotocol/servers/tree/main/src/slack)** - Channel management and messaging capabilities
- **[Google Maps](https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps)** - Location services, directions, and place details
- **[Memory](https://github.com/modelcontextprotocol/servers/tree/main/src/memory)** - Knowledge graph-based persistent memory system

### AI and specialized tools

- **[EverArt](https://github.com/modelcontextprotocol/servers/tree/main/src/everart)** - AI image generation using various models
- **[Sequential Thinking](https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking)** - Dynamic problem-solving through thought sequences
- **[AWS KB Retrieval](https://github.com/modelcontextprotocol/servers/tree/main/src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime

## Official integrations

These MCP servers are maintained by companies for their platforms:

- **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze logs, traces, and event data using natural language
- **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud
- **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy and manage resources on the Cloudflare developer platform
- **[E2B](https://github.com/e2b-dev/mcp-server)** - Execute code in secure cloud sandboxes
- **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform
- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through Markdown notes in Obsidian vaults
- **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory using the Qdrant vector search engine
- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Access crash reporting and monitoring data
- **[Search1API](https://github.com/fatwang2/search1api-mcp)** - Unified API for search, crawling, and sitemaps
- **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with the Stripe API
- **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interface with the Tinybird serverless ClickHouse platform

## Community highlights

A growing ecosystem of community-developed servers extends MCP's capabilities:

- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Manage containers, images, volumes, and networks
- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Manage pods, deployments, and services
- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Project management and issue tracking
- **[Snowflake](https://github.com/datawiz168/mcp-snowflake-service)** - Interact with Snowflake databases
- **[Spotify](https://github.com/varunneal/spotify-mcp)** - Control Spotify playback and manage playlists
- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Task management integration

> **Note:** Community servers are untested and should be used at your own risk. They are not affiliated with or endorsed by Anthropic.

For a complete list of community servers, visit the [MCP Servers Repository](https://github.com/modelcontextprotocol/servers).

## Getting started

### Using reference servers

TypeScript-based servers can be used directly with `npx`:

```bash
npx -y @modelcontextprotocol/server-memory
```

Python-based servers can be used with `uvx` (recommended) or `pip`:

```bash
# Using uvx
uvx mcp-server-git

# Using pip
pip install mcp-server-git
python -m mcp_server_git
```

### Configuring with Claude

To use an MCP server with Claude, add it to your configuration:

```json
{
  "mcpServers": {
    "memory": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-memory"]
    },
    "filesystem": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "/path/to/allowed/files"]
    },
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
      }
    }
  }
}
```

## Additional resources

- [MCP Servers Repository](https://github.com/modelcontextprotocol/servers) - Complete collection of reference implementations and community servers
- [Awesome MCP Servers](https://github.com/punkpeye/awesome-mcp-servers) - Curated list of MCP servers
- [MCP CLI](https://github.com/wong2/mcp-cli) - Command-line inspector for testing MCP servers
- [MCP Get](https://mcp-get.com) - Tool for installing and managing MCP servers
- [Supergateway](https://github.com/supercorp-ai/supergateway) - Run MCP stdio servers over SSE

Visit our [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions) to engage with the MCP community.

# Introduction

Source: https://modelcontextprotocol.io/introduction

Get started with the Model Context Protocol (MCP)

<Note>Java SDK released! Check out [what else is new.](/development/updates)</Note>

MCP is an open protocol that standardizes how applications provide context to LLMs. Think of MCP like a USB-C port for AI applications. Just as USB-C provides a standardized way to connect your devices to various peripherals and accessories, MCP provides a standardized way to connect AI models to different data sources and tools.

## Why MCP?

MCP helps you build agents and complex workflows on top of LLMs. LLMs frequently need to integrate with data and tools, and MCP provides:

- A growing list of pre-built integrations that your LLM can directly plug into
- The flexibility to switch between LLM providers and vendors
- Best practices for securing your data within your infrastructure

### General architecture

At its core, MCP follows a client-server architecture where a host application can connect to multiple servers:

```mermaid
flowchart LR
    subgraph "Your Computer"
        Host["Host with MCP Client\n(Claude, IDEs, Tools)"]
        S1["MCP Server A"]
        S2["MCP Server B"]
        S3["MCP Server C"]
        Host <-->|"MCP Protocol"| S1
        Host <-->|"MCP Protocol"| S2
        Host <-->|"MCP Protocol"| S3
        S1 <--> D1[("Local\nData Source A")]
        S2 <--> D2[("Local\nData Source B")]
    end
    subgraph "Internet"
        S3 <-->|"Web APIs"| D3[("Remote\nService C")]
    end
```

- **MCP Hosts**: Programs like Claude Desktop, IDEs, or AI tools that want to access data through MCP
- **MCP Clients**: Protocol clients that maintain 1:1 connections with servers
- **MCP Servers**: Lightweight programs that each expose specific capabilities through the standardized Model Context Protocol
- **Local Data Sources**: Your computer's files, databases, and services that MCP servers can securely access
- **Remote Services**: External systems available over the internet (e.g., through APIs) that MCP servers can connect to

## Get started

Choose the path that best fits your needs:

#### Quick Starts

<CardGroup cols={2}>
  <Card title="For Server Developers" icon="bolt" href="/quickstart/server">
    Get started building your own server to use in Claude for Desktop and other clients
  </Card>

  <Card title="For Client Developers" icon="bolt" href="/quickstart/client">
    Get started building your own client that can integrate with all MCP servers
  </Card>

  <Card title="For Claude Desktop Users" icon="bolt" href="/quickstart/user">
    Get started using pre-built servers in Claude for Desktop
  </Card>
</CardGroup>

#### Examples

<CardGroup cols={2}>
  <Card title="Example Servers" icon="grid" href="/examples">
    Check out our gallery of official MCP servers and implementations
  </Card>

  <Card title="Example Clients" icon="cubes" href="/clients">
    View the list of clients that support MCP integrations
  </Card>
</CardGroup>

## Tutorials

<CardGroup cols={2}>
  <Card title="Building MCP with LLMs" icon="comments" href="/tutorials/building-mcp-with-llms">
    Learn how to use LLMs like Claude to speed up your MCP development
  </Card>

  <Card title="Debugging Guide" icon="bug" href="/docs/tools/debugging">
    Learn how to effectively debug MCP servers and integrations
  </Card>

  <Card title="MCP Inspector" icon="magnifying-glass" href="/docs/tools/inspector">
    Test and inspect your MCP servers with our interactive debugging tool
  </Card>
</CardGroup>

## Explore MCP

Dive deeper into MCP's core concepts and capabilities:

<CardGroup cols={2}>
  <Card title="Core architecture" icon="sitemap" href="/docs/concepts/architecture">
    Understand how MCP connects clients, servers, and LLMs
  </Card>

  <Card title="Resources" icon="database" href="/docs/concepts/resources">
    Expose data and content from your servers to LLMs
  </Card>

  <Card title="Prompts" icon="message" href="/docs/concepts/prompts">
    Create reusable prompt templates and workflows
  </Card>

  <Card title="Tools" icon="wrench" href="/docs/concepts/tools">
    Enable LLMs to perform actions through your server
  </Card>

  <Card title="Sampling" icon="robot" href="/docs/concepts/sampling">
    Let your servers request completions from LLMs
  </Card>

  <Card title="Transports" icon="network-wired" href="/docs/concepts/transports">
    Learn about MCP's communication mechanism
  </Card>
</CardGroup>

## Contributing

Want to contribute? Check out our [Contributing Guide](/development/contributing) to learn how you can help improve MCP.

## Support and Feedback

Here's how to get help or provide feedback:

- For bug reports and feature requests related to the MCP specification, SDKs, or documentation (open source), please [create a GitHub issue](https://github.com/modelcontextprotocol)
- For discussions or Q\&A about the MCP specification, use the [specification discussions](https://github.com/modelcontextprotocol/specification/discussions)
- For discussions or Q\&A about other MCP open source components, use the [organization discussions](https://github.com/orgs/modelcontextprotocol/discussions)
- For bug reports, feature requests, and questions related to Claude.app and claude.ai's MCP integration, please email [mcp-support@anthropic.com](mailto:mcp-support@anthropic.com)

# For Client Developers

Source: https://modelcontextprotocol.io/quickstart/client

Get started building your own client that can integrate with all MCP servers.

In this tutorial, you'll learn how to build a LLM-powered chatbot client that connects to MCP servers. It helps to have gone through the [Server quickstart](/quickstart/server) that guides you through the basic of building your first server.

<Tabs>
  <Tab title="Python">
    [You can find the complete code for this tutorial here.](https://github.com/modelcontextprotocol/quickstart-resources/tree/main/mcp-client)

    ## System Requirements

    Before starting, ensure your system meets these requirements:

    * Mac or Windows computer
    * Latest Python version installed
    * Latest version of `uv` installed

    ## Setting Up Your Environment

    First, create a new Python project with `uv`:

    ```bash
    # Create project directory
    uv init mcp-client
    cd mcp-client

    # Create virtual environment
    uv venv

    # Activate virtual environment
    # On Windows:
    .venv\Scripts\activate
    # On Unix or MacOS:
    source .venv/bin/activate

    # Install required packages
    uv add mcp anthropic python-dotenv

    # Remove boilerplate files
    rm hello.py

    # Create our main file
    touch client.py
    ```

    ## Setting Up Your API Key

    You'll need an Anthropic API key from the [Anthropic Console](https://console.anthropic.com/settings/keys).

    Create a `.env` file to store it:

    ```bash
    # Create .env file
    touch .env
    ```

    Add your key to the `.env` file:

    ```bash
    ANTHROPIC_API_KEY=<your key here>
    ```

    Add `.env` to your `.gitignore`:

    ```bash
    echo ".env" >> .gitignore
    ```

    <Warning>
      Make sure you keep your `ANTHROPIC_API_KEY` secure!
    </Warning>

    ## Creating the Client

    ### Basic Client Structure

    First, let's set up our imports and create the basic client class:

    ```python
    import asyncio
    from typing import Optional
    from contextlib import AsyncExitStack

    from mcp import ClientSession, StdioServerParameters
    from mcp.client.stdio import stdio_client

    from anthropic import Anthropic
    from dotenv import load_dotenv

    load_dotenv()  # load environment variables from .env

    class MCPClient:
        def __init__(self):
            # Initialize session and client objects
            self.session: Optional[ClientSession] = None
            self.exit_stack = AsyncExitStack()
            self.anthropic = Anthropic()
        # methods will go here
    ```

    ### Server Connection Management

    Next, we'll implement the method to connect to an MCP server:

    ```python
    async def connect_to_server(self, server_script_path: str):
        """Connect to an MCP server

        Args:
            server_script_path: Path to the server script (.py or .js)
        """
        is_python = server_script_path.endswith('.py')
        is_js = server_script_path.endswith('.js')
        if not (is_python or is_js):
            raise ValueError("Server script must be a .py or .js file")

        command = "python" if is_python else "node"
        server_params = StdioServerParameters(
            command=command,
            args=[server_script_path],
            env=None
        )

        stdio_transport = await self.exit_stack.enter_async_context(stdio_client(server_params))
        self.stdio, self.write = stdio_transport
        self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write))

        await self.session.initialize()

        # List available tools
        response = await self.session.list_tools()
        tools = response.tools
        print("\nConnected to server with tools:", [tool.name for tool in tools])
    ```

    ### Query Processing Logic

    Now let's add the core functionality for processing queries and handling tool calls:

    ```python
    async def process_query(self, query: str) -> str:
        """Process a query using Claude and available tools"""
        messages = [
            {
                "role": "user",
                "content": query
            }
        ]

        response = await self.session.list_tools()
        available_tools = [{
            "name": tool.name,
            "description": tool.description,
            "input_schema": tool.inputSchema
        } for tool in response.tools]

        # Initial Claude API call
        response = self.anthropic.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=1000,
            messages=messages,
            tools=available_tools
        )

        # Process response and handle tool calls
        tool_results = []
        final_text = []

        assistant_message_content = []
        for content in response.content:
            if content.type == 'text':
                final_text.append(content.text)
                assistant_message_content.append(content)
            elif content.type == 'tool_use':
                tool_name = content.name
                tool_args = content.input

                # Execute tool call
                result = await self.session.call_tool(tool_name, tool_args)
                tool_results.append({"call": tool_name, "result": result})
                final_text.append(f"[Calling tool {tool_name} with args {tool_args}]")

                assistant_message_content.append(content)
                messages.append({
                    "role": "assistant",
                    "content": assistant_message_content
                })
                messages.append({
                    "role": "user",
                    "content": [
                        {
                            "type": "tool_result",
                            "tool_use_id": content.id,
                            "content": result.content
                        }
                    ]
                })

                # Get next response from Claude
                response = self.anthropic.messages.create(
                    model="claude-3-5-sonnet-20241022",
                    max_tokens=1000,
                    messages=messages,
                    tools=available_tools
                )

                final_text.append(response.content[0].text)

        return "\n".join(final_text)
    ```

    ### Interactive Chat Interface

    Now we'll add the chat loop and cleanup functionality:

    ```python
    async def chat_loop(self):
        """Run an interactive chat loop"""
        print("\nMCP Client Started!")
        print("Type your queries or 'quit' to exit.")

        while True:
            try:
                query = input("\nQuery: ").strip()

                if query.lower() == 'quit':
                    break

                response = await self.process_query(query)
                print("\n" + response)

            except Exception as e:
                print(f"\nError: {str(e)}")

    async def cleanup(self):
        """Clean up resources"""
        await self.exit_stack.aclose()
    ```

    ### Main Entry Point

    Finally, we'll add the main execution logic:

    ```python
    async def main():
        if len(sys.argv) < 2:
            print("Usage: python client.py <path_to_server_script>")
            sys.exit(1)

        client = MCPClient()
        try:
            await client.connect_to_server(sys.argv[1])
            await client.chat_loop()
        finally:
            await client.cleanup()

    if __name__ == "__main__":
        import sys
        asyncio.run(main())
    ```

    You can find the complete `client.py` file [here.](https://gist.github.com/zckly/f3f28ea731e096e53b39b47bf0a2d4b1)

    ## Key Components Explained

    ### 1. Client Initialization

    * The `MCPClient` class initializes with session management and API clients
    * Uses `AsyncExitStack` for proper resource management
    * Configures the Anthropic client for Claude interactions

    ### 2. Server Connection

    * Supports both Python and Node.js servers
    * Validates server script type
    * Sets up proper communication channels
    * Initializes the session and lists available tools

    ### 3. Query Processing

    * Maintains conversation context
    * Handles Claude's responses and tool calls
    * Manages the message flow between Claude and tools
    * Combines results into a coherent response

    ### 4. Interactive Interface

    * Provides a simple command-line interface
    * Handles user input and displays responses
    * Includes basic error handling
    * Allows graceful exit

    ### 5. Resource Management

    * Proper cleanup of resources
    * Error handling for connection issues
    * Graceful shutdown procedures

    ## Common Customization Points

    1. **Tool Handling**
       * Modify `process_query()` to handle specific tool types
       * Add custom error handling for tool calls
       * Implement tool-specific response formatting

    2. **Response Processing**
       * Customize how tool results are formatted
       * Add response filtering or transformation
       * Implement custom logging

    3. **User Interface**
       * Add a GUI or web interface
       * Implement rich console output
       * Add command history or auto-completion

    ## Running the Client

    To run your client with any MCP server:

    ```bash
    uv run client.py path/to/server.py # python server
    uv run client.py path/to/build/index.js # node server
    ```

    <Note>
      If you're continuing the weather tutorial from the server quickstart, your command might look something like this: `python client.py .../weather/src/weather/server.py`
    </Note>

    The client will:

    1. Connect to the specified server
    2. List available tools
    3. Start an interactive chat session where you can:
       * Enter queries
       * See tool executions
       * Get responses from Claude

    Here's an example of what it should look like if connected to the weather server from the server quickstart:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/client-claude-cli-python.png" />
    </Frame>

    ## How It Works

    When you submit a query:

    1. The client gets the list of available tools from the server
    2. Your query is sent to Claude along with tool descriptions
    3. Claude decides which tools (if any) to use
    4. The client executes any requested tool calls through the server
    5. Results are sent back to Claude
    6. Claude provides a natural language response
    7. The response is displayed to you

    ## Best practices

    1. **Error Handling**
       * Always wrap tool calls in try-catch blocks
       * Provide meaningful error messages
       * Gracefully handle connection issues

    2. **Resource Management**
       * Use `AsyncExitStack` for proper cleanup
       * Close connections when done
       * Handle server disconnections

    3. **Security**
       * Store API keys securely in `.env`
       * Validate server responses
       * Be cautious with tool permissions

    ## Troubleshooting

    ### Server Path Issues

    * Double-check the path to your server script is correct
    * Use the absolute path if the relative path isn't working
    * For Windows users, make sure to use forward slashes (/) or escaped backslashes (\\) in the path
    * Verify the server file has the correct extension (.py for Python or .js for Node.js)

    Example of correct path usage:

    ```bash
    # Relative path
    uv run client.py ./server/weather.py

    # Absolute path
    uv run client.py /Users/username/projects/mcp-server/weather.py

    # Windows path (either format works)
    uv run client.py C:/projects/mcp-server/weather.py
    uv run client.py C:\\projects\\mcp-server\\weather.py
    ```

    ### Response Timing

    * The first response might take up to 30 seconds to return
    * This is normal and happens while:
      * The server initializes
      * Claude processes the query
      * Tools are being executed
    * Subsequent responses are typically faster
    * Don't interrupt the process during this initial waiting period

    ### Common Error Messages

    If you see:

    * `FileNotFoundError`: Check your server path
    * `Connection refused`: Ensure the server is running and the path is correct
    * `Tool execution failed`: Verify the tool's required environment variables are set
    * `Timeout error`: Consider increasing the timeout in your client configuration

  </Tab>

  <Tab title="Java">
    <Note>
      This is a quickstart demo based on Spring AI MCP auto-configuration and boot starters.
      To learn how to create sync and async MCP Clients manually, consult the [Java SDK Client](/sdk/java/mcp-client) documentation
    </Note>

    This example demonstrates how to build an interactive chatbot that combines Spring AI's Model Context Protocol (MCP) with the [Brave Search MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search). The application creates a conversational interface powered by Anthropic's Claude AI model that can perform internet searches through Brave Search, enabling natural language interactions with real-time web data.
    [You can find the complete code for this tutorial here.](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/web-search/brave-chatbot)

    ## System Requirements

    Before starting, ensure your system meets these requirements:

    * Java 17 or higher
    * Maven 3.6+
    * npx package manager
    * Anthropic API key (Claude)
    * Brave Search API key

    ## Setting Up Your Environment

    1. Install npx (Node Package eXecute):
       First, make sure to install [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)
       and then run:
       ```bash
       npm install -g npx
       ```

    2. Clone the repository:
       ```bash
       git clone https://github.com/spring-projects/spring-ai-examples.git
       cd model-context-protocol/brave-chatbot
       ```

    3. Set up your API keys:
       ```bash
       export ANTHROPIC_API_KEY='your-anthropic-api-key-here'
       export BRAVE_API_KEY='your-brave-api-key-here'
       ```

    4. Build the application:
       ```bash
       ./mvnw clean install
       ```

    5. Run the application using Maven:
       ```bash
       ./mvnw spring-boot:run
       ```

    <Warning>
      Make sure you keep your `ANTHROPIC_API_KEY` and `BRAVE_API_KEY` keys secure!
    </Warning>

    ## How it Works

    The application integrates Spring AI with the Brave Search MCP server through several components:

    ### MCP Client Configuration

    1. Required dependencies in pom.xml:

    ```xml
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-mcp-client-spring-boot-starter</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-anthropic-spring-boot-starter</artifactId>
    </dependency>
    ```

    2. Application properties (application.yml):

    ```yml
    spring:
      ai:
        mcp:
          client:
            enabled: true
            name: brave-search-client
            version: 1.0.0
            type: SYNC
            request-timeout: 20s
            stdio:
              root-change-notification: true
              servers-configuration: classpath:/mcp-servers-config.json
        anthropic:
          api-key: ${ANTHROPIC_API_KEY}
    ```

    This activates the `spring-ai-mcp-client-spring-boot-starter` to create one or more `McpClient`s based on the provided server configuration.

    3. MCP Server Configuration (`mcp-servers-config.json`):

    ```json
    {
      "mcpServers": {
        "brave-search": {
          "command": "npx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-brave-search"
          ],
          "env": {
            "BRAVE_API_KEY": "<PUT YOUR BRAVE API KEY>"
          }
        }
      }
    }
    ```

    ### Chat Implementation

    The chatbot is implemented using Spring AI's ChatClient with MCP tool integration:

    ```java
    var chatClient = chatClientBuilder
        .defaultSystem("You are useful assistant, expert in AI and Java.")
        .defaultTools((Object[]) mcpToolAdapter.toolCallbacks())
        .defaultAdvisors(new MessageChatMemoryAdvisor(new InMemoryChatMemory()))
        .build();
    ```

    Key features:

    * Uses Claude AI model for natural language understanding
    * Integrates Brave Search through MCP for real-time web search capabilities
    * Maintains conversation memory using InMemoryChatMemory
    * Runs as an interactive command-line application

    ### Build and run

    ```bash
    ./mvnw clean install
    java -jar ./target/ai-mcp-brave-chatbot-0.0.1-SNAPSHOT.jar
    ```

    or

    ```bash
    ./mvnw spring-boot:run
    ```

    The application will start an interactive chat session where you can ask questions. The chatbot will use Brave Search when it needs to find information from the internet to answer your queries.

    The chatbot can:

    * Answer questions using its built-in knowledge
    * Perform web searches when needed using Brave Search
    * Remember context from previous messages in the conversation
    * Combine information from multiple sources to provide comprehensive answers

    ### Advanced Configuration

    The MCP client supports additional configuration options:

    * Client customization through `McpSyncClientCustomizer` or `McpAsyncClientCustomizer`
    * Multiple clients with multiple transport types: `STDIO` and `SSE` (Server-Sent Events)
    * Integration with Spring AI's tool execution framework
    * Automatic client initialization and lifecycle management

    For WebFlux-based applications, you can use the WebFlux starter instead:

    ```xml
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-mcp-client-webflux-spring-boot-starter</artifactId>
    </dependency>
    ```

    This provides similar functionality but uses a WebFlux-based SSE transport implementation, recommended for production deployments.

  </Tab>
</Tabs>

## Next steps

<CardGroup cols={2}>
  <Card title="Example servers" icon="grid" href="/examples">
    Check out our gallery of official MCP servers and implementations
  </Card>

  <Card title="Clients" icon="cubes" href="/clients">
    View the list of clients that support MCP integrations
  </Card>

  <Card title="Building MCP with LLMs" icon="comments" href="/building-mcp-with-llms">
    Learn how to use LLMs like Claude to speed up your MCP development
  </Card>

  <Card title="Core architecture" icon="sitemap" href="/docs/concepts/architecture">
    Understand how MCP connects clients, servers, and LLMs
  </Card>
</CardGroup>

# For Server Developers

Source: https://modelcontextprotocol.io/quickstart/server

Get started building your own server to use in Claude for Desktop and other clients.

In this tutorial, we'll build a simple MCP weather server and connect it to a host, Claude for Desktop. We'll start with a basic setup, and then progress to more complex use cases.

### What we'll be building

Many LLMs (including Claude) do not currently have the ability to fetch the forecast and severe weather alerts. Let's use MCP to solve that!

We'll build a server that exposes two tools: `get-alerts` and `get-forecast`. Then we'll connect the server to an MCP host (in this case, Claude for Desktop):

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/weather-alerts.png" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/current-weather.png" />
</Frame>

<Note>
  Servers can connect to any client. We've chosen Claude for Desktop here for simplicity, but we also have guides on [building your own client](/quickstart/client) as well as a [list of other clients here](/clients).
</Note>

<Accordion title="Why Claude for Desktop and not Claude.ai?">
  Because servers are locally run, MCP currently only supports desktop hosts. Remote hosts are in active development.
</Accordion>

### Core MCP Concepts

MCP servers can provide three main types of capabilities:

1. **Resources**: File-like data that can be read by clients (like API responses or file contents)
2. **Tools**: Functions that can be called by the LLM (with user approval)
3. **Prompts**: Pre-written templates that help users accomplish specific tasks

This tutorial will primarily focus on tools.

<Tabs>
  <Tab title="Python">
    Let's get started with building our weather server! [You can find the complete code for what we'll be building here.](https://github.com/modelcontextprotocol/quickstart-resources/tree/main/weather-server-python)

    ### Prerequisite knowledge

    This quickstart assumes you have familiarity with:

    * Python
    * LLMs like Claude

    ### System requirements

    * Python 3.10 or higher installed.
    * You must use the Python MCP SDK 1.2.0 or higher.

    ### Set up your environment

    First, let's install `uv` and set up our Python project and environment:

    <CodeGroup>
      ```bash MacOS/Linux
      curl -LsSf https://astral.sh/uv/install.sh | sh
      ```

      ```powershell Windows
      powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
      ```
    </CodeGroup>

    Make sure to restart your terminal afterwards to ensure that the `uv` command gets picked up.

    Now, let's create and set up our project:

    <CodeGroup>
      ```bash MacOS/Linux
      # Create a new directory for our project
      uv init weather
      cd weather

      # Create virtual environment and activate it
      uv venv
      source .venv/bin/activate

      # Install dependencies
      uv add "mcp[cli]" httpx

      # Create our server file
      touch weather.py
      ```

      ```powershell Windows
      # Create a new directory for our project
      uv init weather
      cd weather

      # Create virtual environment and activate it
      uv venv
      .venv\Scripts\activate

      # Install dependencies
      uv add mcp[cli] httpx

      # Create our server file
      new-item weather.py
      ```
    </CodeGroup>

    Now let's dive into building your server.

    ## Building your server

    ### Importing packages and setting up the instance

    Add these to the top of your `weather.py`:

    ```python
    from typing import Any
    import httpx
    from mcp.server.fastmcp import FastMCP

    # Initialize FastMCP server
    mcp = FastMCP("weather")

    # Constants
    NWS_API_BASE = "https://api.weather.gov"
    USER_AGENT = "weather-app/1.0"
    ```

    The FastMCP class uses Python type hints and docstrings to automatically generate tool definitions, making it easy to create and maintain MCP tools.

    ### Helper functions

    Next, let's add our helper functions for querying and formatting the data from the National Weather Service API:

    ```python
    async def make_nws_request(url: str) -> dict[str, Any] | None:
        """Make a request to the NWS API with proper error handling."""
        headers = {
            "User-Agent": USER_AGENT,
            "Accept": "application/geo+json"
        }
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get(url, headers=headers, timeout=30.0)
                response.raise_for_status()
                return response.json()
            except Exception:
                return None

    def format_alert(feature: dict) -> str:
        """Format an alert feature into a readable string."""
        props = feature["properties"]
        return f"""
    Event: {props.get('event', 'Unknown')}
    Area: {props.get('areaDesc', 'Unknown')}
    Severity: {props.get('severity', 'Unknown')}
    Description: {props.get('description', 'No description available')}
    Instructions: {props.get('instruction', 'No specific instructions provided')}
    """
    ```

    ### Implementing tool execution

    The tool execution handler is responsible for actually executing the logic of each tool. Let's add it:

    ```python
    @mcp.tool()
    async def get_alerts(state: str) -> str:
        """Get weather alerts for a US state.

        Args:
            state: Two-letter US state code (e.g. CA, NY)
        """
        url = f"{NWS_API_BASE}/alerts/active/area/{state}"
        data = await make_nws_request(url)

        if not data or "features" not in data:
            return "Unable to fetch alerts or no alerts found."

        if not data["features"]:
            return "No active alerts for this state."

        alerts = [format_alert(feature) for feature in data["features"]]
        return "\n---\n".join(alerts)

    @mcp.tool()
    async def get_forecast(latitude: float, longitude: float) -> str:
        """Get weather forecast for a location.

        Args:
            latitude: Latitude of the location
            longitude: Longitude of the location
        """
        # First get the forecast grid endpoint
        points_url = f"{NWS_API_BASE}/points/{latitude},{longitude}"
        points_data = await make_nws_request(points_url)

        if not points_data:
            return "Unable to fetch forecast data for this location."

        # Get the forecast URL from the points response
        forecast_url = points_data["properties"]["forecast"]
        forecast_data = await make_nws_request(forecast_url)

        if not forecast_data:
            return "Unable to fetch detailed forecast."

        # Format the periods into a readable forecast
        periods = forecast_data["properties"]["periods"]
        forecasts = []
        for period in periods[:5]:  # Only show next 5 periods
            forecast = f"""
    {period['name']}:
    Temperature: {period['temperature']}°{period['temperatureUnit']}
    Wind: {period['windSpeed']} {period['windDirection']}
    Forecast: {period['detailedForecast']}
    """
            forecasts.append(forecast)

        return "\n---\n".join(forecasts)
    ```

    ### Running the server

    Finally, let's initialize and run the server:

    ```python
    if __name__ == "__main__":
        # Initialize and run the server
        mcp.run(transport='stdio')
    ```

    Your server is complete! Run `uv run weather.py` to confirm that everything's working.

    Let's now test your server from an existing MCP host, Claude for Desktop.

    ## Testing your server with Claude for Desktop

    <Note>
      Claude for Desktop is not yet available on Linux. Linux users can proceed to the [Building a client](/quickstart/client) tutorial to build an MCP client that connects to the server we just built.
    </Note>

    First, make sure you have Claude for Desktop installed. [You can install the latest version
    here.](https://claude.ai/download) If you already have Claude for Desktop, **make sure it's updated to the latest version.**

    We'll need to configure Claude for Desktop for whichever MCP servers you want to use. To do this, open your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor. Make sure to create the file if it doesn't exist.

    For example, if you have [VS Code](https://code.visualstudio.com/) installed:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```bash
        code ~/Library/Application\ Support/Claude/claude_desktop_config.json
        ```
      </Tab>

      <Tab title="Windows">
        ```powershell
        code $env:AppData\Claude\claude_desktop_config.json
        ```
      </Tab>
    </Tabs>

    You'll then add your servers in the `mcpServers` key. The MCP UI elements will only show up in Claude for Desktop if at least one server is properly configured.

    In this case, we'll add our single weather server like so:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```json Python
        {
            "mcpServers": {
                "weather": {
                    "command": "uv",
                    "args": [
                        "--directory",
                        "/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather",
                        "run",
                        "weather.py"
                    ]
                }
            }
        }
        ```
      </Tab>

      <Tab title="Windows">
        ```json Python
        {
            "mcpServers": {
                "weather": {
                    "command": "uv",
                    "args": [
                        "--directory",
                        "C:\\ABSOLUTE\\PATH\\TO\\PARENT\\FOLDER\\weather",
                        "run",
                        "weather.py"
                    ]
                }
            }
        }
        ```
      </Tab>
    </Tabs>

    <Warning>
      You may need to put the full path to the `uv` executable in the `command` field. You can get this by running `which uv` on MacOS/Linux or `where uv` on Windows.
    </Warning>

    <Note>
      Make sure you pass in the absolute path to your server.
    </Note>

    This tells Claude for Desktop:

    1. There's an MCP server named "weather"
    2. To launch it by running `uv --directory /ABSOLUTE/PATH/TO/PARENT/FOLDER/weather run weather`

    Save the file, and restart **Claude for Desktop**.

  </Tab>

  <Tab title="Node">
    Let's get started with building our weather server! [You can find the complete code for what we'll be building here.](https://github.com/modelcontextprotocol/quickstart-resources/tree/main/weather-server-typescript)

    ### Prerequisite knowledge

    This quickstart assumes you have familiarity with:

    * TypeScript
    * LLMs like Claude

    ### System requirements

    For TypeScript, make sure you have the latest version of Node installed.

    ### Set up your environment

    First, let's install Node.js and npm if you haven't already. You can download them from [nodejs.org](https://nodejs.org/).
    Verify your Node.js installation:

    ```bash
    node --version
    npm --version
    ```

    For this tutorial, you'll need Node.js version 16 or higher.

    Now, let's create and set up our project:

    <CodeGroup>
      ```bash MacOS/Linux
      # Create a new directory for our project
      mkdir weather
      cd weather

      # Initialize a new npm project
      npm init -y

      # Install dependencies
      npm install @modelcontextprotocol/sdk zod
      npm install -D @types/node typescript

      # Create our files
      mkdir src
      touch src/index.ts
      ```

      ```powershell Windows
      # Create a new directory for our project
      md weather
      cd weather

      # Initialize a new npm project
      npm init -y

      # Install dependencies
      npm install @modelcontextprotocol/sdk zod
      npm install -D @types/node typescript

      # Create our files
      md src
      new-item src\index.ts
      ```
    </CodeGroup>

    Update your package.json to add type: "module" and a build script:

    ```json package.json
    {
      "type": "module",
      "bin": {
        "weather": "./build/index.js"
      },
      "scripts": {
        "build": "tsc && node -e \"require('fs').chmodSync('build/index.js', '755')\"",
      },
      "files": [
        "build"
      ],
    }
    ```

    Create a `tsconfig.json` in the root of your project:

    ```json tsconfig.json
    {
      "compilerOptions": {
        "target": "ES2022",
        "module": "Node16",
        "moduleResolution": "Node16",
        "outDir": "./build",
        "rootDir": "./src",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true
      },
      "include": ["src/**/*"],
      "exclude": ["node_modules"]
    }
    ```

    Now let's dive into building your server.

    ## Building your server

    ### Importing packages and setting up the instance

    Add these to the top of your `src/index.ts`:

    ```typescript
    import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
    import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
    import { z } from "zod";

    const NWS_API_BASE = "https://api.weather.gov";
    const USER_AGENT = "weather-app/1.0";

    // Create server instance
    const server = new McpServer({
      name: "weather",
      version: "1.0.0",
    });
    ```

    ### Helper functions

    Next, let's add our helper functions for querying and formatting the data from the National Weather Service API:

    ```typescript
    // Helper function for making NWS API requests
    async function makeNWSRequest<T>(url: string): Promise<T | null> {
      const headers = {
        "User-Agent": USER_AGENT,
        Accept: "application/geo+json",
      };

      try {
        const response = await fetch(url, { headers });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return (await response.json()) as T;
      } catch (error) {
        console.error("Error making NWS request:", error);
        return null;
      }
    }

    interface AlertFeature {
      properties: {
        event?: string;
        areaDesc?: string;
        severity?: string;
        status?: string;
        headline?: string;
      };
    }

    // Format alert data
    function formatAlert(feature: AlertFeature): string {
      const props = feature.properties;
      return [
        `Event: ${props.event || "Unknown"}`,
        `Area: ${props.areaDesc || "Unknown"}`,
        `Severity: ${props.severity || "Unknown"}`,
        `Status: ${props.status || "Unknown"}`,
        `Headline: ${props.headline || "No headline"}`,
        "---",
      ].join("\n");
    }

    interface ForecastPeriod {
      name?: string;
      temperature?: number;
      temperatureUnit?: string;
      windSpeed?: string;
      windDirection?: string;
      shortForecast?: string;
    }

    interface AlertsResponse {
      features: AlertFeature[];
    }

    interface PointsResponse {
      properties: {
        forecast?: string;
      };
    }

    interface ForecastResponse {
      properties: {
        periods: ForecastPeriod[];
      };
    }
    ```

    ### Implementing tool execution

    The tool execution handler is responsible for actually executing the logic of each tool. Let's add it:

    ```typescript
    // Register weather tools
    server.tool(
      "get-alerts",
      "Get weather alerts for a state",
      {
        state: z.string().length(2).describe("Two-letter state code (e.g. CA, NY)"),
      },
      async ({ state }) => {
        const stateCode = state.toUpperCase();
        const alertsUrl = `${NWS_API_BASE}/alerts?area=${stateCode}`;
        const alertsData = await makeNWSRequest<AlertsResponse>(alertsUrl);

        if (!alertsData) {
          return {
            content: [
              {
                type: "text",
                text: "Failed to retrieve alerts data",
              },
            ],
          };
        }

        const features = alertsData.features || [];
        if (features.length === 0) {
          return {
            content: [
              {
                type: "text",
                text: `No active alerts for ${stateCode}`,
              },
            ],
          };
        }

        const formattedAlerts = features.map(formatAlert);
        const alertsText = `Active alerts for ${stateCode}:\n\n${formattedAlerts.join("\n")}`;

        return {
          content: [
            {
              type: "text",
              text: alertsText,
            },
          ],
        };
      },
    );

    server.tool(
      "get-forecast",
      "Get weather forecast for a location",
      {
        latitude: z.number().min(-90).max(90).describe("Latitude of the location"),
        longitude: z.number().min(-180).max(180).describe("Longitude of the location"),
      },
      async ({ latitude, longitude }) => {
        // Get grid point data
        const pointsUrl = `${NWS_API_BASE}/points/${latitude.toFixed(4)},${longitude.toFixed(4)}`;
        const pointsData = await makeNWSRequest<PointsResponse>(pointsUrl);

        if (!pointsData) {
          return {
            content: [
              {
                type: "text",
                text: `Failed to retrieve grid point data for coordinates: ${latitude}, ${longitude}. This location may not be supported by the NWS API (only US locations are supported).`,
              },
            ],
          };
        }

        const forecastUrl = pointsData.properties?.forecast;
        if (!forecastUrl) {
          return {
            content: [
              {
                type: "text",
                text: "Failed to get forecast URL from grid point data",
              },
            ],
          };
        }

        // Get forecast data
        const forecastData = await makeNWSRequest<ForecastResponse>(forecastUrl);
        if (!forecastData) {
          return {
            content: [
              {
                type: "text",
                text: "Failed to retrieve forecast data",
              },
            ],
          };
        }

        const periods = forecastData.properties?.periods || [];
        if (periods.length === 0) {
          return {
            content: [
              {
                type: "text",
                text: "No forecast periods available",
              },
            ],
          };
        }

        // Format forecast periods
        const formattedForecast = periods.map((period: ForecastPeriod) =>
          [
            `${period.name || "Unknown"}:`,
            `Temperature: ${period.temperature || "Unknown"}°${period.temperatureUnit || "F"}`,
            `Wind: ${period.windSpeed || "Unknown"} ${period.windDirection || ""}`,
            `${period.shortForecast || "No forecast available"}`,
            "---",
          ].join("\n"),
        );

        const forecastText = `Forecast for ${latitude}, ${longitude}:\n\n${formattedForecast.join("\n")}`;

        return {
          content: [
            {
              type: "text",
              text: forecastText,
            },
          ],
        };
      },
    );
    ```

    ### Running the server

    Finally, implement the main function to run the server:

    ```typescript
    async function main() {
      const transport = new StdioServerTransport();
      await server.connect(transport);
      console.error("Weather MCP Server running on stdio");
    }

    main().catch((error) => {
      console.error("Fatal error in main():", error);
      process.exit(1);
    });
    ```

    Make sure to run `npm run build` to build your server! This is a very important step in getting your server to connect.

    Let's now test your server from an existing MCP host, Claude for Desktop.

    ## Testing your server with Claude for Desktop

    <Note>
      Claude for Desktop is not yet available on Linux. Linux users can proceed to the [Building a client](/quickstart/client) tutorial to build an MCP client that connects to the server we just built.
    </Note>

    First, make sure you have Claude for Desktop installed. [You can install the latest version
    here.](https://claude.ai/download) If you already have Claude for Desktop, **make sure it's updated to the latest version.**

    We'll need to configure Claude for Desktop for whichever MCP servers you want to use. To do this, open your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor. Make sure to create the file if it doesn't exist.

    For example, if you have [VS Code](https://code.visualstudio.com/) installed:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```bash
        code ~/Library/Application\ Support/Claude/claude_desktop_config.json
        ```
      </Tab>

      <Tab title="Windows">
        ```powershell
        code $env:AppData\Claude\claude_desktop_config.json
        ```
      </Tab>
    </Tabs>

    You'll then add your servers in the `mcpServers` key. The MCP UI elements will only show up in Claude for Desktop if at least one server is properly configured.

    In this case, we'll add our single weather server like so:

    <Tabs>
      <Tab title="MacOS/Linux">
        <CodeGroup>
          ```json Node
          {
              "mcpServers": {
                  "weather": {
                      "command": "node",
                      "args": [
                          "/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/index.js"
                      ]
                  }
              }
          }
          ```
        </CodeGroup>
      </Tab>

      <Tab title="Windows">
        <CodeGroup>
          ```json Node
          {
              "mcpServers": {
                  "weather": {
                      "command": "node",
                      "args": [
                          "C:\\PATH\\TO\\PARENT\\FOLDER\\weather\\build\\index.js"
                      ]
                  }
              }
          }
          ```
        </CodeGroup>
      </Tab>
    </Tabs>

    This tells Claude for Desktop:

    1. There's an MCP server named "weather"
    2. Launch it by running `node /ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/index.js`

    Save the file, and restart **Claude for Desktop**.

  </Tab>

  <Tab title="Java">
    <Note>
      This is a quickstart demo based on Spring AI MCP auto-configuraiton and boot starters.
      To learn how to create sync and async MCP Servers, manually, consult the [Java SDK Server](/sdk/java/mcp-server) documentation.
    </Note>

    Let's get started with building our weather server!
    [You can find the complete code for what we'll be building here.](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/weather/starter-stdio-server)

    For more information, see the [MCP Server Boot Starter](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-starter-docs.html) reference documentation.
    For manual MCP Server implementation, refer to the [MCP Server Java SDK documentation](/sdk/java/mcp-server).

    ### System requirements

    * Java 17 or higher installed.
    * [Spring Boot 3.3.x](https://docs.spring.io/spring-boot/installing.html) or higher

    ### Set up your environment

    Use the [Spring Initizer](https://start.spring.io/) to bootstrat the project.

    You will need to add the following dependencies:

    <Tabs>
      <Tab title="Maven">
        ```xml
        <dependencies>
              <dependency>
                  <groupId>org.springframework.ai</groupId>
                  <artifactId>spring-ai-mcp-server-spring-boot-starter</artifactId>
              </dependency>

              <dependency>
                  <groupId>org.springframework</groupId>
                  <artifactId>spring-web</artifactId>
              </dependency>
        </dependencies>
        ```
      </Tab>

      <Tab title="Gradle">
        ```groovy
        dependencies {
          implementation platform("org.springframework.ai:spring-ai-mcp-server-spring-boot-starter")
          implementation platform("org.springframework:spring-web")
        }
        ```
      </Tab>
    </Tabs>

    Then configure your application by setting the applicaiton properties:

    <CodeGroup>
      ```bash application.properties
      spring.main.bannerMode=off
      logging.pattern.console=
      ```

      ```yaml application.yml
      logging:
        pattern:
          console:
      spring:
        main:
          banner-mode: off
      ```
    </CodeGroup>

    The [Server Configuration Properties](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-starter-docs.html#_configuration_properties) documents all available properties.

    Now let's dive into building your server.

    ## Building your server

    ### Weather Service

    Let's implement a [WeatheService.java](https://github.com/spring-projects/spring-ai-examples/blob/main/model-context-protocol/weather/starter-stdio-server/src/main/java/org/springframework/ai/mcp/sample/server/WeatherService.java) that uses a REST client to query the data from the National Weather Service API:

    ```java
    @Service
    public class WeatherService {

    	private final RestClient restClient;

    	public WeatherService() {
    		this.restClient = RestClient.builder()
    			.baseUrl("https://api.weather.gov")
    			.defaultHeader("Accept", "application/geo+json")
    			.defaultHeader("User-Agent", "WeatherApiClient/1.0 (your@email.com)")
    			.build();
    	}

      @Tool(description = "Get weather forecast for a specific latitude/longitude")
      public String getWeatherForecastByLocation(
          double latitude,   // Latitude coordinate
          double longitude   // Longitude coordinate
      ) {
          // Returns detailed forecast including:
          // - Temperature and unit
          // - Wind speed and direction
          // - Detailed forecast description
      }

      @Tool(description = "Get weather alerts for a US state")
      public String getAlerts(
          @ToolParam(description = "Two-letter US state code (e.g. CA, NY") String state)
      ) {
          // Returns active alerts including:
          // - Event type
          // - Affected area
          // - Severity
          // - Description
          // - Safety instructions
      }

      // ......
    }
    ```

    The `@Service` annotation with auto-register the service in your applicaiton context.
    The Spring AI `@Tool` annotation, making it easy to create and maintain MCP tools.

    The auto-configuration will automatically register these tools with the MCP server.

    ### Create your Boot Applicaiton

    ```java
    @SpringBootApplication
    public class McpServerApplication {

    	public static void main(String[] args) {
    		SpringApplication.run(McpServerApplication.class, args);
    	}

    	@Bean
    	public ToolCallbackProvider weatherTools(WeatherService weatherService) {
    		return  MethodToolCallbackProvider.builder().toolObjects(weatherService).build();
    	}
    }
    ```

    Uses the the `MethodToolCallbackProvider` utils to convert the `@Tools` into actionalble callbackes used by the MCP server.

    ### Running the server

    Finally, let's build the server:

    ```bash
    ./mvnw clean install
    ```

    This will generate a `mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar` file within the `target` folder.

    Let's now test your server from an existing MCP host, Claude for Desktop.

    ## Testing your server with Claude for Desktop

    <Note>
      Claude for Desktop is not yet available on Linux.
    </Note>

    First, make sure you have Claude for Desktop installed.
    [You can install the latest version here.](https://claude.ai/download) If you already have Claude for Desktop, **make sure it's updated to the latest version.**

    We'll need to configure Claude for Desktop for whichever MCP servers you want to use.
    To do this, open your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor.
    Make sure to create the file if it doesn't exist.

    For example, if you have [VS Code](https://code.visualstudio.com/) installed:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```bash
        code ~/Library/Application\ Support/Claude/claude_desktop_config.json
        ```
      </Tab>

      <Tab title="Windows">
        ```powershell
        code $env:AppData\Claude\claude_desktop_config.json
        ```
      </Tab>
    </Tabs>

    You'll then add your servers in the `mcpServers` key.
    The MCP UI elements will only show up in Claude for Desktop if at least one server is properly configured.

    In this case, we'll add our single weather server like so:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```json java
        {
          "mcpServers": {
            "spring-ai-mcp-weather": {
              "command": "java",
              "args": [
                "-Dspring.ai.mcp.server.stdio=true",
                "-jar",
                "/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar"
              ]
            }
          }
        }
        ```
      </Tab>

      <Tab title="Windows">
        ```json java
        {
          "mcpServers": {
            "spring-ai-mcp-weather": {
              "command": "java",
              "args": [
                "-Dspring.ai.mcp.server.transport=STDIO",
                "-jar",
                "C:\\ABSOLUTE\\PATH\\TO\\PARENT\\FOLDER\\weather\\mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar"
              ]
            }
          }
        }
        ```
      </Tab>
    </Tabs>

    <Note>
      Make sure you pass in the absolute path to your server.
    </Note>

    This tells Claude for Desktop:

    1. There's an MCP server named "my-weather-server"
    2. To launch it by running `java -jar /ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar`

    Save the file, and restart **Claude for Desktop**.

    ## Testing your server with Java client

    ### Create a MCP Client manually

    Use the `McpClient` to connect to the server:

    ```java
    var stdioParams = ServerParameters.builder("java")
      .args("-jar", "/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar")
      .build();

    var stdioTransport = new StdioClientTransport(stdioParams);

    var mcpClient = McpClient.sync(stdioTransport).build();

    mcpClient.initialize();

    ListToolsResult toolsList = mcpClient.listTools();

    CallToolResult weather = mcpClient.callTool(
      new CallToolRequest("getWeatherForecastByLocation",
          Map.of("latitude", "47.6062", "longitude", "-122.3321")));

    CallToolResult alert = mcpClient.callTool(
      new CallToolRequest("getAlerts", Map.of("state", "NY")));

    mcpClient.closeGracefully();
    ```

    ### Use MCP Client Boot Starter

    Create a new boot starter applicaiton using the `spring-ai-mcp-client-spring-boot-starter` dependency:

    ```xml
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-mcp-client-spring-boot-starter</artifactId>
    </dependency>
    ```

    and set the `spring.ai.mcp.client.stdio.servers-configuration` property to point to your `claude_desktop_config.json`.
    You can re-use the existing Anthropic Destop configuration:

    ```properties
    spring.ai.mcp.client.stdio.servers-configuration=file:PATH/TO/claude_desktop_config.json
    ```

    When you stasrt your client applicaiton, the auto-configuration will create, automatically MCP clients from the claude\_desktop\_config.json.

    For more information, see the [MCP Client Boot Starters](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-client-docs.html) reference documentation.

    ## More Java MCP Server examples

    The [starter-webflux-server](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/weather/starter-webflux-server) demonstrates how to create a MCP server using SSE transport.
    It showcases how to define and register MCP Tools, Resources, and Prompts, using the Spring Boot's auto-configuration capabilities.

  </Tab>
</Tabs>

### Test with commands

Let's make sure Claude for Desktop is picking up the two tools we've exposed in our `weather` server. You can do this by looking for the hammer <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/claude-desktop-mcp-hammer-icon.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> icon:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/visual-indicator-mcp-tools.png" />
</Frame>

After clicking on the hammer icon, you should see two tools listed:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/available-mcp-tools.png" />
</Frame>

If your server isn't being picked up by Claude for Desktop, proceed to the [Troubleshooting](#troubleshooting) section for debugging tips.

If the hammer icon has shown up, you can now test your server by running the following commands in Claude for Desktop:

- What's the weather in Sacramento?
- What are the active weather alerts in Texas?

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/current-weather.png" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/weather-alerts.png" />
</Frame>

<Note>
  Since this is the US National Weather service, the queries will only work for US locations.
</Note>

## What's happening under the hood

When you ask a question:

1. The client sends your question to Claude
2. Claude analyzes the available tools and decides which one(s) to use
3. The client executes the chosen tool(s) through the MCP server
4. The results are sent back to Claude
5. Claude formulates a natural language response
6. The response is displayed to you!

## Troubleshooting

<AccordionGroup>
  <Accordion title="Claude for Desktop Integration Issues">
    **Getting logs from Claude for Desktop**

    Claude.app logging related to MCP is written to log files in `~/Library/Logs/Claude`:

    * `mcp.log` will contain general logging about MCP connections and connection failures.
    * Files named `mcp-server-SERVERNAME.log` will contain error (stderr) logging from the named server.

    You can run the following command to list recent logs and follow along with any new ones:

    ```bash
    # Check Claude's logs for errors
    tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
    ```

    **Server not showing up in Claude**

    1. Check your `claude_desktop_config.json` file syntax
    2. Make sure the path to your project is absolute and not relative
    3. Restart Claude for Desktop completely

    **Tool calls failing silently**

    If Claude attempts to use the tools but they fail:

    1. Check Claude's logs for errors
    2. Verify your server builds and runs without errors
    3. Try restarting Claude for Desktop

    **None of this is working. What do I do?**

    Please refer to our [debugging guide](/docs/tools/debugging) for better debugging tools and more detailed guidance.

  </Accordion>

  <Accordion title="Weather API Issues">
    **Error: Failed to retrieve grid point data**

    This usually means either:

    1. The coordinates are outside the US
    2. The NWS API is having issues
    3. You're being rate limited

    Fix:

    * Verify you're using US coordinates
    * Add a small delay between requests
    * Check the NWS API status page

    **Error: No active alerts for \[STATE]**

    This isn't an error - it just means there are no current weather alerts for that state. Try a different state or check during severe weather.

  </Accordion>
</AccordionGroup>

<Note>
  For more advanced troubleshooting, check out our guide on [Debugging MCP](/docs/tools/debugging)
</Note>

## Next steps

<CardGroup cols={2}>
  <Card title="Building a client" icon="outlet" href="/quickstart/client">
    Learn how to build your own MCP client that can connect to your server
  </Card>

  <Card title="Example servers" icon="grid" href="/examples">
    Check out our gallery of official MCP servers and implementations
  </Card>

  <Card title="Debugging Guide" icon="bug" href="/docs/tools/debugging">
    Learn how to effectively debug MCP servers and integrations
  </Card>

  <Card title="Building MCP with LLMs" icon="comments" href="/building-mcp-with-llms">
    Learn how to use LLMs like Claude to speed up your MCP development
  </Card>
</CardGroup>

# For Claude Desktop Users

Source: https://modelcontextprotocol.io/quickstart/user

Get started using pre-built servers in Claude for Desktop.

In this tutorial, you will extend [Claude for Desktop](https://claude.ai/download) so that it can read from your computer's file system, write new files, move files, and even search files.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-filesystem.png" />
</Frame>

Don't worry — it will ask you for your permission before executing these actions!

## 1. Download Claude for Desktop

Start by downloading [Claude for Desktop](https://claude.ai/download), choosing either macOS or Windows. (Linux is not yet supported for Claude for Desktop.)

Follow the installation instructions.

If you already have Claude for Desktop, make sure it's on the latest version by clicking on the Claude menu on your computer and selecting "Check for Updates..."

<Accordion title="Why Claude for Desktop and not Claude.ai?">
  Because servers are locally run, MCP currently only supports desktop hosts. Remote hosts are in active development.
</Accordion>

## 2. Add the Filesystem MCP Server

To add this filesystem functionality, we will be installing a pre-built [Filesystem MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to Claude for Desktop. This is one of dozens of [servers](https://github.com/modelcontextprotocol/servers/tree/main) created by Anthropic and the community.

Get started by opening up the Claude menu on your computer and select "Settings..." Please note that these are not the Claude Account Settings found in the app window itself.

This is what it should look like on a Mac:

<Frame style={{ textAlign: 'center' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-menu.png" width="400" />
</Frame>

Click on "Developer" in the lefthand bar of the Settings pane, and then click on "Edit Config":

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-developer.png" />
</Frame>

This will create a configuration file at:

- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`
- Windows: `%APPDATA%\Claude\claude_desktop_config.json`

if you don't already have one, and will display the file in your file system.

Open up the configuration file in any text editor. Replace the file contents with this:

<Tabs>
  <Tab title="MacOS/Linux">
    ```json
    {
      "mcpServers": {
        "filesystem": {
          "command": "npx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-filesystem",
            "/Users/username/Desktop",
            "/Users/username/Downloads"
          ]
        }
      }
    }
    ```
  </Tab>

  <Tab title="Windows">
    ```json
    {
      "mcpServers": {
        "filesystem": {
          "command": "npx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-filesystem",
            "C:\\Users\\username\\Desktop",
            "C:\\Users\\username\\Downloads"
          ]
        }
      }
    }
    ```
  </Tab>
</Tabs>

Make sure to replace `username` with your computer's username. The paths should point to valid directories that you want Claude to be able to access and modify. It's set up to work for Desktop and Downloads, but you can add more paths as well.

You will also need [Node.js](https://nodejs.org) on your computer for this to run properly. To verify you have Node installed, open the command line on your computer.

- On macOS, open the Terminal from your Applications folder
- On Windows, press Windows + R, type "cmd", and press Enter

Once in the command line, verify you have Node installed by entering in the following command:

```bash
node --version
```

If you get an error saying "command not found" or "node is not recognized", download Node from [nodejs.org](https://nodejs.org/).

<Tip>
  **How does the configuration file work?**

This configuration file tells Claude for Desktop which MCP servers to start up every time you start the application. In this case, we have added one server called "filesystem" that will use the Node `npx` command to install and run `@modelcontextprotocol/server-filesystem`. This server, described [here](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem), will let you access your file system in Claude for Desktop.
</Tip>

<Warning>
  **Command Privileges**

Claude for Desktop will run the commands in the configuration file with the permissions of your user account, and access to your local files. Only add commands if you understand and trust the source.
</Warning>

## 3. Restart Claude

After updating your configuration file, you need to restart Claude for Desktop.

Upon restarting, you should see a hammer <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/claude-desktop-mcp-hammer-icon.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> icon in the bottom right corner of the input box:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-hammer.png" />
</Frame>

After clicking on the hammer icon, you should see the tools that come with the Filesystem MCP Server:

<Frame style={{ textAlign: 'center' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-tools.png" width="400" />
</Frame>

If your server isn't being picked up by Claude for Desktop, proceed to the [Troubleshooting](#troubleshooting) section for debugging tips.

## 4. Try it out!

You can now talk to Claude and ask it about your filesystem. It should know when to call the relevant tools.

Things you might try asking Claude:

- Can you write a poem and save it to my desktop?
- What are some work-related files in my downloads folder?
- Can you take all the images on my desktop and move them to a new folder called "Images"?

As needed, Claude will call the relevant tools and seek your approval before taking an action:

<Frame style={{ textAlign: 'center' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/quickstart-approve.png" width="500" />
</Frame>

## Troubleshooting

<AccordionGroup>
  <Accordion title="Server not showing up in Claude / hammer icon missing">
    1. Restart Claude for Desktop completely
    2. Check your `claude_desktop_config.json` file syntax
    3. Make sure the file paths included in `claude_desktop_config.json` are valid and that they are absolute and not relative
    4. Look at [logs](#getting-logs-from-claude-for-desktop) to see why the server is not connecting
    5. In your command line, try manually running the server (replacing `username` as you did in `claude_desktop_config.json`) to see if you get any errors:

    <Tabs>
      <Tab title="MacOS/Linux">
        ```bash
        npx -y @modelcontextprotocol/server-filesystem /Users/username/Desktop /Users/username/Downloads
        ```
      </Tab>

      <Tab title="Windows">
        ```bash
        npx -y @modelcontextprotocol/server-filesystem C:\Users\username\Desktop C:\Users\username\Downloads
        ```
      </Tab>
    </Tabs>

  </Accordion>

  <Accordion title="Getting logs from Claude for Desktop">
    Claude.app logging related to MCP is written to log files in:

    * macOS: `~/Library/Logs/Claude`

    * Windows: `%APPDATA%\Claude\logs`

    * `mcp.log` will contain general logging about MCP connections and connection failures.

    * Files named `mcp-server-SERVERNAME.log` will contain error (stderr) logging from the named server.

    You can run the following command to list recent logs and follow along with any new ones (on Windows, it will only show recent logs):

    <Tabs>
      <Tab title="MacOS/Linux">
        ```bash
        # Check Claude's logs for errors
        tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
        ```
      </Tab>

      <Tab title="Windows">
        ```bash
        type "%APPDATA%\Claude\logs\mcp*.log"
        ```
      </Tab>
    </Tabs>

  </Accordion>

  <Accordion title="Tool calls failing silently">
    If Claude attempts to use the tools but they fail:

    1. Check Claude's logs for errors
    2. Verify your server builds and runs without errors
    3. Try restarting Claude for Desktop

  </Accordion>

  <Accordion title="None of this is working. What do I do?">
    Please refer to our [debugging guide](/docs/tools/debugging) for better debugging tools and more detailed guidance.
  </Accordion>

  <Accordion title="ENOENT error and `${APPDATA}` in paths on Windows">
    If your configured server fails to load, and you see within its logs an error referring to `${APPDATA}` within a path, you may need to add the expanded value of `%APPDATA%` to your `env` key in `claude_desktop_config.json`:

    ```json
    {
      "brave-search": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-brave-search"],
        "env": {
          "APPDATA": "C:\\Users\\user\\AppData\\Roaming\\",
          "BRAVE_API_KEY": "..."
        }
      }
    }
    ```

    With this change in place, launch Claude Desktop once again.

    <Warning>
      **NPM should be installed globally**

      The `npx` command may continue to fail if you have not installed NPM globally. If NPM is already installed globally, you will find `%APPDATA%\npm` exists on your system. If not, you can install NPM globally by running the following command:

      ```bash
      npm install -g npm
      ```
    </Warning>

  </Accordion>
</AccordionGroup>

## Next steps

<CardGroup cols={2}>
  <Card title="Explore other servers" icon="grid" href="/examples">
    Check out our gallery of official MCP servers and implementations
  </Card>

  <Card title="Build your own server" icon="code" href="/quickstart/server">
    Now build your own custom server to use in Claude for Desktop and other clients
  </Card>
</CardGroup>

# MCP Client

Source: https://modelcontextprotocol.io/sdk/java/mcp-client

Learn how to use the Model Context Protocol (MCP) client to interact with MCP servers

# Model Context Protocol Client

The MCP Client is a key component in the Model Context Protocol (MCP) architecture, responsible for establishing and managing connections with MCP servers. It implements the client-side of the protocol, handling:

- Protocol version negotiation to ensure compatibility with servers
- Capability negotiation to determine available features
- Message transport and JSON-RPC communication
- Tool discovery and execution
- Resource access and management
- Prompt system interactions
- Optional features like roots management and sampling support

The client provides both synchronous and asynchronous APIs for flexibility in different application contexts.

<Tabs>
  <Tab title="Sync API">
    ```java
    // Create a sync client with custom configuration
    McpSyncClient client = McpClient.sync(transport)
        .requestTimeout(Duration.ofSeconds(10))
        .capabilities(ClientCapabilities.builder()
            .roots(true)      // Enable roots capability
            .sampling()       // Enable sampling capability
            .build())
        .sampling(request -> new CreateMessageResult(response))
        .build();

    // Initialize connection
    client.initialize();

    // List available tools
    ListToolsResult tools = client.listTools();

    // Call a tool
    CallToolResult result = client.callTool(
        new CallToolRequest("calculator",
            Map.of("operation", "add", "a", 2, "b", 3))
    );

    // List and read resources
    ListResourcesResult resources = client.listResources();
    ReadResourceResult resource = client.readResource(
        new ReadResourceRequest("resource://uri")
    );

    // List and use prompts
    ListPromptsResult prompts = client.listPrompts();
    GetPromptResult prompt = client.getPrompt(
        new GetPromptRequest("greeting", Map.of("name", "Spring"))
    );

    // Add/remove roots
    client.addRoot(new Root("file:///path", "description"));
    client.removeRoot("file:///path");

    // Close client
    client.closeGracefully();
    ```

  </Tab>

  <Tab title="Async API">
    ```java
    // Create an async client with custom configuration
    McpAsyncClient client = McpClient.async(transport)
        .requestTimeout(Duration.ofSeconds(10))
        .capabilities(ClientCapabilities.builder()
            .roots(true)      // Enable roots capability
            .sampling()       // Enable sampling capability
            .build())
        .sampling(request -> Mono.just(new CreateMessageResult(response)))
        .toolsChangeConsumer(tools -> Mono.fromRunnable(() -> {
            logger.info("Tools updated: {}", tools);
        }))
        .resourcesChangeConsumer(resources -> Mono.fromRunnable(() -> {
            logger.info("Resources updated: {}", resources);
        }))
        .promptsChangeConsumer(prompts -> Mono.fromRunnable(() -> {
            logger.info("Prompts updated: {}", prompts);
        }))
        .build();

    // Initialize connection and use features
    client.initialize()
        .flatMap(initResult -> client.listTools())
        .flatMap(tools -> {
            return client.callTool(new CallToolRequest(
                "calculator",
                Map.of("operation", "add", "a", 2, "b", 3)
            ));
        })
        .flatMap(result -> {
            return client.listResources()
                .flatMap(resources ->
                    client.readResource(new ReadResourceRequest("resource://uri"))
                );
        })
        .flatMap(resource -> {
            return client.listPrompts()
                .flatMap(prompts ->
                    client.getPrompt(new GetPromptRequest(
                        "greeting",
                        Map.of("name", "Spring")
                    ))
                );
        })
        .flatMap(prompt -> {
            return client.addRoot(new Root("file:///path", "description"))
                .then(client.removeRoot("file:///path"));
        })
        .doFinally(signalType -> {
            client.closeGracefully().subscribe();
        })
        .subscribe();
    ```

  </Tab>
</Tabs>

## Client Transport

The transport layer handles the communication between MCP clients and servers, providing different implementations for various use cases. The client transport manages message serialization, connection establishment, and protocol-specific communication patterns.

<Tabs>
  <Tab title="STDIO">
    Creates transport for in-process based communication

    ```java
    ServerParameters params = ServerParameters.builder("npx")
        .args("-y", "@modelcontextprotocol/server-everything", "dir")
        .build();
    McpTransport transport = new StdioClientTransport(params);
    ```

  </Tab>

  <Tab title="SSE (HttpClient)">
    Creates a framework agnostic (pure Java API) SSE client transport. Included in the core mcp module.

    ```java
    McpTransport transport = new HttpClientSseClientTransport("http://your-mcp-server");
    ```

  </Tab>

  <Tab title="SSE (WebFlux)">
    Creates WebFlux-based SSE client transport. Requires the mcp-webflux-sse-transport dependency.

    ```java
    WebClient.Builder webClientBuilder = WebClient.builder()
        .baseUrl("http://your-mcp-server");
    McpTransport transport = new WebFluxSseClientTransport(webClientBuilder);
    ```

  </Tab>
</Tabs>

## Client Capabilities

The client can be configured with various capabilities:

```java
var capabilities = ClientCapabilities.builder()
    .roots(true)      // Enable filesystem roots support with list changes notifications
    .sampling()       // Enable LLM sampling support
    .build();
```

### Roots Support

Roots define the boundaries of where servers can operate within the filesystem:

```java
// Add a root dynamically
client.addRoot(new Root("file:///path", "description"));

// Remove a root
client.removeRoot("file:///path");

// Notify server of roots changes
client.rootsListChangedNotification();
```

The roots capability allows servers to:

- Request the list of accessible filesystem roots
- Receive notifications when the roots list changes
- Understand which directories and files they have access to

### Sampling Support

Sampling enables servers to request LLM interactions ("completions" or "generations") through the client:

```java
// Configure sampling handler
Function<CreateMessageRequest, CreateMessageResult> samplingHandler = request -> {
    // Sampling implementation that interfaces with LLM
    return new CreateMessageResult(response);
};

// Create client with sampling support
var client = McpClient.sync(transport)
    .capabilities(ClientCapabilities.builder()
        .sampling()
        .build())
    .sampling(samplingHandler)
    .build();
```

This capability allows:

- Servers to leverage AI capabilities without requiring API keys
- Clients to maintain control over model access and permissions
- Support for both text and image-based interactions
- Optional inclusion of MCP server context in prompts

## Using MCP Clients

### Tool Execution

Tools are server-side functions that clients can discover and execute. The MCP client provides methods to list available tools and execute them with specific parameters. Each tool has a unique name and accepts a map of parameters.

<Tabs>
  <Tab title="Sync API">
    ```java
    // List available tools and their names
    var tools = client.listTools();
    tools.forEach(tool -> System.out.println(tool.getName()));

    // Execute a tool with parameters
    var result = client.callTool("calculator", Map.of(
        "operation", "add",
        "a", 1,
        "b", 2
    ));
    ```

  </Tab>

  <Tab title="Async API">
    ```java
    // List available tools asynchronously
    client.listTools()
        .doOnNext(tools -> tools.forEach(tool -> 
            System.out.println(tool.getName())))
        .subscribe();

    // Execute a tool asynchronously
    client.callTool("calculator", Map.of(
            "operation", "add",
            "a", 1,
            "b", 2
        ))
        .subscribe();
    ```

  </Tab>
</Tabs>

### Resource Access

Resources represent server-side data sources that clients can access using URI templates. The MCP client provides methods to discover available resources and retrieve their contents through a standardized interface.

<Tabs>
  <Tab title="Sync API">
    ```java
    // List available resources and their names
    var resources = client.listResources();
    resources.forEach(resource -> System.out.println(resource.getName()));

    // Retrieve resource content using a URI template
    var content = client.getResource("file", Map.of(
        "path", "/path/to/file.txt"
    ));
    ```

  </Tab>

  <Tab title="Async API">
    ```java
    // List available resources asynchronously
    client.listResources()
        .doOnNext(resources -> resources.forEach(resource -> 
            System.out.println(resource.getName())))
        .subscribe();

    // Retrieve resource content asynchronously
    client.getResource("file", Map.of(
            "path", "/path/to/file.txt"
        ))
        .subscribe();
    ```

  </Tab>
</Tabs>

### Prompt System

The prompt system enables interaction with server-side prompt templates. These templates can be discovered and executed with custom parameters, allowing for dynamic text generation based on predefined patterns.

<Tabs>
  <Tab title="Sync API">
    ```java
    // List available prompt templates
    var prompts = client.listPrompts();
    prompts.forEach(prompt -> System.out.println(prompt.getName()));

    // Execute a prompt template with parameters
    var response = client.executePrompt("echo", Map.of(
        "text", "Hello, World!"
    ));
    ```

  </Tab>

  <Tab title="Async API">
    ```java
    // List available prompt templates asynchronously
    client.listPrompts()
        .doOnNext(prompts -> prompts.forEach(prompt -> 
            System.out.println(prompt.getName())))
        .subscribe();

    // Execute a prompt template asynchronously
    client.executePrompt("echo", Map.of(
            "text", "Hello, World!"
        ))
        .subscribe();
    ```

  </Tab>
</Tabs>

# Overview

Source: https://modelcontextprotocol.io/sdk/java/mcp-overview

Introduction to the Model Context Protocol (MCP) Java SDK

Java SDK for the [Model Context Protocol](https://modelcontextprotocol.org/docs/concepts/architecture)
enables standardized integration between AI models and tools.

## Features

- MCP Client and MCP Server implementations supporting:
  - Protocol [version compatibility negotiation](https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/lifecycle/#initialization)
  - [Tool](https://spec.modelcontextprotocol.io/specification/2024-11-05/server/tools/) discovery, execution, list change notifications
  - [Resource](https://spec.modelcontextprotocol.io/specification/2024-11-05/server/resources/) management with URI templates
  - [Roots](https://spec.modelcontextprotocol.io/specification/2024-11-05/client/roots/) list management and notifications
  - [Prompt](https://spec.modelcontextprotocol.io/specification/2024-11-05/server/prompts/) handling and management
  - [Sampling](https://spec.modelcontextprotocol.io/specification/2024-11-05/client/sampling/) support for AI model interactions
- Multiple transport implementations:
  - Default transports:
    - Stdio-based transport for process-based communication
    - Java HttpClient-based SSE client transport for HTTP SSE Client-side streaming
    - Servlet-based SSE server transport for HTTP SSE Server streaming
  - Spring-based transports:
    - WebFlux SSE client and server transports for reactive HTTP streaming
    - WebMVC SSE transport for servlet-based HTTP streaming
- Supports Synchronous and Asynchronous programming paradigms

## Architecture

The SDK follows a layered architecture with clear separation of concerns:

![MCP Stack Architecture](https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/java/mcp-stack.svg)

- **Client/Server Layer (McpClient/McpServer)**: Both use McpSession for sync/async operations,
  with McpClient handling client-side protocol operations and McpServer managing server-side protocol operations.
- **Session Layer (McpSession)**: Manages communication patterns and state using DefaultMcpSession implementation.
- **Transport Layer (McpTransport)**: Handles JSON-RPC message serialization/deserialization via:
  - StdioTransport (stdin/stdout) in the core module
  - HTTP SSE transports in dedicated transport modules (Java HttpClient, Spring WebFlux, Spring WebMVC)

The MCP Client is a key component in the Model Context Protocol (MCP) architecture, responsible for establishing and managing connections with MCP servers.
It implements the client-side of the protocol.

![Java MCP Client Architecture](https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/java/java-mcp-client-architecture.jpg)

The MCP Server is a foundational component in the Model Context Protocol (MCP) architecture that provides tools, resources, and capabilities to clients.
It implements the server-side of the protocol.

![Java MCP Server Architecture](https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/java/java-mcp-server-architecture.jpg)

Key Interactions:

- **Client/Server Initialization**: Transport setup, protocol compatibility check, capability negotiation, and implementation details exchange.
- **Message Flow**: JSON-RPC message handling with validation, type-safe response processing, and error handling.
- **Resource Management**: Resource discovery, URI template-based access, subscription system, and content retrieval.

## Dependencies

Add the following Maven dependency to your project:

<Tabs>
  <Tab title="Maven">
    The core MCP functionality:

    ```xml
    <dependency>
        <groupId>io.modelcontextprotocol.sdk</groupId>
        <artifactId>mcp</artifactId>
    </dependency>
    ```

    For HTTP SSE transport implementations, add one of the following dependencies:

    ```xml
    <!-- Spring WebFlux-based SSE client and server transport -->
    <dependency>
        <groupId>io.modelcontextprotocol.sdk</groupId>
        <artifactId>mcp-spring-webflux</artifactId>
    </dependency>

    <!-- Spring WebMVC-based SSE server transport -->
    <dependency>
        <groupId>io.modelcontextprotocol.sdk</groupId>
        <artifactId>mcp-spring-webmvc</artifactId>
    </dependency>
    ```

  </Tab>

  <Tab title="Gradle">
    The core MCP functionality:

    ```groovy
    dependencies {
      implementation platform("io.modelcontextprotocol.sdk:mcp")
      //...
    }
    ```

    For HTTP SSE transport implementations, add one of the following dependencies:

    ```groovy
    // Spring WebFlux-based SSE client and server transport
    dependencies {
      implementation platform("io.modelcontextprotocol.sdk:mcp-spring-webflux")
    }

    // Spring WebMVC-based SSE server transport
    dependencies {
      implementation platform("io.modelcontextprotocol.sdk:mcp-spring-webmvc")
    }
    ```

  </Tab>
</Tabs>

### Bill of Materials (BOM)

The Bill of Materials (BOM) declares the recommended versions of all the dependencies used by a given release.
Using the BOM from your application's build script avoids the need for you to specify and maintain the dependency versions yourself.
Instead, the version of the BOM you're using determines the utilized dependency versions.
It also ensures that you're using supported and tested versions of the dependencies by default, unless you choose to override them.

Add the BOM to your project:

<Tabs>
  <Tab title="Maven">
    ```xml
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>io.modelcontextprotocol.sdk</groupId>
                <artifactId>mcp-bom</artifactId>
                <version>0.7.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    ```
  </Tab>

  <Tab title="Gradle">
    ```groovy
    dependencies {
      implementation platform("io.modelcontextprotocol.sdk:mcp-bom:0.7.0")
      //...
    }
    ```

    Gradle users can also use the Spring AI MCP BOM by leveraging Gradle (5.0+) native support for declaring dependency constraints using a Maven BOM.
    This is implemented by adding a 'platform' dependency handler method to the dependencies section of your Gradle build script.
    As shown in the snippet above this can then be followed by version-less declarations of the Starter Dependencies for the one or more spring-ai modules you wish to use, e.g. spring-ai-openai.

  </Tab>
</Tabs>

Replace the version number with the version of the BOM you want to use.

### Available Dependencies

The following dependencies are available and managed by the BOM:

- Core Dependencies
  - `io.modelcontextprotocol.sdk:mcp` - Core MCP library providing the base functionality and APIs for Model Context Protocol implementation.
- Transport Dependencies
  - `io.modelcontextprotocol.sdk:mcp-spring-webflux` - WebFlux-based Server-Sent Events (SSE) transport implementation for reactive applications.
  - `io.modelcontextprotocol.sdk:mcp-spring-webmvc` - WebMVC-based Server-Sent Events (SSE) transport implementation for servlet-based applications.
- Testing Dependencies
  - `io.modelcontextprotocol.sdk:mcp-test` - Testing utilities and support for MCP-based applications.

# MCP Server

Source: https://modelcontextprotocol.io/sdk/java/mcp-server

Learn how to implement and configure a Model Context Protocol (MCP) server

## Overview

The MCP Server is a foundational component in the Model Context Protocol (MCP) architecture that provides tools, resources, and capabilities to clients. It implements the server-side of the protocol, responsible for:

- Exposing tools that clients can discover and execute
- Managing resources with URI-based access patterns
- Providing prompt templates and handling prompt requests
- Supporting capability negotiation with clients
- Implementing server-side protocol operations
- Managing concurrent client connections
- Providing structured logging and notifications

The server supports both synchronous and asynchronous APIs, allowing for flexible integration in different application contexts.

<Tabs>
  <Tab title="Sync API">
    ```java
    // Create a server with custom configuration
    McpSyncServer syncServer = McpServer.sync(transport)
        .serverInfo("my-server", "1.0.0")
        .capabilities(ServerCapabilities.builder()
            .resources(true)     // Enable resource support
            .tools(true)         // Enable tool support
            .prompts(true)       // Enable prompt support
            .logging()           // Enable logging support
            .build())
        .build();

    // Register tools, resources, and prompts
    syncServer.addTool(syncToolRegistration);
    syncServer.addResource(syncResourceRegistration);
    syncServer.addPrompt(syncPromptRegistration);

    // Send logging notifications
    syncServer.loggingNotification(LoggingMessageNotification.builder()
        .level(LoggingLevel.INFO)
        .logger("custom-logger")
        .data("Server initialized")
        .build());

    // Close the server when done
    syncServer.close();
    ```

  </Tab>

  <Tab title="Async API">
    ```java
    // Create an async server with custom configuration
    McpAsyncServer asyncServer = McpServer.async(transport)
        .serverInfo("my-server", "1.0.0")
        .capabilities(ServerCapabilities.builder()
            .resources(true)     // Enable resource support
            .tools(true)         // Enable tool support
            .prompts(true)       // Enable prompt support
            .logging()           // Enable logging support
            .build())
        .build();

    // Register tools, resources, and prompts
    asyncServer.addTool(asyncToolRegistration)
        .doOnSuccess(v -> logger.info("Tool registered"))
        .subscribe();

    asyncServer.addResource(asyncResourceRegistration)
        .doOnSuccess(v -> logger.info("Resource registered"))
        .subscribe();

    asyncServer.addPrompt(asyncPromptRegistration)
        .doOnSuccess(v -> logger.info("Prompt registered"))
        .subscribe();

    // Send logging notifications
    asyncServer.loggingNotification(LoggingMessageNotification.builder()
        .level(LoggingLevel.INFO)
        .logger("custom-logger")
        .data("Server initialized")
        .build());

    // Close the server when done
    asyncServer.close()
        .doOnSuccess(v -> logger.info("Server closed"))
        .subscribe();
    ```

  </Tab>
</Tabs>

## Server Transport

The transport layer in the MCP SDK is responsible for handling the communication between clients and servers. It provides different implementations to support various communication protocols and patterns. The SDK includes several built-in transport implementations:

<Tabs>
  <Tab title="STDIO">
    <>
      Create in-process based transport:

      ```java
      StdioServerTransport transport = new StdioServerTransport(new ObjectMapper());
      ```

      Provides bidirectional JSON-RPC message handling over standard input/output streams with non-blocking message processing, serialization/deserialization, and graceful shutdown support.

      Key features:

      <ul>
        <li>Bidirectional communication through stdin/stdout</li>
        <li>Process-based integration support</li>
        <li>Simple setup and configuration</li>
        <li>Lightweight implementation</li>
      </ul>
    </>

  </Tab>

  <Tab title="SSE (WebFlux)">
    <>
      <p>Creates WebFlux-based SSE server transport.<br />Requires the <code>mcp-spring-webflux</code> dependency.</p>

      ```java
      @Configuration
      class McpConfig {
          @Bean
          WebFluxSseServerTransport webFluxSseServerTransport(ObjectMapper mapper) {
              return new WebFluxSseServerTransport(mapper, "/mcp/message");
          }

          @Bean
          RouterFunction<?> mcpRouterFunction(WebFluxSseServerTransport transport) {
              return transport.getRouterFunction();
          }
      }
      ```

      <p>Implements the MCP HTTP with SSE transport specification, providing:</p>

      <ul>
        <li>Reactive HTTP streaming with WebFlux</li>
        <li>Concurrent client connections through SSE endpoints</li>
        <li>Message routing and session management</li>
        <li>Graceful shutdown capabilities</li>
      </ul>
    </>

  </Tab>

  <Tab title="SSE (WebMvc)">
    <>
      <p>Creates WebMvc-based SSE server transport.<br />Requires the <code>mcp-spring-webmvc</code> dependency.</p>

      ```java
      @Configuration
      @EnableWebMvc
      class McpConfig {
          @Bean
          WebMvcSseServerTransport webMvcSseServerTransport(ObjectMapper mapper) {
              return new WebMvcSseServerTransport(mapper, "/mcp/message");
          }

          @Bean
          RouterFunction<ServerResponse> mcpRouterFunction(WebMvcSseServerTransport transport) {
              return transport.getRouterFunction();
          }
      }
      ```

      <p>Implements the MCP HTTP with SSE transport specification, providing:</p>

      <ul>
        <li>Server-side event streaming</li>
        <li>Integration with Spring WebMVC</li>
        <li>Support for traditional web applications</li>
        <li>Synchronous operation handling</li>
      </ul>
    </>

  </Tab>

  <Tab title="SSE (Servlet)">
    <>
      <p>
        Creates a Servlet-based SSE server transport. It is included in the core <code>mcp</code> module.<br />
        The <code>HttpServletSseServerTransport</code> can be used with any Servlet container.<br />
        To use it with a Spring Web application, you can register it as a Servlet bean:
      </p>

      ```java
      @Configuration
      @EnableWebMvc
      public class McpServerConfig implements WebMvcConfigurer {

          @Bean
          public HttpServletSseServerTransport servletSseServerTransport() {
              return new HttpServletSseServerTransport(new ObjectMapper(), "/mcp/message");
          }

          @Bean
          public ServletRegistrationBean customServletBean(HttpServletSseServerTransport servlet) {
              return new ServletRegistrationBean(servlet);
          }
      }
      ```

      <p>
        Implements the MCP HTTP with SSE transport specification using the traditional Servlet API, providing:
      </p>

      <ul>
        <li>Asynchronous message handling using Servlet 6.0 async support</li>
        <li>Session management for multiple client connections</li>

        <li>
          Two types of endpoints:

          <ul>
            <li>SSE endpoint (<code>/sse</code>) for server-to-client events</li>
            <li>Message endpoint (configurable) for client-to-server requests</li>
          </ul>
        </li>

        <li>Error handling and response formatting</li>
        <li>Graceful shutdown support</li>
      </ul>
    </>

  </Tab>
</Tabs>

## Server Capabilities

The server can be configured with various capabilities:

```java
var capabilities = ServerCapabilities.builder()
    .resources(false, true)  // Resource support with list changes notifications
    .tools(true)            // Tool support with list changes notifications
    .prompts(true)          // Prompt support with list changes notifications
    .logging()              // Enable logging support (enabled by default with loging level INFO)
    .build();
```

### Logging Support

The server provides structured logging capabilities that allow sending log messages to clients with different severity levels:

```java
// Send a log message to clients
server.loggingNotification(LoggingMessageNotification.builder()
    .level(LoggingLevel.INFO)
    .logger("custom-logger")
    .data("Custom log message")
    .build());
```

Clients can control the minimum logging level they receive through the `mcpClient.setLoggingLevel(level)` request. Messages below the set level will be filtered out.
Supported logging levels (in order of increasing severity): DEBUG (0), INFO (1), NOTICE (2), WARNING (3), ERROR (4), CRITICAL (5), ALERT (6), EMERGENCY (7)

### Tool Registration

<Tabs>
  <Tab title="Sync">
    ```java
    // Sync tool registration
    var syncToolRegistration = new McpServerFeatures.SyncToolRegistration(
        new Tool("calculator", "Basic calculator", Map.of(
            "operation", "string",
            "a", "number",
            "b", "number"
        )),
        arguments -> {
            // Tool implementation
            return new CallToolResult(result, false);
        }
    );
    ```
  </Tab>

  <Tab title="Async">
    ```java
    // Async tool registration
    var asyncToolRegistration = new McpServerFeatures.AsyncToolRegistration(
        new Tool("calculator", "Basic calculator", Map.of(
            "operation", "string",
            "a", "number",
            "b", "number"
        )),
        arguments -> {
            // Tool implementation
            return Mono.just(new CallToolResult(result, false));
        }
    );
    ```
  </Tab>
</Tabs>

### Resource Registration

<Tabs>
  <Tab title="Sync">
    ```java
    // Sync resource registration
    var syncResourceRegistration = new McpServerFeatures.SyncResourceRegistration(
        new Resource("custom://resource", "name", "description", "mime-type", null),
        request -> {
            // Resource read implementation
            return new ReadResourceResult(contents);
        }
    );
    ```
  </Tab>

  <Tab title="Async">
    ```java
    // Async resource registration
    var asyncResourceRegistration = new McpServerFeatures.AsyncResourceRegistration(
        new Resource("custom://resource", "name", "description", "mime-type", null),
        request -> {
            // Resource read implementation
            return Mono.just(new ReadResourceResult(contents));
        }
    );
    ```
  </Tab>
</Tabs>

### Prompt Registration

<Tabs>
  <Tab title="Sync">
    ```java
    // Sync prompt registration
    var syncPromptRegistration = new McpServerFeatures.SyncPromptRegistration(
        new Prompt("greeting", "description", List.of(
            new PromptArgument("name", "description", true)
        )),
        request -> {
            // Prompt implementation
            return new GetPromptResult(description, messages);
        }
    );
    ```
  </Tab>

  <Tab title="Async">
    ```java
    // Async prompt registration
    var asyncPromptRegistration = new McpServerFeatures.AsyncPromptRegistration(
        new Prompt("greeting", "description", List.of(
            new PromptArgument("name", "description", true)
        )),
        request -> {
            // Prompt implementation
            return Mono.just(new GetPromptResult(description, messages));
        }
    );
    ```
  </Tab>
</Tabs>

## Error Handling

The SDK provides comprehensive error handling through the McpError class, covering protocol compatibility, transport communication, JSON-RPC messaging, tool execution, resource management, prompt handling, timeouts, and connection issues. This unified error handling approach ensures consistent and reliable error management across both synchronous and asynchronous operations.

# Building MCP with LLMs

Source: https://modelcontextprotocol.io/tutorials/building-mcp-with-llms

Speed up your MCP development using LLMs such as Claude!

This guide will help you use LLMs to help you build custom Model Context Protocol (MCP) servers and clients. We'll be focusing on Claude for this tutorial, but you can do this with any frontier LLM.

## Preparing the documentation

Before starting, gather the necessary documentation to help Claude understand MCP:

1.  Visit [https://modelcontextprotocol.io/llms-full.txt](https://modelcontextprotocol.io/llms-full.txt) and copy the full documentation text
2.  Navigate to either the [MCP TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk) or [Python SDK repository](https://github.com/modelcontextprotocol/python-sdk)
3.  Copy the README files and other relevant documentation
4.  Paste these documents into your conversation with Claude

## Describing your server

Once you've provided the documentation, clearly describe to Claude what kind of server you want to build. Be specific about:

- What resources your server will expose
- What tools it will provide
- Any prompts it should offer
- What external systems it needs to interact with

For example:

```
Build an MCP server that:
- Connects to my company's PostgreSQL database
- Exposes table schemas as resources
- Provides tools for running read-only SQL queries
- Includes prompts for common data analysis tasks
```

## Working with Claude

When working with Claude on MCP servers:

1.  Start with the core functionality first, then iterate to add more features
2.  Ask Claude to explain any parts of the code you don't understand
3.  Request modifications or improvements as needed
4.  Have Claude help you test the server and handle edge cases

Claude can help implement all the key MCP features:

- Resource management and exposure
- Tool definitions and implementations
- Prompt templates and handlers
- Error handling and logging
- Connection and transport setup

## Best practices

When building MCP servers with Claude:

- Break down complex servers into smaller pieces
- Test each component thoroughly before moving on
- Keep security in mind - validate inputs and limit access appropriately
- Document your code well for future maintenance
- Follow MCP protocol specifications carefully

## Next steps

After Claude helps you build your server:

1.  Review the generated code carefully
2.  Test the server with the MCP Inspector tool
3.  Connect it to Claude.app or other MCP clients
4.  Iterate based on real usage and feedback

Remember that Claude can help you modify and improve your server as requirements change over time.

Need more guidance? Just ask Claude specific questions about implementing MCP features or troubleshooting issues that arise.
</file>

<file path="docs/mcp-js-readme.md">
# MCP TypeScript SDK ![NPM Version](https://img.shields.io/npm/v/%40modelcontextprotocol%2Fsdk) ![MIT licensed](https://img.shields.io/npm/l/%40modelcontextprotocol%2Fsdk)

## Table of Contents

- [Overview](#overview)
- [Installation](#installation)
- [Quickstart](#quickstart)
- [What is MCP?](#what-is-mcp)
- [Core Concepts](#core-concepts)
  - [Server](#server)
  - [Resources](#resources)
  - [Tools](#tools)
  - [Prompts](#prompts)
- [Running Your Server](#running-your-server)
  - [stdio](#stdio)
  - [HTTP with SSE](#http-with-sse)
  - [Testing and Debugging](#testing-and-debugging)
- [Examples](#examples)
  - [Echo Server](#echo-server)
  - [SQLite Explorer](#sqlite-explorer)
- [Advanced Usage](#advanced-usage)
  - [Low-Level Server](#low-level-server)
  - [Writing MCP Clients](#writing-mcp-clients)
  - [Server Capabilities](#server-capabilities)

## Overview

The Model Context Protocol allows applications to provide context for LLMs in a standardized way, separating the concerns of providing context from the actual LLM interaction. This TypeScript SDK implements the full MCP specification, making it easy to:

- Build MCP clients that can connect to any MCP server
- Create MCP servers that expose resources, prompts and tools
- Use standard transports like stdio and SSE
- Handle all MCP protocol messages and lifecycle events

## Installation

```bash
npm install @modelcontextprotocol/sdk
```

## Quick Start

Let's create a simple MCP server that exposes a calculator tool and some data:

```typescript
import { McpServer, ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { z } from 'zod';

// Create an MCP server
const server = new McpServer({
  name: 'Demo',
  version: '1.0.0',
});

// Add an addition tool
server.tool('add', { a: z.number(), b: z.number() }, async ({ a, b }) => ({
  content: [{ type: 'text', text: String(a + b) }],
}));

// Add a dynamic greeting resource
server.resource(
  'greeting',
  new ResourceTemplate('greeting://{name}', { list: undefined }),
  async (uri, { name }) => ({
    contents: [
      {
        uri: uri.href,
        text: `Hello, ${name}!`,
      },
    ],
  }),
);

// Start receiving messages on stdin and sending messages on stdout
const transport = new StdioServerTransport();
await server.connect(transport);
```

## What is MCP?

The [Model Context Protocol (MCP)](https://modelcontextprotocol.io) lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. Think of it like a web API, but specifically designed for LLM interactions. MCP servers can:

- Expose data through **Resources** (think of these sort of like GET endpoints; they are used to load information into the LLM's context)
- Provide functionality through **Tools** (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)
- Define interaction patterns through **Prompts** (reusable templates for LLM interactions)
- And more!

## Core Concepts

### Server

The McpServer is your core interface to the MCP protocol. It handles connection management, protocol compliance, and message routing:

```typescript
const server = new McpServer({
  name: 'My App',
  version: '1.0.0',
});
```

### Resources

Resources are how you expose data to LLMs. They're similar to GET endpoints in a REST API - they provide data but shouldn't perform significant computation or have side effects:

```typescript
// Static resource
server.resource('config', 'config://app', async (uri) => ({
  contents: [
    {
      uri: uri.href,
      text: 'App configuration here',
    },
  ],
}));

// Dynamic resource with parameters
server.resource(
  'user-profile',
  new ResourceTemplate('users://{userId}/profile', { list: undefined }),
  async (uri, { userId }) => ({
    contents: [
      {
        uri: uri.href,
        text: `Profile data for user ${userId}`,
      },
    ],
  }),
);
```

### Tools

Tools let LLMs take actions through your server. Unlike resources, tools are expected to perform computation and have side effects:

```typescript
// Simple tool with parameters
server.tool(
  'calculate-bmi',
  {
    weightKg: z.number(),
    heightM: z.number(),
  },
  async ({ weightKg, heightM }) => ({
    content: [
      {
        type: 'text',
        text: String(weightKg / (heightM * heightM)),
      },
    ],
  }),
);

// Async tool with external API call
server.tool('fetch-weather', { city: z.string() }, async ({ city }) => {
  const response = await fetch(`https://api.weather.com/${city}`);
  const data = await response.text();
  return {
    content: [{ type: 'text', text: data }],
  };
});
```

### Prompts

Prompts are reusable templates that help LLMs interact with your server effectively:

```typescript
server.prompt('review-code', { code: z.string() }, ({ code }) => ({
  messages: [
    {
      role: 'user',
      content: {
        type: 'text',
        text: `Please review this code:\n\n${code}`,
      },
    },
  ],
}));
```

## Running Your Server

MCP servers in TypeScript need to be connected to a transport to communicate with clients. How you start the server depends on the choice of transport:

### stdio

For command-line tools and direct integrations:

```typescript
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';

const server = new McpServer({
  name: 'example-server',
  version: '1.0.0',
});

// ... set up server resources, tools, and prompts ...

const transport = new StdioServerTransport();
await server.connect(transport);
```

### HTTP with SSE

For remote servers, start a web server with a Server-Sent Events (SSE) endpoint, and a separate endpoint for the client to send its messages to:

```typescript
import express from 'express';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';

const server = new McpServer({
  name: 'example-server',
  version: '1.0.0',
});

// ... set up server resources, tools, and prompts ...

const app = express();

app.get('/sse', async (req, res) => {
  const transport = new SSEServerTransport('/messages', res);
  await server.connect(transport);
});

app.post('/messages', async (req, res) => {
  // Note: to support multiple simultaneous connections, these messages will
  // need to be routed to a specific matching transport. (This logic isn't
  // implemented here, for simplicity.)
  await transport.handlePostMessage(req, res);
});

app.listen(3001);
```

### Testing and Debugging

To test your server, you can use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector). See its README for more information.

## Examples

### Echo Server

A simple server demonstrating resources, tools, and prompts:

```typescript
import { McpServer, ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';
import { z } from 'zod';

const server = new McpServer({
  name: 'Echo',
  version: '1.0.0',
});

server.resource(
  'echo',
  new ResourceTemplate('echo://{message}', { list: undefined }),
  async (uri, { message }) => ({
    contents: [
      {
        uri: uri.href,
        text: `Resource echo: ${message}`,
      },
    ],
  }),
);

server.tool('echo', { message: z.string() }, async ({ message }) => ({
  content: [{ type: 'text', text: `Tool echo: ${message}` }],
}));

server.prompt('echo', { message: z.string() }, ({ message }) => ({
  messages: [
    {
      role: 'user',
      content: {
        type: 'text',
        text: `Please process this message: ${message}`,
      },
    },
  ],
}));
```

### SQLite Explorer

A more complex example showing database integration:

```typescript
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import sqlite3 from 'sqlite3';
import { promisify } from 'util';
import { z } from 'zod';

const server = new McpServer({
  name: 'SQLite Explorer',
  version: '1.0.0',
});

// Helper to create DB connection
const getDb = () => {
  const db = new sqlite3.Database('database.db');
  return {
    all: promisify<string, any[]>(db.all.bind(db)),
    close: promisify(db.close.bind(db)),
  };
};

server.resource('schema', 'schema://main', async (uri) => {
  const db = getDb();
  try {
    const tables = await db.all("SELECT sql FROM sqlite_master WHERE type='table'");
    return {
      contents: [
        {
          uri: uri.href,
          text: tables.map((t: { sql: string }) => t.sql).join('\n'),
        },
      ],
    };
  } finally {
    await db.close();
  }
});

server.tool('query', { sql: z.string() }, async ({ sql }) => {
  const db = getDb();
  try {
    const results = await db.all(sql);
    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify(results, null, 2),
        },
      ],
    };
  } catch (err: unknown) {
    const error = err as Error;
    return {
      content: [
        {
          type: 'text',
          text: `Error: ${error.message}`,
        },
      ],
      isError: true,
    };
  } finally {
    await db.close();
  }
});
```

## Advanced Usage

### Low-Level Server

For more control, you can use the low-level Server class directly:

```typescript
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  ListPromptsRequestSchema,
  GetPromptRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';

const server = new Server(
  {
    name: 'example-server',
    version: '1.0.0',
  },
  {
    capabilities: {
      prompts: {},
    },
  },
);

server.setRequestHandler(ListPromptsRequestSchema, async () => {
  return {
    prompts: [
      {
        name: 'example-prompt',
        description: 'An example prompt template',
        arguments: [
          {
            name: 'arg1',
            description: 'Example argument',
            required: true,
          },
        ],
      },
    ],
  };
});

server.setRequestHandler(GetPromptRequestSchema, async (request) => {
  if (request.params.name !== 'example-prompt') {
    throw new Error('Unknown prompt');
  }
  return {
    description: 'Example prompt',
    messages: [
      {
        role: 'user',
        content: {
          type: 'text',
          text: 'Example prompt text',
        },
      },
    ],
  };
});

const transport = new StdioServerTransport();
await server.connect(transport);
```

### Writing MCP Clients

The SDK provides a high-level client interface:

```typescript
import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';

const transport = new StdioClientTransport({
  command: 'node',
  args: ['server.js'],
});

const client = new Client(
  {
    name: 'example-client',
    version: '1.0.0',
  },
  {
    capabilities: {
      prompts: {},
      resources: {},
      tools: {},
    },
  },
);

await client.connect(transport);

// List prompts
const prompts = await client.listPrompts();

// Get a prompt
const prompt = await client.getPrompt('example-prompt', {
  arg1: 'value',
});

// List resources
const resources = await client.listResources();

// Read a resource
const resource = await client.readResource('file:///example.txt');

// Call a tool
const result = await client.callTool({
  name: 'example-tool',
  arguments: {
    arg1: 'value',
  },
});
```

## Documentation

- [Model Context Protocol documentation](https://modelcontextprotocol.io)
- [MCP Specification](https://spec.modelcontextprotocol.io)
- [Example Servers](https://github.com/modelcontextprotocol/servers)

## Contributing

Issues and pull requests are welcome on GitHub at https://github.com/modelcontextprotocol/typescript-sdk.

## License

This project is licensed under the MIT License—see the [LICENSE](LICENSE) file for details.
</file>

<file path="src/__tests__/resources/application-resources.test.ts">
import { ApplicationResources } from '../../resources/application-resources.js';
import { CoolifyClient } from '../../lib/coolify-client.js';
import { jest } from '@jest/globals';

jest.mock('../../lib/coolify-client.js');

describe('ApplicationResources', () => {
  let resources: ApplicationResources;
  let mockClient: jest.Mocked<CoolifyClient>;

  beforeEach(() => {
    mockClient = {
      deployApplication: jest.fn(),
    } as unknown as jest.Mocked<CoolifyClient>;

    resources = new ApplicationResources(mockClient);
  });

  describe('listApplications', () => {
    it('should throw not implemented error', async () => {
      await expect(resources.listApplications()).rejects.toThrow('Not implemented');
    });
  });

  describe('getApplication', () => {
    it('should throw not implemented error', async () => {
      await expect(resources.getApplication('test-id')).rejects.toThrow('Not implemented');
    });
  });

  describe('createApplication', () => {
    it('should throw not implemented error', async () => {
      await expect(resources.createApplication({ name: 'test-app' })).rejects.toThrow(
        'Not implemented',
      );
    });
  });

  describe('deleteApplication', () => {
    it('should throw not implemented error', async () => {
      await expect(resources.deleteApplication('test-id')).rejects.toThrow('Not implemented');
    });
  });
});
</file>

<file path="src/__tests__/resources/database-resources.test.ts">
import { DatabaseResources } from '../../resources/database-resources.js';
import { CoolifyClient } from '../../lib/coolify-client.js';
import { PostgresDatabase } from '../../types/coolify.js';
import { jest } from '@jest/globals';

jest.mock('../../lib/coolify-client.js');

describe('DatabaseResources', () => {
  let mockClient: jest.Mocked<CoolifyClient>;
  let resources: DatabaseResources;
  const mockDatabase: PostgresDatabase = {
    id: 1,
    uuid: 'test-uuid',
    name: 'test-db',
    description: 'test description',
    type: 'postgresql',
    status: 'running',
    created_at: '2024-01-01',
    updated_at: '2024-01-01',
    is_public: false,
    image: 'postgres:latest',
    postgres_user: 'test',
    postgres_password: 'test',
    postgres_db: 'test',
  };

  beforeEach(() => {
    mockClient = {
      listDatabases: jest.fn(),
      getDatabase: jest.fn(),
      updateDatabase: jest.fn(),
      deleteDatabase: jest.fn(),
    } as unknown as jest.Mocked<CoolifyClient>;
    resources = new DatabaseResources(mockClient);
  });

  describe('listDatabases', () => {
    it('should return a list of databases', async () => {
      mockClient.listDatabases.mockResolvedValue([mockDatabase]);

      const result = await resources.listDatabases();

      expect(result).toEqual([mockDatabase]);
      expect(mockClient.listDatabases).toHaveBeenCalled();
    });
  });

  describe('getDatabase', () => {
    it('should return a database by uuid', async () => {
      mockClient.getDatabase.mockResolvedValue(mockDatabase);

      const result = await resources.getDatabase('test-uuid');

      expect(result).toEqual(mockDatabase);
      expect(mockClient.getDatabase).toHaveBeenCalledWith('test-uuid');
    });
  });

  describe('updateDatabase', () => {
    it('should update a database', async () => {
      const updateData = {
        name: 'updated-db',
        description: 'updated description',
      };

      mockClient.updateDatabase.mockResolvedValue({ ...mockDatabase, ...updateData });

      const result = await resources.updateDatabase('test-uuid', updateData);

      expect(result).toEqual({ ...mockDatabase, ...updateData });
      expect(mockClient.updateDatabase).toHaveBeenCalledWith('test-uuid', updateData);
    });
  });

  describe('deleteDatabase', () => {
    it('should delete a database', async () => {
      const mockResponse = { message: 'Database deleted successfully' };
      mockClient.deleteDatabase.mockResolvedValue(mockResponse);

      const result = await resources.deleteDatabase('test-uuid', {});

      expect(result).toEqual(mockResponse);
      expect(mockClient.deleteDatabase).toHaveBeenCalledWith('test-uuid', {});
    });
  });
});
</file>

<file path="src/__tests__/resources/deployment-resources.test.ts">
import { DeploymentResources } from '../../resources/deployment-resources.js';
import { CoolifyClient } from '../../lib/coolify-client.js';
import { jest } from '@jest/globals';

jest.mock('../../lib/coolify-client.js');

describe('DeploymentResources', () => {
  let mockClient: jest.Mocked<CoolifyClient>;
  let resources: DeploymentResources;
  const mockDeployment = {
    id: 1,
    uuid: 'test-uuid',
    status: 'running',
    created_at: '2024-01-01',
    updated_at: '2024-01-01',
    application_uuid: 'app-uuid',
    environment_uuid: 'env-uuid',
  };

  beforeEach(() => {
    mockClient = {
      deployApplication: jest.fn(),
    } as unknown as jest.Mocked<CoolifyClient>;
    resources = new DeploymentResources(mockClient);
  });

  describe('listDeployments', () => {
    it('should throw not implemented error', async () => {
      await expect(resources.listDeployments()).rejects.toThrow('Not implemented');
    });
  });

  describe('getDeployment', () => {
    it('should throw not implemented error', async () => {
      await expect(resources.getDeployment('test-id')).rejects.toThrow('Not implemented');
    });
  });

  describe('deploy', () => {
    it('should deploy an application', async () => {
      mockClient.deployApplication.mockResolvedValue(mockDeployment);

      const result = await resources.deploy({ uuid: 'test-uuid' });

      expect(result).toEqual(mockDeployment);
      expect(mockClient.deployApplication).toHaveBeenCalledWith('test-uuid');
    });

    it('should handle deployment errors', async () => {
      const error = new Error('Deployment failed');
      mockClient.deployApplication.mockRejectedValue(error);

      await expect(resources.deploy({ uuid: 'test-uuid' })).rejects.toThrow('Deployment failed');
      expect(mockClient.deployApplication).toHaveBeenCalledWith('test-uuid');
    });
  });
});
</file>

<file path="src/__tests__/resources/service-resources.test.ts">
import { ServiceResources } from '../../resources/service-resources.js';
import { CoolifyClient } from '../../lib/coolify-client.js';
import { Service, ServiceType } from '../../types/coolify.js';
import { jest } from '@jest/globals';

jest.mock('../../lib/coolify-client.js');

describe('ServiceResources', () => {
  let mockClient: jest.Mocked<CoolifyClient>;
  let resources: ServiceResources;
  const mockService: Service = {
    id: 1,
    uuid: 'test-uuid',
    name: 'test-service',
    description: 'test description',
    type: 'code-server',
    status: 'running',
    created_at: '2024-01-01',
    updated_at: '2024-01-01',
    project_uuid: 'project-uuid',
    environment_name: 'test-env',
    environment_uuid: 'env-uuid',
    server_uuid: 'server-uuid',
    domains: ['test.com'],
  };

  beforeEach(() => {
    mockClient = {
      listServices: jest.fn(),
      getService: jest.fn(),
      createService: jest.fn(),
      deleteService: jest.fn(),
    } as unknown as jest.Mocked<CoolifyClient>;
    resources = new ServiceResources(mockClient);
  });

  describe('listServices', () => {
    it('should return a list of services', async () => {
      mockClient.listServices.mockResolvedValue([mockService]);

      const result = await resources.listServices();

      expect(result).toEqual([mockService]);
      expect(mockClient.listServices).toHaveBeenCalled();
    });
  });

  describe('getService', () => {
    it('should return a service by uuid', async () => {
      mockClient.getService.mockResolvedValue(mockService);

      const result = await resources.getService('test-uuid');

      expect(result).toEqual(mockService);
      expect(mockClient.getService).toHaveBeenCalledWith('test-uuid');
    });
  });

  describe('createService', () => {
    it('should create a new service', async () => {
      const createData = {
        name: 'new-service',
        type: 'code-server' as ServiceType,
        project_uuid: 'project-uuid',
        environment_name: 'test-env',
        environment_uuid: 'env-uuid',
        server_uuid: 'server-uuid',
      };

      const mockResponse = {
        uuid: 'new-uuid',
        domains: ['new-service.test.com'],
      };

      mockClient.createService.mockResolvedValue(mockResponse);

      const result = await resources.createService(createData);

      expect(result).toEqual(mockResponse);
      expect(mockClient.createService).toHaveBeenCalledWith(createData);
    });
  });

  describe('deleteService', () => {
    it('should delete a service', async () => {
      const mockResponse = { message: 'Service deleted' };
      mockClient.deleteService.mockResolvedValue(mockResponse);

      const result = await resources.deleteService('test-uuid');

      expect(result).toEqual(mockResponse);
      expect(mockClient.deleteService).toHaveBeenCalledWith('test-uuid', undefined);
    });
  });
});
</file>

<file path="src/__tests__/coolify-client.test.ts">
import { jest } from '@jest/globals';
import { CoolifyClient } from '../lib/coolify-client.js';
import { ServiceType, CreateServiceRequest } from '../types/coolify.js';

const mockFetch = jest.fn() as any;

describe('CoolifyClient', () => {
  let client: CoolifyClient;

  const mockServers = [
    {
      id: 1,
      uuid: 'test-uuid',
      name: 'test-server',
      status: 'running',
    },
  ];

  const mockServerInfo = {
    id: 1,
    uuid: 'test-uuid',
    name: 'test-server',
    status: 'running',
  };

  const mockServerResources = {
    resources: [
      {
        name: 'memory',
        value: '2GB',
      },
      {
        name: 'disk',
        value: '20GB',
      },
    ],
  };

  const mockService = {
    id: 1,
    uuid: 'test-uuid',
    name: 'test-service',
    type: 'code-server' as ServiceType,
    status: 'running',
    created_at: '2024-01-01',
    updated_at: '2024-01-01',
  };

  const errorResponse = {
    message: 'Resource not found',
  };

  beforeEach(() => {
    mockFetch.mockClear();
    (global as any).fetch = mockFetch;
    client = new CoolifyClient({
      baseUrl: 'http://localhost:3000',
      accessToken: 'test-api-key',
    });
  });

  describe('listServers', () => {
    it('should return a list of servers', async () => {
      mockFetch.mockImplementationOnce(
        async () =>
          ({
            ok: true,
            json: async () => mockServers,
          }) as Response,
      );

      const servers = await client.listServers();
      expect(servers).toEqual(mockServers);
      expect(mockFetch).toHaveBeenCalledWith('http://localhost:3000/api/v1/servers', {
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer test-api-key',
        },
      });
    });

    it('should handle errors', async () => {
      mockFetch.mockImplementationOnce(() =>
        Promise.resolve({
          ok: false,
          json: async () => errorResponse,
        } as Response),
      );

      await expect(client.listServers()).rejects.toThrow('Resource not found');
    });
  });

  describe('getServer', () => {
    it('should get server info', async () => {
      mockFetch.mockImplementationOnce(() =>
        Promise.resolve({
          ok: true,
          json: async () => mockServerInfo,
        } as Response),
      );

      const result = await client.getServer('test-uuid');

      expect(result).toEqual(mockServerInfo);
      expect(mockFetch).toHaveBeenCalledWith('http://localhost:3000/api/v1/servers/test-uuid', {
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer test-api-key',
        },
      });
    });

    it('should handle errors', async () => {
      mockFetch.mockImplementationOnce(() =>
        Promise.resolve({
          ok: false,
          json: async () => errorResponse,
        } as Response),
      );

      await expect(client.getServer('test-uuid')).rejects.toThrow('Resource not found');
    });
  });

  describe('getServerResources', () => {
    it('should get server resources', async () => {
      mockFetch.mockImplementationOnce(() =>
        Promise.resolve({
          ok: true,
          json: async () => mockServerResources,
        } as Response),
      );

      const result = await client.getServerResources('test-uuid');

      expect(result).toEqual(mockServerResources);
      expect(mockFetch).toHaveBeenCalledWith(
        'http://localhost:3000/api/v1/servers/test-uuid/resources',
        {
          headers: {
            'Content-Type': 'application/json',
            Authorization: 'Bearer test-api-key',
          },
        },
      );
    });

    it('should handle errors', async () => {
      mockFetch.mockImplementationOnce(() =>
        Promise.resolve({
          ok: false,
          json: async () => errorResponse,
        } as Response),
      );

      await expect(client.getServerResources('test-uuid')).rejects.toThrow('Resource not found');
    });
  });

  describe('listServices', () => {
    it('should list services', async () => {
      mockFetch.mockImplementationOnce(() =>
        Promise.resolve({
          ok: true,
          json: () => Promise.resolve([mockService]),
        } as Response),
      );

      const result = await client.listServices();

      expect(result).toEqual([mockService]);
      expect(mockFetch).toHaveBeenCalledWith('http://localhost:3000/api/v1/services', {
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer test-api-key',
        },
      });
    });
  });

  describe('getService', () => {
    it('should get service info', async () => {
      mockFetch.mockImplementationOnce(() =>
        Promise.resolve({
          ok: true,
          json: () => Promise.resolve(mockService),
        } as Response),
      );

      const result = await client.getService('test-uuid');

      expect(result).toEqual(mockService);
      expect(mockFetch).toHaveBeenCalledWith('http://localhost:3000/api/v1/services/test-uuid', {
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer test-api-key',
        },
      });
    });
  });

  describe('createService', () => {
    it('should create a service', async () => {
      mockFetch.mockImplementationOnce(() =>
        Promise.resolve({
          ok: true,
          json: () =>
            Promise.resolve({
              uuid: 'test-uuid',
              domains: ['test.com'],
            }),
        } as Response),
      );

      const createData: CreateServiceRequest = {
        name: 'test-service',
        type: 'code-server',
        project_uuid: 'project-uuid',
        environment_uuid: 'env-uuid',
        server_uuid: 'server-uuid',
      };

      const result = await client.createService(createData);

      expect(result).toEqual({
        uuid: 'test-uuid',
        domains: ['test.com'],
      });
      expect(mockFetch).toHaveBeenCalledWith('http://localhost:3000/api/v1/services', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer test-api-key',
        },
        body: JSON.stringify(createData),
      });
    });
  });

  describe('deleteService', () => {
    it('should delete a service', async () => {
      mockFetch.mockImplementationOnce(() =>
        Promise.resolve({
          ok: true,
          json: () => Promise.resolve({ message: 'Service deleted' }),
        } as Response),
      );

      const result = await client.deleteService('test-uuid');

      expect(result).toEqual({ message: 'Service deleted' });
      expect(mockFetch).toHaveBeenCalledWith('http://localhost:3000/api/v1/services/test-uuid', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer test-api-key',
        },
      });
    });
  });

  describe('error handling', () => {
    it('should handle network errors', async () => {
      const errorMessage = 'Network error';
      mockFetch.mockImplementationOnce(() => Promise.reject(new Error(errorMessage)));

      await expect(client.listServers()).rejects.toThrow(errorMessage);
    });
  });
});
</file>

<file path="src/lib/coolify-client.ts">
import {
  CoolifyConfig,
  ErrorResponse,
  ServerInfo,
  ServerResources,
  ServerDomain,
  ValidationResponse,
  Project,
  CreateProjectRequest,
  UpdateProjectRequest,
  Environment,
  Deployment,
  Database,
  DatabaseUpdateRequest,
  Service,
  CreateServiceRequest,
  DeleteServiceOptions,
} from '../types/coolify.js';

export class CoolifyClient {
  private baseUrl: string;
  private accessToken: string;

  constructor(config: CoolifyConfig) {
    if (!config.baseUrl) {
      throw new Error('Coolify base URL is required');
    }
    if (!config.accessToken) {
      throw new Error('Coolify access token is required');
    }
    this.baseUrl = config.baseUrl.replace(/\/$/, '');
    this.accessToken = config.accessToken;
  }

  private async request<T>(path: string, options: RequestInit = {}): Promise<T> {
    try {
      const url = `${this.baseUrl}/api/v1${path}`;
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${this.accessToken}`,
        },
        ...options,
      });

      const data = await response.json();

      if (!response.ok) {
        const error = data as ErrorResponse;
        throw new Error(error.message || `HTTP ${response.status}: ${response.statusText}`);
      }

      return data as T;
    } catch (error) {
      if (error instanceof TypeError && error.message.includes('fetch')) {
        throw new Error(
          `Failed to connect to Coolify server at ${this.baseUrl}. Please check if the server is running and the URL is correct.`,
        );
      }
      throw error;
    }
  }

  async listServers(): Promise<ServerInfo[]> {
    return this.request<ServerInfo[]>('/servers');
  }

  async getServer(uuid: string): Promise<ServerInfo> {
    return this.request<ServerInfo>(`/servers/${uuid}`);
  }

  async getServerResources(uuid: string): Promise<ServerResources> {
    return this.request<ServerResources>(`/servers/${uuid}/resources`);
  }

  async getServerDomains(uuid: string): Promise<ServerDomain[]> {
    return this.request<ServerDomain[]>(`/servers/${uuid}/domains`);
  }

  async validateServer(uuid: string): Promise<ValidationResponse> {
    return this.request<ValidationResponse>(`/servers/${uuid}/validate`);
  }

  async validateConnection(): Promise<void> {
    try {
      await this.listServers();
    } catch (error) {
      throw new Error(
        `Failed to connect to Coolify server: ${error instanceof Error ? error.message : 'Unknown error'}`,
      );
    }
  }

  async listProjects(): Promise<Project[]> {
    return this.request<Project[]>('/projects');
  }

  async getProject(uuid: string): Promise<Project> {
    return this.request<Project>(`/projects/${uuid}`);
  }

  async createProject(project: CreateProjectRequest): Promise<{ uuid: string }> {
    return this.request<{ uuid: string }>('/projects', {
      method: 'POST',
      body: JSON.stringify(project),
    });
  }

  async updateProject(uuid: string, project: UpdateProjectRequest): Promise<Project> {
    return this.request<Project>(`/projects/${uuid}`, {
      method: 'PATCH',
      body: JSON.stringify(project),
    });
  }

  async deleteProject(uuid: string): Promise<{ message: string }> {
    return this.request<{ message: string }>(`/projects/${uuid}`, {
      method: 'DELETE',
    });
  }

  async getProjectEnvironment(
    projectUuid: string,
    environmentNameOrUuid: string,
  ): Promise<Environment> {
    return this.request<Environment>(`/projects/${projectUuid}/${environmentNameOrUuid}`);
  }

  async deployApplication(uuid: string): Promise<Deployment> {
    const response = await this.request<Deployment>(`/applications/${uuid}/deploy`, {
      method: 'POST',
    });
    return response;
  }

  async listDatabases(): Promise<Database[]> {
    return this.request<Database[]>('/databases');
  }

  async getDatabase(uuid: string): Promise<Database> {
    return this.request<Database>(`/databases/${uuid}`);
  }

  async updateDatabase(uuid: string, data: DatabaseUpdateRequest): Promise<Database> {
    return this.request<Database>(`/databases/${uuid}`, {
      method: 'PATCH',
      body: JSON.stringify(data),
    });
  }

  async deleteDatabase(
    uuid: string,
    options?: {
      deleteConfigurations?: boolean;
      deleteVolumes?: boolean;
      dockerCleanup?: boolean;
      deleteConnectedNetworks?: boolean;
    },
  ): Promise<{ message: string }> {
    const queryParams = new URLSearchParams();
    if (options) {
      if (options.deleteConfigurations !== undefined) {
        queryParams.set('delete_configurations', options.deleteConfigurations.toString());
      }
      if (options.deleteVolumes !== undefined) {
        queryParams.set('delete_volumes', options.deleteVolumes.toString());
      }
      if (options.dockerCleanup !== undefined) {
        queryParams.set('docker_cleanup', options.dockerCleanup.toString());
      }
      if (options.deleteConnectedNetworks !== undefined) {
        queryParams.set('delete_connected_networks', options.deleteConnectedNetworks.toString());
      }
    }

    const queryString = queryParams.toString();
    const url = queryString ? `/databases/${uuid}?${queryString}` : `/databases/${uuid}`;

    return this.request<{ message: string }>(url, {
      method: 'DELETE',
    });
  }

  async listServices(): Promise<Service[]> {
    return this.request<Service[]>('/services');
  }

  async getService(uuid: string): Promise<Service> {
    return this.request<Service>(`/services/${uuid}`);
  }

  async createService(data: CreateServiceRequest): Promise<{ uuid: string; domains: string[] }> {
    return this.request<{ uuid: string; domains: string[] }>('/services', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async deleteService(uuid: string, options?: DeleteServiceOptions): Promise<{ message: string }> {
    const queryParams = new URLSearchParams();
    if (options) {
      if (options.deleteConfigurations !== undefined) {
        queryParams.set('delete_configurations', options.deleteConfigurations.toString());
      }
      if (options.deleteVolumes !== undefined) {
        queryParams.set('delete_volumes', options.deleteVolumes.toString());
      }
      if (options.dockerCleanup !== undefined) {
        queryParams.set('docker_cleanup', options.dockerCleanup.toString());
      }
      if (options.deleteConnectedNetworks !== undefined) {
        queryParams.set('delete_connected_networks', options.deleteConnectedNetworks.toString());
      }
    }

    const queryString = queryParams.toString();
    const url = queryString ? `/services/${uuid}?${queryString}` : `/services/${uuid}`;

    return this.request<{ message: string }>(url, {
      method: 'DELETE',
    });
  }

  // Add more methods as needed for other endpoints
}
</file>

<file path="src/lib/mcp-server.ts">
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { Transport } from '@modelcontextprotocol/sdk/shared/transport.js';
import { CoolifyClient } from './coolify-client.js';
import debug from 'debug';
import { z } from 'zod';
import type {
  ServerInfo,
  ServerResources,
  ServerDomain,
  ValidationResponse,
  Project,
  CreateProjectRequest,
  UpdateProjectRequest,
  Environment,
  Deployment,
  Database,
  DatabaseUpdateRequest,
  Service,
  CreateServiceRequest,
  DeleteServiceOptions,
} from '../types/coolify.js';

const log = debug('coolify:mcp');

// Define valid service types
const serviceTypes = [
  'activepieces',
  'appsmith',
  'appwrite',
  'authentik',
  'babybuddy',
  'budge',
  'changedetection',
  'chatwoot',
  'classicpress-with-mariadb',
  'classicpress-with-mysql',
  'classicpress-without-database',
  'cloudflared',
  'code-server',
  'dashboard',
  'directus',
  'directus-with-postgresql',
  'docker-registry',
  'docuseal',
  'docuseal-with-postgres',
  'dokuwiki',
  'duplicati',
  'emby',
  'embystat',
  'fider',
  'filebrowser',
  'firefly',
  'formbricks',
  'ghost',
  'gitea',
  'gitea-with-mariadb',
  'gitea-with-mysql',
  'gitea-with-postgresql',
  'glance',
  'glances',
  'glitchtip',
  'grafana',
  'grafana-with-postgresql',
  'grocy',
  'heimdall',
  'homepage',
  'jellyfin',
  'kuzzle',
  'listmonk',
  'logto',
  'mediawiki',
  'meilisearch',
  'metabase',
  'metube',
  'minio',
  'moodle',
  'n8n',
  'n8n-with-postgresql',
  'next-image-transformation',
  'nextcloud',
  'nocodb',
  'odoo',
  'openblocks',
  'pairdrop',
  'penpot',
  'phpmyadmin',
  'pocketbase',
  'posthog',
  'reactive-resume',
  'rocketchat',
  'shlink',
  'slash',
  'snapdrop',
  'statusnook',
  'stirling-pdf',
  'supabase',
  'syncthing',
  'tolgee',
  'trigger',
  'trigger-with-external-database',
  'twenty',
  'umami',
  'unleash-with-postgresql',
  'unleash-without-database',
  'uptime-kuma',
  'vaultwarden',
  'vikunja',
  'weblate',
  'whoogle',
  'wordpress-with-mariadb',
  'wordpress-with-mysql',
  'wordpress-without-database'
] as const;

export class CoolifyMcpServer extends McpServer {
  private client: CoolifyClient;

  constructor(config: { baseUrl: string; accessToken: string }) {
    super({
      name: 'coolify',
      version: '0.1.18'
    });
    log('Initializing server with config: %o', config);
    this.client = new CoolifyClient(config);
    this.setupTools();
  }

  private setupTools(): void {
    log('Setting up tools');
    
    this.tool('list_servers', 'List all Coolify servers', {}, async (_args, _extra) => {
      const servers = await this.client.listServers();
      return {
        content: [{ type: 'text', text: JSON.stringify(servers, null, 2) }]
      };
    });

    this.tool('get_server', 'Get details about a specific Coolify server', {
      uuid: z.string()
    }, async (args, _extra) => {
      const server = await this.client.getServer(args.uuid);
      return {
        content: [{ type: 'text', text: JSON.stringify(server, null, 2) }]
      };
    });

    this.tool('get_server_resources', 'Get the current resources running on a specific Coolify server', {
      uuid: z.string()
    }, async (args, _extra) => {
      const resources = await this.client.getServerResources(args.uuid);
      return {
        content: [{ type: 'text', text: JSON.stringify(resources, null, 2) }]
      };
    });

    this.tool('get_server_domains', 'Get domains for a specific Coolify server', {
      uuid: z.string()
    }, async (args, _extra) => {
      const domains = await this.client.getServerDomains(args.uuid);
      return {
        content: [{ type: 'text', text: JSON.stringify(domains, null, 2) }]
      };
    });

    this.tool('validate_server', 'Validate a specific Coolify server', {
      uuid: z.string()
    }, async (args, _extra) => {
      const validation = await this.client.validateServer(args.uuid);
      return {
        content: [{ type: 'text', text: JSON.stringify(validation, null, 2) }]
      };
    });

    this.tool('list_projects', 'List all Coolify projects', {}, async (_args, _extra) => {
      const projects = await this.client.listProjects();
      return {
        content: [{ type: 'text', text: JSON.stringify(projects, null, 2) }]
      };
    });

    this.tool('get_project', 'Get details about a specific Coolify project', {
      uuid: z.string()
    }, async (args, _extra) => {
      const project = await this.client.getProject(args.uuid);
      return {
        content: [{ type: 'text', text: JSON.stringify(project, null, 2) }]
      };
    });

    this.tool('create_project', 'Create a new Coolify project', {
      name: z.string(),
      description: z.string().optional()
    }, async (args, _extra) => {
      const result = await this.client.createProject({
        name: args.name,
        description: args.description
      });
      return {
        content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]
      };
    });

    this.tool('update_project', 'Update an existing Coolify project', {
      uuid: z.string(),
      name: z.string(),
      description: z.string().optional()
    }, async (args, _extra) => {
      const { uuid, ...updateData } = args;
      const result = await this.client.updateProject(uuid, updateData);
      return {
        content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]
      };
    });

    this.tool('delete_project', 'Delete a Coolify project', {
      uuid: z.string()
    }, async (args, _extra) => {
      const result = await this.client.deleteProject(args.uuid);
      return {
        content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]
      };
    });

    this.tool('get_project_environment', 'Get environment details for a Coolify project', {
      project_uuid: z.string(),
      environment_name_or_uuid: z.string()
    }, async (args, _extra) => {
      const environment = await this.client.getProjectEnvironment(args.project_uuid, args.environment_name_or_uuid);
      return {
        content: [{ type: 'text', text: JSON.stringify(environment, null, 2) }]
      };
    });

    this.tool('list_databases', 'List all Coolify databases', {}, async (_args, _extra) => {
      const databases = await this.client.listDatabases();
      return {
        content: [{ type: 'text', text: JSON.stringify(databases, null, 2) }]
      };
    });

    this.tool('get_database', 'Get details about a specific Coolify database', {
      uuid: z.string()
    }, async (args, _extra) => {
      const database = await this.client.getDatabase(args.uuid);
      return {
        content: [{ type: 'text', text: JSON.stringify(database, null, 2) }]
      };
    });

    this.tool('update_database', 'Update a Coolify database', {
      uuid: z.string(),
      data: z.record(z.unknown())
    }, async (args, _extra) => {
      const result = await this.client.updateDatabase(args.uuid, args.data);
      return {
        content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]
      };
    });

    const deleteOptionsSchema = {
      deleteConfigurations: z.boolean().optional(),
      deleteVolumes: z.boolean().optional(),
      dockerCleanup: z.boolean().optional(),
      deleteConnectedNetworks: z.boolean().optional()
    };

    this.tool('delete_database', 'Delete a Coolify database', {
      uuid: z.string(),
      options: z.object(deleteOptionsSchema).optional()
    }, async (args, _extra) => {
      const result = await this.client.deleteDatabase(args.uuid, args.options);
      return {
        content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]
      };
    });

    this.tool('deploy_application', 'Deploy a Coolify application', {
      uuid: z.string()
    }, async (args, _extra) => {
      const result = await this.client.deployApplication(args.uuid);
      return {
        content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]
      };
    });

    this.tool('list_services', 'List all Coolify services', {}, async (_args, _extra) => {
      const services = await this.client.listServices();
      return {
        content: [{ type: 'text', text: JSON.stringify(services, null, 2) }]
      };
    });

    this.tool('get_service', 'Get details about a specific Coolify service', {
      uuid: z.string()
    }, async (args, _extra) => {
      const service = await this.client.getService(args.uuid);
      return {
        content: [{ type: 'text', text: JSON.stringify(service, null, 2) }]
      };
    });

    this.tool('create_service', 'Create a new Coolify service', {
      type: z.enum(serviceTypes),
      project_uuid: z.string(),
      server_uuid: z.string(),
      name: z.string().optional(),
      description: z.string().optional(),
      environment_name: z.string().optional(),
      environment_uuid: z.string().optional(),
      destination_uuid: z.string().optional(),
      instant_deploy: z.boolean().optional()
    }, async (args, _extra) => {
      const result = await this.client.createService(args);
      return {
        content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]
      };
    });

    this.tool('delete_service', 'Delete a Coolify service', {
      uuid: z.string(),
      options: z.object(deleteOptionsSchema).optional()
    }, async (args, _extra) => {
      const result = await this.client.deleteService(args.uuid, args.options);
      return {
        content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]
      };
    });
  }

  async connect(transport: Transport): Promise<void> {
    log('Starting server...');
    log('Validating connection...');
    await this.client.validateConnection();
    await super.connect(transport);
    log('Server started successfully');
  }

  async list_servers(): Promise<ServerInfo[]> {
    return this.client.listServers();
  }

  async get_server(uuid: string): Promise<ServerInfo> {
    return this.client.getServer(uuid);
  }

  async get_server_resources(uuid: string): Promise<ServerResources> {
    return this.client.getServerResources(uuid);
  }

  async get_server_domains(uuid: string): Promise<ServerDomain[]> {
    return this.client.getServerDomains(uuid);
  }

  async validate_server(uuid: string): Promise<ValidationResponse> {
    return this.client.validateServer(uuid);
  }

  async list_projects(): Promise<Project[]> {
    return this.client.listProjects();
  }

  async get_project(uuid: string): Promise<Project> {
    return this.client.getProject(uuid);
  }

  async create_project(project: CreateProjectRequest): Promise<{ uuid: string }> {
    return this.client.createProject(project);
  }

  async update_project(uuid: string, project: UpdateProjectRequest): Promise<Project> {
    return this.client.updateProject(uuid, project);
  }

  async delete_project(uuid: string): Promise<{ message: string }> {
    return this.client.deleteProject(uuid);
  }

  async get_project_environment(
    projectUuid: string,
    environmentNameOrUuid: string,
  ): Promise<Environment> {
    return this.client.getProjectEnvironment(projectUuid, environmentNameOrUuid);
  }

  async deploy_application(params: { uuid: string }): Promise<Deployment> {
    return this.client.deployApplication(params.uuid);
  }

  async list_databases(): Promise<Database[]> {
    return this.client.listDatabases();
  }

  async get_database(uuid: string): Promise<Database> {
    return this.client.getDatabase(uuid);
  }

  async update_database(uuid: string, data: DatabaseUpdateRequest): Promise<Database> {
    return this.client.updateDatabase(uuid, data);
  }

  async delete_database(
    uuid: string,
    options?: {
      deleteConfigurations?: boolean;
      deleteVolumes?: boolean;
      dockerCleanup?: boolean;
      deleteConnectedNetworks?: boolean;
    },
  ): Promise<{ message: string }> {
    return this.client.deleteDatabase(uuid, options);
  }

  async list_services(): Promise<Service[]> {
    return this.client.listServices();
  }

  async get_service(uuid: string): Promise<Service> {
    return this.client.getService(uuid);
  }

  async create_service(data: CreateServiceRequest): Promise<{ uuid: string; domains: string[] }> {
    return this.client.createService(data);
  }

  async delete_service(uuid: string, options?: DeleteServiceOptions): Promise<{ message: string }> {
    return this.client.deleteService(uuid, options);
  }
}
</file>

<file path="src/lib/resource.ts">
import 'reflect-metadata';

/**
 * Metadata key for storing the resource URI
 */
const RESOURCE_URI_KEY = Symbol('resourceUri');

/**
 * Decorator for marking methods as MCP resources.
 * @param uri The URI pattern for the resource
 */
export function Resource(uri: string): MethodDecorator {
  return function (
    target: object,
    propertyKey: string | symbol,
    descriptor: PropertyDescriptor,
  ): PropertyDescriptor {
    // Store the URI pattern in the method's metadata
    Reflect.defineMetadata(RESOURCE_URI_KEY, uri, target, propertyKey);
    return descriptor;
  };
}

/**
 * Get the resource URI for a decorated method
 * @param target The class instance or constructor
 * @param propertyKey The method name
 * @returns The resource URI or undefined if not a resource
 */
export function getResourceUri(target: object, propertyKey: string | symbol): string | undefined {
  return Reflect.getMetadata(RESOURCE_URI_KEY, target, propertyKey);
}
</file>

<file path="src/resources/application-resources.ts">
import { Resource } from '../lib/resource.js';
import { CoolifyClient } from '../lib/coolify-client.js';
import { Application, CreateApplicationRequest } from '../types/coolify.js';

export class ApplicationResources {
  private client: CoolifyClient;

  constructor(client: CoolifyClient) {
    this.client = client;
  }

  @Resource('coolify/applications/list')
  async listApplications(): Promise<Application[]> {
    // TODO: Implement listApplications in CoolifyClient
    throw new Error('Not implemented');
  }

  @Resource('coolify/applications/{id}')
  async getApplication(_id: string): Promise<Application> {
    // TODO: Implement getApplication in CoolifyClient
    throw new Error('Not implemented');
  }

  @Resource('coolify/applications/create')
  async createApplication(_data: CreateApplicationRequest): Promise<{ uuid: string }> {
    // TODO: Implement createApplication in CoolifyClient
    throw new Error('Not implemented');
  }

  @Resource('coolify/applications/{id}/delete')
  async deleteApplication(_id: string): Promise<{ message: string }> {
    // TODO: Implement deleteApplication in CoolifyClient
    throw new Error('Not implemented');
  }
}
</file>

<file path="src/resources/database-resources.ts">
import { Resource } from '../lib/resource.js';
import { CoolifyClient } from '../lib/coolify-client.js';
import { Database, DatabaseUpdateRequest } from '../types/coolify.js';

export class DatabaseResources {
  private client: CoolifyClient;

  constructor(client: CoolifyClient) {
    this.client = client;
  }

  @Resource('coolify/databases/list')
  async listDatabases(): Promise<Database[]> {
    return this.client.listDatabases();
  }

  @Resource('coolify/databases/{id}')
  async getDatabase(id: string): Promise<Database> {
    return this.client.getDatabase(id);
  }

  @Resource('coolify/databases/{id}/update')
  async updateDatabase(id: string, data: DatabaseUpdateRequest): Promise<Database> {
    return this.client.updateDatabase(id, data);
  }

  @Resource('coolify/databases/{id}/delete')
  async deleteDatabase(
    id: string,
    options?: {
      deleteConfigurations?: boolean;
      deleteVolumes?: boolean;
      dockerCleanup?: boolean;
      deleteConnectedNetworks?: boolean;
    },
  ): Promise<{ message: string }> {
    return this.client.deleteDatabase(id, options);
  }
}
</file>

<file path="src/resources/deployment-resources.ts">
import { Resource } from '../lib/resource.js';
import { CoolifyClient } from '../lib/coolify-client.js';
import { Deployment } from '../types/coolify.js';

export class DeploymentResources {
  private client: CoolifyClient;

  constructor(client: CoolifyClient) {
    this.client = client;
  }

  @Resource('coolify/deployments/list')
  async listDeployments(): Promise<Deployment[]> {
    // TODO: Implement listDeployments in CoolifyClient
    throw new Error('Not implemented');
  }

  @Resource('coolify/deployments/{id}')
  async getDeployment(_id: string): Promise<Deployment> {
    // TODO: Implement getDeployment in CoolifyClient
    throw new Error('Not implemented');
  }

  @Resource('coolify/deploy')
  async deploy(params: { uuid: string; forceRebuild?: boolean }): Promise<Deployment> {
    return this.client.deployApplication(params.uuid);
  }
}
</file>

<file path="src/resources/index.ts">
export * from './database-resources.js';
export * from './deployment-resources.js';
export * from './application-resources.js';
export * from './service-resources.js';
</file>

<file path="src/resources/service-resources.ts">
import { Resource } from '../lib/resource.js';
import { CoolifyClient } from '../lib/coolify-client.js';
import { Service, CreateServiceRequest, DeleteServiceOptions } from '../types/coolify.js';

export class ServiceResources {
  private client: CoolifyClient;

  constructor(client: CoolifyClient) {
    this.client = client;
  }

  @Resource('coolify/services/list')
  async listServices(): Promise<Service[]> {
    return this.client.listServices();
  }

  @Resource('coolify/services/{id}')
  async getService(id: string): Promise<Service> {
    return this.client.getService(id);
  }

  @Resource('coolify/services/create')
  async createService(data: CreateServiceRequest): Promise<{ uuid: string; domains: string[] }> {
    return this.client.createService(data);
  }

  @Resource('coolify/services/{id}/delete')
  async deleteService(id: string, options?: DeleteServiceOptions): Promise<{ message: string }> {
    return this.client.deleteService(id, options);
  }
}
</file>

<file path="src/types/coolify.ts">
export interface CoolifyConfig {
  baseUrl: string;
  accessToken: string;
}

export interface ServerInfo {
  uuid: string;
  name: string;
  status: 'running' | 'stopped' | 'error';
  version: string;
  resources: {
    cpu: number;
    memory: number;
    disk: number;
  };
}

export interface ResourceStatus {
  id: number;
  uuid: string;
  name: string;
  type: string;
  created_at: string;
  updated_at: string;
  status: string;
}

export type ServerResources = ResourceStatus[];

export interface ErrorResponse {
  error: string;
  status: number;
  message: string;
}

export interface ServerDomain {
  ip: string;
  domains: string[];
}

export interface ValidationResponse {
  message: string;
}

export interface Environment {
  id: number;
  uuid: string;
  name: string;
  project_uuid: string;
  variables?: Record<string, string>;
  created_at: string;
  updated_at: string;
}

export interface Project {
  id: number;
  uuid: string;
  name: string;
  description?: string;
  environments?: Environment[];
}

export interface CreateProjectRequest {
  name: string;
  description?: string;
}

export interface UpdateProjectRequest {
  name?: string;
  description?: string;
}

export interface LogEntry {
  timestamp: string;
  level: string;
  message: string;
}

export interface Deployment {
  id: number;
  uuid: string;
  application_uuid: string;
  status: string;
  created_at: string;
  updated_at: string;
}

export interface DatabaseBase {
  id: number;
  uuid: string;
  name: string;
  description?: string;
  type:
    | 'postgresql'
    | 'mysql'
    | 'mariadb'
    | 'mongodb'
    | 'redis'
    | 'keydb'
    | 'clickhouse'
    | 'dragonfly';
  status: 'running' | 'stopped' | 'error';
  created_at: string;
  updated_at: string;
  is_public: boolean;
  public_port?: number;
  image: string;
  limits?: {
    memory?: string;
    memory_swap?: string;
    memory_swappiness?: number;
    memory_reservation?: string;
    cpus?: string;
    cpuset?: string;
    cpu_shares?: number;
  };
}

export interface PostgresDatabase extends DatabaseBase {
  type: 'postgresql';
  postgres_user: string;
  postgres_password: string;
  postgres_db: string;
  postgres_initdb_args?: string;
  postgres_host_auth_method?: string;
  postgres_conf?: string;
}

export interface MySQLDatabase extends DatabaseBase {
  type: 'mysql';
  mysql_root_password: string;
  mysql_user?: string;
  mysql_password?: string;
  mysql_database?: string;
}

export interface MariaDBDatabase extends DatabaseBase {
  type: 'mariadb';
  mariadb_root_password: string;
  mariadb_user?: string;
  mariadb_password?: string;
  mariadb_database?: string;
  mariadb_conf?: string;
}

export interface MongoDBDatabase extends DatabaseBase {
  type: 'mongodb';
  mongo_initdb_root_username: string;
  mongo_initdb_root_password: string;
  mongo_initdb_database?: string;
  mongo_conf?: string;
}

export interface RedisDatabase extends DatabaseBase {
  type: 'redis';
  redis_password?: string;
  redis_conf?: string;
}

export interface KeyDBDatabase extends DatabaseBase {
  type: 'keydb';
  keydb_password?: string;
  keydb_conf?: string;
}

export interface ClickhouseDatabase extends DatabaseBase {
  type: 'clickhouse';
  clickhouse_admin_user: string;
  clickhouse_admin_password: string;
}

export interface DragonflyDatabase extends DatabaseBase {
  type: 'dragonfly';
  dragonfly_password: string;
}

export type Database =
  | PostgresDatabase
  | MySQLDatabase
  | MariaDBDatabase
  | MongoDBDatabase
  | RedisDatabase
  | KeyDBDatabase
  | ClickhouseDatabase
  | DragonflyDatabase;

export interface DatabaseUpdateRequest {
  name?: string;
  description?: string;
  image?: string;
  is_public?: boolean;
  public_port?: number;
  limits_memory?: string;
  limits_memory_swap?: string;
  limits_memory_swappiness?: number;
  limits_memory_reservation?: string;
  limits_cpus?: string;
  limits_cpuset?: string;
  limits_cpu_shares?: number;
  postgres_user?: string;
  postgres_password?: string;
  postgres_db?: string;
  postgres_initdb_args?: string;
  postgres_host_auth_method?: string;
  postgres_conf?: string;
  clickhouse_admin_user?: string;
  clickhouse_admin_password?: string;
  dragonfly_password?: string;
  redis_password?: string;
  redis_conf?: string;
  keydb_password?: string;
  keydb_conf?: string;
  mariadb_conf?: string;
  mariadb_root_password?: string;
  mariadb_user?: string;
  mariadb_password?: string;
  mariadb_database?: string;
  mongo_conf?: string;
  mongo_initdb_root_username?: string;
  mongo_initdb_root_password?: string;
  mongo_initdb_database?: string;
  mysql_root_password?: string;
  mysql_password?: string;
  mysql_user?: string;
  mysql_database?: string;
}

export type ServiceType =
  | 'activepieces'
  | 'appsmith'
  | 'appwrite'
  | 'authentik'
  | 'babybuddy'
  | 'budge'
  | 'changedetection'
  | 'chatwoot'
  | 'classicpress-with-mariadb'
  | 'classicpress-with-mysql'
  | 'classicpress-without-database'
  | 'cloudflared'
  | 'code-server'
  | 'dashboard'
  | 'directus'
  | 'directus-with-postgresql'
  | 'docker-registry'
  | 'docuseal'
  | 'docuseal-with-postgres'
  | 'dokuwiki'
  | 'duplicati'
  | 'emby'
  | 'embystat'
  | 'fider'
  | 'filebrowser'
  | 'firefly'
  | 'formbricks'
  | 'ghost'
  | 'gitea'
  | 'gitea-with-mariadb'
  | 'gitea-with-mysql'
  | 'gitea-with-postgresql'
  | 'glance'
  | 'glances'
  | 'glitchtip'
  | 'grafana'
  | 'grafana-with-postgresql'
  | 'grocy'
  | 'heimdall'
  | 'homepage'
  | 'jellyfin'
  | 'kuzzle'
  | 'listmonk'
  | 'logto'
  | 'mediawiki'
  | 'meilisearch'
  | 'metabase'
  | 'metube'
  | 'minio'
  | 'moodle'
  | 'n8n'
  | 'n8n-with-postgresql'
  | 'next-image-transformation'
  | 'nextcloud'
  | 'nocodb'
  | 'odoo'
  | 'openblocks'
  | 'pairdrop'
  | 'penpot'
  | 'phpmyadmin'
  | 'pocketbase'
  | 'posthog'
  | 'reactive-resume'
  | 'rocketchat'
  | 'shlink'
  | 'slash'
  | 'snapdrop'
  | 'statusnook'
  | 'stirling-pdf'
  | 'supabase'
  | 'syncthing'
  | 'tolgee'
  | 'trigger'
  | 'trigger-with-external-database'
  | 'twenty'
  | 'umami'
  | 'unleash-with-postgresql'
  | 'unleash-without-database'
  | 'uptime-kuma'
  | 'vaultwarden'
  | 'vikunja'
  | 'weblate'
  | 'whoogle'
  | 'wordpress-with-mariadb'
  | 'wordpress-with-mysql'
  | 'wordpress-without-database';

export interface Service {
  id: number;
  uuid: string;
  name: string;
  description?: string;
  type: ServiceType;
  status: 'running' | 'stopped' | 'error';
  created_at: string;
  updated_at: string;
  project_uuid: string;
  environment_name: string;
  environment_uuid: string;
  server_uuid: string;
  destination_uuid?: string;
  domains?: string[];
}

export interface CreateServiceRequest {
  type: ServiceType;
  name?: string;
  description?: string;
  project_uuid: string;
  environment_name?: string;
  environment_uuid?: string;
  server_uuid: string;
  destination_uuid?: string;
  instant_deploy?: boolean;
}

export interface DeleteServiceOptions {
  deleteConfigurations?: boolean;
  deleteVolumes?: boolean;
  dockerCleanup?: boolean;
  deleteConnectedNetworks?: boolean;
}

export interface Application {
  uuid: string;
  name: string;
  // Add other application properties as needed
}

export interface CreateApplicationRequest {
  name: string;
  // Add other required fields for application creation
}
</file>

<file path="src/index.ts">
#!/usr/bin/env node

import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { CoolifyMcpServer } from './lib/mcp-server.js';
import { CoolifyConfig } from './types/coolify.js';

declare const process: NodeJS.Process;

async function main(): Promise<void> {
  const config: CoolifyConfig = {
    baseUrl: process.env.COOLIFY_BASE_URL || 'http://localhost:3000',
    accessToken: process.env.COOLIFY_ACCESS_TOKEN || '',
  };

  if (!config.accessToken) {
    throw new Error('COOLIFY_ACCESS_TOKEN environment variable is required');
  }

  const server = new CoolifyMcpServer(config);
  const transport = new StdioServerTransport();

  await server.connect(transport);
}

main().catch((error) => {
  console.error('Fatal error:', error);
  process.exit(1);
});
</file>

<file path=".eslintrc.json">
{
  "env": {
    "node": true,
    "es2021": true
  },
  "extends": ["eslint:recommended", "plugin:@typescript-eslint/recommended", "prettier"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint"],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "warn",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "@typescript-eslint/no-explicit-any": "warn"
  }
}
</file>

<file path=".gitignore">
# Dependencies
node_modules/

# Build output
dist/
build/
/lib/
coverage/

# IDE and editor files
.idea/
.vscode/
*.swp
*.swo
.DS_Store
Thumbs.db

# Environment variables
.env
.env.local
.env.*.local

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Test coverage
coverage/
.nyc_output/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity
</file>

<file path=".lintstagedrc.json">
{
  "src/**/*.ts": ["eslint --fix", "prettier --write"],
  "*.json": ["prettier --write"],
  "*.md": ["prettier --write", "markdownlint-cli2"]
}
</file>

<file path=".markdownlint-cli2.jsonc">
{
  "config": {
    "line-length": false,
    "no-duplicate-heading": false,
    "no-inline-html": false,
  },
  "ignores": ["node_modules", "dist"],
}
</file>

<file path=".prettierrc">
{
  "semi": true,
  "trailingComma": "all",
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2
}
</file>

<file path="debug.js">
import { CoolifyMcpServer } from './dist/lib/mcp-server.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';

// Enable debug logging
process.env.DEBUG = '*';

const server = new CoolifyMcpServer({
    baseUrl: 'https://coolify.dev',  // Replace with your actual Coolify URL
    accessToken: 'your-actual-token'   // Replace with your actual Coolify token
});

const transport = new StdioServerTransport();
await server.connect(transport);
</file>

<file path="jest.config.js">
/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: 'ts-jest',
  testEnvironment: 'node',
  moduleNameMapper: {
    '^(\\.{1,2}/.*)\\.js$': '$1',
  },
  transform: {
    '^.+\\.tsx?$': [
      'ts-jest',
      {
        useESM: true,
      },
    ],
  },
  extensionsToTreatAsEsm: ['.ts'],
  testPathIgnorePatterns: ['/node_modules/', '/dist/', '\\.d\\.ts$'],
};
</file>

<file path="package.json">
{
  "name": "@masonator/coolify-mcp",
  "scope": "@masonator",
  "version": "0.2.1",
  "description": "MCP server implementation for Coolify",
  "type": "module",
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "exports": {
    ".": {
      "import": "./dist/index.js",
      "require": "./dist/index.cjs",
      "types": "./dist/index.d.ts"
    }
  },
  "bin": {
    "coolify-mcp": "dist/index.js"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "tsc && shx chmod +x dist/*.js",
    "dev": "tsc --watch",
    "test": "NODE_OPTIONS=--experimental-vm-modules jest",
    "test:watch": "NODE_OPTIONS=--experimental-vm-modules jest --watch",
    "test:coverage": "NODE_OPTIONS=--experimental-vm-modules jest --coverage",
    "lint": "eslint . --ext .ts",
    "lint:fix": "eslint . --ext .ts --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "prepare": "husky",
    "prepublishOnly": "npm test && npm run lint",
    "start": "node dist/index.js"
  },
  "keywords": [
    "coolify",
    "mcp",
    "model-context-protocol"
  ],
  "author": "Stuart Mason",
  "license": "MIT",
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.6.1",
    "@modelcontextprotocol/server-github": "^2025.1.23",
    "reflect-metadata": "^0.2.2",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/debug": "^4.1.12",
    "@types/jest": "^29.5.14",
    "@types/node": "^20.17.23",
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "husky": "^9.0.11",
    "jest": "^29.7.0",
    "lint-staged": "^15.2.2",
    "markdownlint-cli2": "^0.12.1",
    "prettier": "^3.5.3",
    "shx": "^0.3.4",
    "ts-jest": "^29.2.6",
    "typescript": "^5.8.2"
  },
  "engines": {
    "node": ">=18"
  }
}
</file>

<file path="README.md">
# Coolify MCP Server

A Model Context Protocol (MCP) server implementation for [Coolify](https://coolify.io/), enabling AI assistants to interact with your Coolify instances through natural language.

## Example Prompts

Here are example prompts you can use with MCP-compatible AI assistants to interact with your Coolify instance:

### Server Management

```
# List and Inspect Servers
- Show me all Coolify servers in my instance
- What's the status of server {uuid}?
- Show me the resources running on server {uuid}
- What domains are configured for server {uuid}?
- Can you validate the connection to server {uuid}?

# Resource Monitoring
- How much CPU and memory is server {uuid} using?
- List all resources running on server {uuid}
- Show me the current status of all servers
```

### Project Management

```
# Project Operations
- List all my Coolify projects
- Create a new project called "my-webapp" with description "My web application"
- Show me the details of project {uuid}
- Update project {uuid} to change its name to "new-name"
- Delete project {uuid}

# Environment Management
- Show me the environments in project {uuid}
- Get details of the production environment in project {uuid}
- What variables are set in the staging environment of project {uuid}?
```

### Application and Service Management

```
# Application Management
- List all applications
- Show me details of application {uuid}
- Create a new application called "my-nodejs-app"
- Delete application {uuid}

# Service Operations
- Show me all running services
- Create a new WordPress service:
  - Name: my-blog
  - Project UUID: {project_uuid}
  - Server UUID: {server_uuid}
  - Type: wordpress-with-mysql
- What's the status of service {uuid}?
- Delete service {uuid} and clean up its resources
```

### Database Management

```
# Database Operations
- List all databases
- Show me the configuration of database {uuid}
- Update database {uuid}:
  - Increase memory limit to 1GB
  - Change public port to 5432
  - Update password
- Delete database {uuid} and clean up volumes

# Database Types
- Create a PostgreSQL database
- Set up a Redis instance
- Configure a MongoDB database
- Initialize a MySQL database
```

### Deployment Management

```
# Deployment Operations
- Show me all active deployments
- What's the status of deployment {uuid}?
- Deploy application {uuid}
- Force rebuild and deploy application {uuid}
- List recent deployments for application {uuid}
```

## Installation

### Prerequisites

- Node.js >= 18
- A running Coolify instance
- Coolify API access token

### Setup in AI Tools

#### Claude Desktop

```json
"coolify": {
    "command": "npx",
    "args": [
        "-y", "@masonator/coolify-mcp"
    ],
    "env": {
        "COOLIFY_ACCESS_TOKEN": "0|your-secret-token",
        "COOLIFY_BASE_URL": "https://your-coolify-instance.com"
    }
}
```

#### Cursor

```bash
env COOLIFY_ACCESS_TOKEN:0|your-secret-token COOLIFY_BASE_URL:https://your-coolify-instance.com npx -y @stumason/coolify-mcp
```

## Development

### Local Setup

```bash
# Clone the repository
git clone https://github.com/stumason/coolify-mcp.git
cd coolify-mcp

# Install dependencies
npm install

# Build the project
npm run build

# Run tests
npm test
```

### Environment Variables

```bash
# Required
COOLIFY_ACCESS_TOKEN=your_access_token_here

# Optional (defaults to http://localhost:3000)
COOLIFY_BASE_URL=https://your.coolify.instance
```

## API Reference

### Resource Types

#### Application

```typescript
interface Application {
  uuid: string;
  name: string;
  // Additional properties based on your Coolify instance
}
```

#### Service

```typescript
interface Service {
  id: number;
  uuid: string;
  name: string;
  type: ServiceType; // Various types like 'wordpress', 'mysql', etc.
  status: 'running' | 'stopped' | 'error';
  project_uuid: string;
  environment_uuid: string;
  server_uuid: string;
  domains?: string[];
}
```

#### Database

```typescript
interface Database {
  id: number;
  uuid: string;
  name: string;
  type: 'postgresql' | 'mysql' | 'mongodb' | 'redis' | /* other types */;
  status: 'running' | 'stopped' | 'error';
  is_public: boolean;
  public_port?: number;
  // Additional configuration based on database type
}
```

#### Deployment

```typescript
interface Deployment {
  id: number;
  uuid: string;
  application_uuid: string;
  status: string;
  created_at: string;
  updated_at: string;
}
```

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.

## License

MIT

## Support

For support, please:

1. Check the [issues](https://github.com/stumason/coolify-mcp/issues) page
2. Create a new issue if needed
3. Join the Coolify community
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "declaration": true,
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "allowJs": true,
    "resolveJsonModule": true
  },
  "include": ["src"],
  "exclude": ["node_modules", "dist", "tests"]
}
</file>

</repository_files>
