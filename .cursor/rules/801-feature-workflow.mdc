---
description: FOLLOW feature development workflow WHEN implementing new features TO ensure consistent, tested, and documented changes
globs: src/**/*.{ts,tsx}
---

# Feature Development Workflow

## Context
- When implementing new features from the features documentation
- When making significant changes that require testing and documentation
- When working on a feature branch

## Requirements
- Start from up-to-date main branch
- Create feature branch with descriptive name (feature/feature-name)
- Locate and review feature documentation in docs/features directory
- Follow implementation in small, focused chunks:
  1. Add types and interfaces first
  2. Add client methods next
  3. Add MCP server tools
  4. Add tests for each component
  5. Update documentation for completed items
- Commit after EACH of these changes:
  - New types/interfaces
  - New client methods
  - New MCP tools
  - New tests
  - Documentation updates
  - Linting/formatting fixes
- Push to remote after each significant commit to:
  - Back up your work
  - Enable early feedback
  - Make PRs easier to review
- Use conventional commit messages:
  - feat: new feature
  - fix: bug fix
  - docs: documentation changes
  - test: adding tests
  - refactor: code changes that neither fix bugs nor add features
  - style: formatting, missing semi colons, etc
  - chore: updating build tasks, package manager configs, etc

## Examples
<example>
# Good workflow
1. git checkout main && git pull
2. git checkout -b feature/project-management
3. Review docs/features/003-project-management.md
4. Add Project and Environment types
5. Commit: "feat: add Project and Environment types"
6. Push: git push -u origin feature/project-management
7. Add client methods for projects
8. Commit: "feat: add project-related methods to CoolifyClient"
9. Push: git push
10. Add MCP server tools
11. Commit: "feat: add project management tools to MCP server"
12. Push: git push
13. Add tests
14. Commit: "test: add project management tests"
15. Push: git push
16. Update feature doc for completed items
17. Commit: "docs: update feature doc for project management"
18. Push: git push
</example>

<example type="invalid">
# Poor workflow
1. Make all changes at once (types, client, server, tests)
2. Single large commit with all changes
3. No documentation updates until the end
4. Push directly to main
5. No intermediate pushes to remote
6. Vague commit messages like "project management work"
</example>

## Critical Points
<critical>
- NEVER make large, multi-component changes in a single commit
- ALWAYS commit after each logical component change
- ALWAYS push to remote after significant commits
- ALWAYS update documentation AS YOU GO
- ALWAYS use conventional commit messages
- NEVER wait until the end to write tests
</critical> 